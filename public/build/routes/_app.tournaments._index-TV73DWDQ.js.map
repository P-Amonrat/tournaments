{
  "version": 3,
  "sources": ["../../../app/routes/_app.tournaments._index.tsx", "../../../app/components/pages/Tournament/TournamentIndexHeader.tsx"],
  "sourcesContent": ["import { useCallback, useEffect, useState } from \"react\";\nimport { json, type LoaderFunction } from \"@remix-run/node\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  useFetcher,\n  useLoaderData,\n  useLocation,\n  useNavigation,\n  useSubmit,\n} from \"@remix-run/react\";\n// import { Button } from \"antd\";\nimport * as APIServer from \"~/api\";\nimport {\n  TournamentIndexHeader,\n  TournamentGrid,\n  TournamentSlider,\n  TournamentSliderItem,\n} from \"~/components/pages/Tournament\";\nimport { Loading, OverlayBg, TiltMenus } from \"~/components/common\";\nimport { AffixMenu } from \"~/components/layouts\";\nimport { omitBy, isNil, isEmpty } from \"lodash\";\nimport jwt_decode from \"jwt-decode\";\nimport { getSessionFromRequest } from \"~/session.server\";\nimport { joinTournaments } from \"~/utils/helper\";\nimport { Button } from \"antd\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const session = await getSessionFromRequest(request);\n  const url = new URL(request.url) as any;\n  const searchParams = Object.fromEntries(url.searchParams);\n  const accessToken = session.get(\"accessToken\");\n  let uuid = \"\" as string;\n\n  let tournaments: any[] = [];\n  let games: any[] = [];\n  let joinedTournaments: any[] = [];\n  let transformedJoinedTournaments: any[] = [];\n  let count: number = 0;\n\n  try {\n    const tournamentRes = await APIServer.clientFromSession().request(\n      APIServer.getTournamentsPaginate(searchParams)\n    );\n    const gameRes = await APIServer.clientFromSession().request(\n      APIServer.getGames()\n    );\n    if (tournamentRes.data) {\n      tournaments = tournamentRes.data.data;\n      count = tournamentRes.data.count;\n    }\n    if (gameRes.data) {\n      games = gameRes.data;\n    }\n  } catch (e) {\n    console.log(\"e\", e);\n  }\n\n  if (accessToken) {\n    const accessTokenDecoded: any = jwt_decode(accessToken);\n    uuid = accessTokenDecoded.sub;\n    try {\n      const tournamentRes = await APIServer.clientFromSession().request(\n        APIServer.getJoinedTournament(uuid)\n      );\n      if (tournamentRes.data) {\n        joinedTournaments = tournamentRes.data;\n      }\n\n      transformedJoinedTournaments = joinedTournaments.map((item) => {\n        return {\n          id: item.tournament.id,\n          name: item.tournament.name,\n          nameEn: item.tournament.nameEn,\n          discordUrl: item.tournament.discordUrl,\n          registrationStartDate: item.tournament.registrationStartDate,\n          registrationEndDate: item.tournament.registrationEndDate,\n          startDate: item.tournament.startDate,\n          endDate: item.tournament.endDate,\n          maxTeam: item.tournament.maxTeam,\n          playerCount: item.tournament.playerCount,\n          additionalPlayerCount: item.tournament.additionalPlayerCount,\n          type: item.tournament.type,\n          status: item.tournament.status,\n          finalRoundLocation: item.tournament.finalRoundLocation,\n          finalRoundLocationEn: item.tournament.finalRoundLocationEn,\n          totalPrize: item.tournament.totalPrize,\n          prize: item.tournament.prize,\n          description: item.tournament.description,\n          descriptionEn: item.tournament.descriptionEn,\n          qualificationRules: item.tournament.qualificationRules,\n          qualificationRulesEn: item.tournament.qualificationRulesEn,\n          isOnline: item.tournament.isOnline,\n          bannerImageUrl: item.tournament.bannerImageUrl,\n          thumbnailImageUrl: item.tournament.thumbnailImageUrl,\n          remark: item.tournament.remark,\n          isKycRequired: item.tournament.isKycRequired,\n          isDiscordIdRequired: item.tournament.isDiscordIdRequired,\n          isEmailRequired: item.tournament.isEmailRequired,\n          isPhoneNumberRequired: item.tournament.isPhoneNumberRequired,\n          isIgnRequired: item.tournament.isIgnRequired,\n          requirementFields: item.tournament.requirementFields,\n          organizerId: item.tournament.organizerId,\n          gameId: item.tournament.gameId,\n          organizer: item.tournament.organizer,\n          game: item.tournament.game,\n          createdDate: item.tournament.createdDate,\n          updatedDate: item.tournament.updatedDate,\n        };\n      });\n      tournaments = joinTournaments(tournaments, transformedJoinedTournaments);\n    } catch (e) {\n      console.log(\"e\", e);\n    }\n  }\n\n  return json({ searchParams, tournaments, count, games });\n};\n\nexport default function TournamentLayout() {\n  const { searchParams, tournaments, games, count } = useLoaderData();\n  const fetcher = useFetcher();\n  const submit = useSubmit();\n  const { t } = useTranslation();\n  const navigation = useNavigation();\n  const location = useLocation();\n  const [featuredTournaments, setFeaturedTournaments] = useState<any>(null);\n  const [items, setItems] = useState<any>(null);\n\n  const handleLoadMore = useCallback(() => {\n    const newSearchParams = { ...searchParams, offset: items.length };\n    const queryString = new URLSearchParams(\n      omitBy(newSearchParams, isNil)\n    ).toString();\n\n    fetcher.load(`.?${queryString}`);\n  }, [items, searchParams]);\n\n  const handleGameChanged = useCallback(\n    (game: string) => {\n      const newSearchParams = { ...searchParams };\n      if (game && game.length > 0) {\n        newSearchParams[\"game\"] = game;\n      } else {\n        delete newSearchParams[\"game\"];\n      }\n      submit(\n        omitBy(newSearchParams, (v) => isNil(v) && isEmpty(v)),\n        { method: \"get\", preventScrollReset: true }\n      );\n    },\n    [searchParams]\n  );\n\n  useEffect(() => {\n    fetcher.load(\"/resources/featured-tournaments\");\n  }, []);\n\n  useEffect(() => {\n    setItems([...tournaments]);\n  }, [tournaments]);\n\n  useEffect(() => {\n    if (!fetcher.data || fetcher.state !== \"idle\") {\n      return;\n    }\n    if (fetcher.data.featuredTournaments) {\n      setFeaturedTournaments(fetcher.data.featuredTournaments);\n    }\n    if (fetcher.data.tournaments) {\n      setItems((items: any[]) => [...items, ...fetcher.data.tournaments]);\n    }\n  }, [fetcher.data]);\n\n  const hasSearchParams =\n    searchParams.game && searchParams.game.length > 0 ? true : false;\n\n  return (\n    <div\n      style={{\n        paddingInline: \"3.5%\",\n        paddingBlock: 20,\n        maxWidth: 1440,\n        marginInline: \"auto\",\n      }}\n    >\n      <div style={{ borderRadius: 10, overflow: \"hidden\" }}>\n        {!featuredTournaments ? (\n          <TournamentSliderItem loading data={null} />\n        ) : (\n          <TournamentSlider data={featuredTournaments} />\n        )}\n      </div>\n      <AffixMenu>\n        <TiltMenus\n          activeFromQueryString\n          menus={[\n            {\n              link: hasSearchParams ? `.?game=${searchParams.game}` : \".\",\n              label: <span>{t(\"all tournaments\")}</span>,\n            },\n            {\n              link: hasSearchParams\n                ? `.?status=upcoming&game=${searchParams.game}`\n                : \".?status=upcoming\",\n              label: <span>{t(\"upcoming tournaments\")}</span>,\n            },\n            {\n              link: hasSearchParams\n                ? `.?status=opening&game=${searchParams.game}`\n                : \".?status=opening\",\n              label: <span>{t(\"opening tournaments\")}</span>,\n            },\n            {\n              link: hasSearchParams\n                ? `.?status=ongoing&game=${searchParams.game}`\n                : \".?status=ongoing\",\n              label: <span>{t(\"ongoing tournaments\")}</span>,\n            },\n            {\n              link: hasSearchParams\n                ? `.?status=finished&game=${searchParams.game}`\n                : \".?status=finished\",\n              label: <span>{t(\"finished tournaments\")}</span>,\n            },\n          ]}\n          preventScrollReset\n        />\n      </AffixMenu>\n      <TournamentIndexHeader\n        initialValues={searchParams}\n        items={items}\n        games={games}\n        onGameChanged={handleGameChanged}\n      />\n      <TournamentGrid\n        loading={\n          navigation.state === \"loading\" &&\n          navigation.location.pathname === location.pathname\n        }\n        data={items}\n      />\n      {items && items.length < count && (\n        <div style={{ textAlign: \"center\", marginTop: 20 }}>\n          <Button onClick={handleLoadMore} size=\"large\">\n            {t(\"load more\")}\n          </Button>\n        </div>\n      )}\n      {navigation.state === \"loading\" && (\n        <OverlayBg style={{ position: \"fixed\", zIndex: 100 }} opacity={0.7}>\n          <Loading />\n        </OverlayBg>\n      )}\n    </div>\n  );\n}\n", "import { useContext } from \"react\";\nimport { Link } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Col, Row, Select, Skeleton, Space, Typography, theme } from \"antd\";\nimport { ControlOutlined, HistoryOutlined } from \"@ant-design/icons\";\nimport { AuthContext } from \"~/contexts\";\nimport { isArray } from \"lodash\";\n\nconst { useToken } = theme;\nconst { Text } = Typography;\n\ninterface TournamentIndexHeaderProps {\n  initialValues: any;\n  items: any;\n  games: any;\n  onGameChanged: (game: string) => void;\n}\n\nexport function TournamentIndexHeader(props: TournamentIndexHeaderProps) {\n  const { t } = useTranslation();\n  const { token } = useToken();\n  const { user } = useContext(AuthContext);\n  const { initialValues, items, games, onGameChanged } = props;\n\n  const gameOptions = [\n    {\n      label: t(\"all games\"),\n      value: \"\",\n    },\n  ];\n  if (isArray(games) && games.length > 0) {\n    games.map((game: any) => {\n      gameOptions.push({\n        label: game.name,\n        value: game.name,\n      });\n    });\n  }\n\n  return (\n    <>\n      <Select\n        defaultValue={initialValues.game ? initialValues.game : \"\"}\n        onSelect={onGameChanged}\n        options={gameOptions}\n        style={{ width: 140, marginBottom: 20 }}\n      />\n      <Row style={{ marginBottom: 20 }}>\n        <Col flex=\"none\">\n          <Skeleton active loading={items === null} paragraph={false} title>\n            <Text style={{ color: token.colorTextSecondary }}>{`${\n              items ? items.length : 0\n            } ${t(\"items\")}`}</Text>\n          </Skeleton>\n        </Col>\n        {user && (\n          <Col flex=\"auto\" style={{ textAlign: \"right\" }}>\n            <Space direction=\"horizontal\" size={15}>\n              <Link\n                to={`/users/${user.userName ? user.userName : user.uuid}`}\n                style={{ color: token.colorTextBase }}\n              >\n                <Space direction=\"horizontal\" size={5}>\n                  <ControlOutlined style={{ color: \"#7063f4\" }} />\n                  {t(\"dashboard\")}\n                </Space>\n              </Link>\n              <Link\n                to={`/users/${\n                  user?.userName ? user.userName : user.uuid\n                }/joined-tournaments`}\n                style={{ color: token.colorTextBase }}\n              >\n                <Space direction=\"horizontal\" size={5}>\n                  <HistoryOutlined style={{ color: \"#7063f4\" }} />\n                  {t(\"history\")}\n                </Space>\n              </Link>\n            </Space>\n          </Col>\n        )}\n      </Row>\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_lodash", "import_jsx_dev_runtime", "items"]
}
