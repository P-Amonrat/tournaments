{
  "version": 3,
  "sources": ["../../../app/routes/_app.settings.experiences.tsx", "../../../app/components/pages/User/ExperiencesForm.tsx", "../../../app/components/pages/User/ExpereinceEntry.tsx", "../../../app/components/pages/User/ExperienceEntryControl.tsx", "../../../app/components/pages/User/ExperiencesTitleForm.tsx"],
  "sourcesContent": ["import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  useFetcher,\n  useLoaderData,\n  useMatches,\n  useNavigate,\n  useSubmit,\n} from \"@remix-run/react\";\nimport {\n  Avatar,\n  Button,\n  Col,\n  Divider,\n  Form,\n  Modal,\n  Row,\n  Space,\n  Tabs,\n  Typography,\n  notification,\n} from \"antd\";\nimport {\n  PlusOutlined,\n  EditOutlined,\n  ExclamationCircleFilled,\n  VerticalAlignMiddleOutlined,\n} from \"@ant-design/icons\";\nimport { TiltButton } from \"~/components/common\";\nimport { AppContext, AuthContext } from \"~/contexts\";\nimport {\n  type LoaderFunction,\n  json,\n  type ActionFunction,\n  redirect,\n} from \"@remix-run/node\";\n\nimport * as APIServer from \"~/api\";\nimport {\n  commitSession,\n  getSessionFromRequest,\n  mustAuthenticated,\n} from \"~/session.server\";\nimport { ExperienceForm } from \"~/components/pages/User/ExperiencesForm\";\nimport { isNil, omitBy } from \"lodash\";\nimport { ExperienceEntry } from \"~/components/pages/User/ExpereinceEntry\";\nimport { ExperienceTitleForm } from \"~/components/pages/User/ExperiencesTitleForm\";\nimport { SortableList } from \"~/components/pages/Sorting/SortableList\";\nimport { ArrowUpDown } from \"lucide-react\";\nconst { Title, Text } = Typography;\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await mustAuthenticated(request);\n  const session = await getSessionFromRequest(request);\n  const url = new URL(request.url) as any;\n  const searchParams = Object.fromEntries(url.searchParams);\n  let experiencesTitle = [];\n  let experiences = [];\n  let firstGameId = null;\n  try {\n    const experiencesTitleRes = await APIServer.clientFromSession(\n      session\n    ).request(APIServer.getExperiencesTitle());\n    if (experiencesTitleRes.data) {\n      experiencesTitle = experiencesTitleRes.data;\n    }\n    if (experiencesTitleRes.data) {\n      // experiencesTitle = experiencesTitleRes.data.map(\n      //   (experienceTitle: any, index: number) => ({\n      //     ...experienceTitle,\n\n      //   })\n      // );\n      experiencesTitle = experiencesTitleRes.data.map(\n        (item: any, index: number) =>\n          item.id\n            ? {\n                ...item,\n                haveOrignalId: true,\n              }\n            : { ...item, id: index + 1, haveOrignalId: false }\n      );\n    }\n    firstGameId = experiencesTitle[0]?.rankingGameId\n      ? { rankingGameId: experiencesTitle[0]?.rankingGameId }\n      : { experienceTitleId: experiencesTitle[0]?.id };\n\n    const experiencesRes = await APIServer.clientFromSession(session).request(\n      APIServer.getExperiences(searchParams, firstGameId)\n    );\n    if (experiencesRes.data) {\n      experiences = experiencesRes.data;\n    }\n  } catch (e) {\n    console.log(\"user setting error\", e);\n  }\n\n  return json({ experiencesTitle, experiences, firstGameId });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const session = await getSessionFromRequest(request);\n  const formdata = await request.formData();\n  const entries = Object.fromEntries(formdata) as any;\n  const data = entries.data ? JSON.parse(entries.data) : null;\n  const uuid = entries.uuid;\n\n  switch (entries.action) {\n    case \"create\":\n      try {\n        await APIServer.clientFromSession(session).request(\n          APIServer.createPersonalDetails(data)\n        );\n        session.flash(\"flashMessage\", {\n          type: \"success\",\n          message: `successfully created personal details`,\n        });\n      } catch (e: any) {\n        session.flash(\"flashMessage\", {\n          type: \"error\",\n          message:\n            e.errors && e.errors.length > 1\n              ? e.errors[0]\n              : e.response.data.message,\n        });\n      }\n      break;\n    case \"update\":\n      try {\n        await APIServer.clientFromSession(session).request(\n          APIServer.updatePersonalDetails(data)\n        );\n        session.flash(\"flashMessage\", {\n          type: \"success\",\n          message: `successfully updated personal details`,\n        });\n      } catch (e: any) {\n        session.flash(\"flashMessage\", {\n          type: \"error\",\n          message:\n            e.errors && e.errors.length > 1\n              ? e.errors[0]\n              : e.response.data.message,\n        });\n      }\n      break;\n    case \"save-to-profile-index\":\n      session.flash(\"flashMessage\", {\n        type: \"success\",\n        message: `successfully saved to profile index`,\n      });\n      return redirect(`/users/${uuid}`, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n  }\n\n  return json(null, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n};\n\n// Modal properties\nconst modalProps = {\n  closeIcon: false,\n  footer: null,\n  modalRender: (modal: any) => modal,\n};\n\n// Main component\nexport default function SettingsExperiences() {\n  const { t } = useTranslation();\n  const fetcher = useFetcher();\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const { scheme } = useContext(AppContext);\n  const [messageApi, contextHolder] = notification.useNotification();\n  const { experiencesTitle, experiences } = useLoaderData();\n  const [experienceModal, setExperienceModal] = useState(false);\n  const [experienceTitleModal, setExperienceTitleModal] = useState(false);\n  const [experienceEditTitleModal, setExperienceEditTitleModal] =\n    useState(false);\n\n  const [experienceLists, setExperienceLists] = useState<[]>(experiences);\n  const [experienceTitleLists, setExperienceTitleLists] =\n    useState<[]>(experiencesTitle);\n  const [experienceTitleSortLists, setExperienceTitleSortLists] =\n    useState<[]>(experiencesTitle);\n\n  const [gameId, setGameId] = useState<number | undefined>(\n    experiencesTitle[0]?.rankingGameId\n  );\n  const [screenSize, setScreenSize] = useState<string>(\"\"); // Initialize state variable to hold screen size\n\n  const [titleType, setTitleType] = useState<string | undefined>(\n    experiencesTitle[0]?.rankingGameId ? \"rankingGameId\" : \"experienceTitleId\"\n  );\n  const [activeTabKey, setActiveTabKey] = useState<number>(0); // Initialize active tab key state\n\n  const tabItems = (titleItems: any, items: any) =>\n    titleItems &&\n    titleItems.length &&\n    titleItems.map((game: any, index: number) => ({\n      key: index,\n      label: (\n        <div style={{ position: \"relative\" }}>\n          <Avatar\n            src={`${cdnUrl}/${\n              game.rankingGame?.icon\n                ? game.rankingGame?.icon\n                : game?.icon\n                ? game.icon\n                : null\n            }`}\n            size={40}\n            style={{\n              margin: screenSize === \"greaterThanSM\" ? \"0 8px\" : \"0 4px\",\n              boxShadow:\n                scheme === \"dark\"\n                  ? \"0px 5px 10px -2px rgba(0, 0, 0, 0.6)\"\n                  : \"0px 5px 10px -2px rgba(0, 0, 0, 0.2)\",\n              opacity: activeTabKey === index ? 1 : 0.5,\n            }}\n          />\n          {game.icon && (\n            <div\n              style={{\n                position: \"absolute\",\n                top: -10,\n                right: 1,\n                zIndex: 1000,\n              }}\n              onClick={() => openTitleExperienceModal(game)}\n            >\n              <Avatar size={20} style={{ backgroundColor: \"black\" }}>\n                <EditOutlined />\n              </Avatar>\n            </div>\n          )}\n        </div>\n      ),\n      children: fetcher.state === \"idle\" && (\n        <>\n          <Title level={4}>\n            {game.rankingGame?.name ? game.rankingGame?.name : game.title}\n          </Title>\n          {items.map((experience: any, index: number) => (\n            <div key={index}>\n              <ExperienceEntry\n                data={experience}\n                fetcher={fetcher}\n                isMyWebboard={true}\n              />\n            </div>\n          ))}\n        </>\n      ),\n    }));\n\n  const [gameItems, setGameItems] = useState<any>(\n    tabItems(experienceTitleLists, experienceLists)\n  );\n\n  const [editTitleValue, setEditTitleValue] = useState<any>();\n  const [modal, contextHolder2] = Modal.useModal();\n  const [sortingModal, setSortingModal] = useState<boolean>(false);\n  const { user } = useContext(AuthContext);\n\n  const [form] = Form.useForm();\n  const submit = useSubmit();\n\n  const [titleForm] = Form.useForm();\n  const [titleEditForm] = Form.useForm();\n  const navigate = useNavigate();\n  const operations = (\n    <Avatar\n      icon={<PlusOutlined style={{ color: \"black\" }} />}\n      size={40}\n      style={{ backgroundColor: \"#f7f7f7\", cursor: \"pointer\" }}\n      onClick={() => openExperienceTitleModal()}\n    />\n  );\n\n  const handleToggleSortingMode = () => {\n    setSortingModal(!sortingModal);\n  };\n\n  const onChangeSortItems = (items: any) => {\n    setExperienceTitleSortLists(items);\n  };\n\n  const onCloseSortingModal = () => {\n    setSortingModal(false);\n  };\n\n  const handleSubmitSorting = () => {\n    setSortingModal(false);\n    const itemsId = {\n      order: experienceTitleSortLists.map((item: any, index: number) =>\n        item.haveOrignalId\n          ? {\n              experienceTitleId: item.id,\n            }\n          : { rankingGameId: item.rankingGameId }\n      ),\n    };\n\n    fetcher.submit(\n      {\n        data: JSON.stringify(itemsId),\n      },\n      {\n        method: \"post\",\n        action: `/resources/sorting-my-experience-title`,\n      }\n    );\n  };\n\n  const handleSubmitToProfileIndex = () => {\n    submit(\n      {\n        uuid: user.uuid,\n        action: \"save-to-profile-index\",\n      },\n      { method: \"post\" }\n    );\n  };\n\n  const openExperienceModal = () => {\n    setExperienceModal(true);\n  };\n\n  const openTitleExperienceModal = (value: any) => {\n    setEditTitleValue(value);\n    setExperienceEditTitleModal(true);\n  };\n\n  const openExperienceTitleModal = () => {\n    setExperienceTitleModal(true);\n  };\n\n  useEffect(() => {\n    setExperienceLists(experiences && experiences.length ? experiences : []);\n  }, [experiences, fetcher]);\n\n  useEffect(() => {\n    setGameItems(tabItems(experienceTitleLists, experienceLists));\n  }, [experienceLists, experienceTitleLists]);\n\n  useEffect(() => {\n    setExperienceTitleLists(\n      experiencesTitle && experiencesTitle.length ? experiencesTitle : []\n    );\n    setExperienceTitleSortLists(\n      experiencesTitle && experiencesTitle.length ? experiencesTitle : []\n    );\n  }, [experiencesTitle, fetcher]);\n\n  useEffect(() => {\n    if (!fetcher.data || fetcher.state !== \"idle\") {\n      return;\n    }\n\n    if (fetcher.data.experiences) {\n      setExperienceLists(fetcher.data.experiences);\n    }\n  }, [fetcher.data]);\n\n  useEffect(() => {\n    if (!fetcher.data || fetcher.state !== \"idle\") {\n      return;\n    }\n\n    if (fetcher.data.experiencesTitle) {\n      setExperienceTitleLists(fetcher.data.experiencesTitle);\n      setExperienceTitleSortLists(fetcher.data.experiencesTitle);\n    }\n  }, [fetcher.data]);\n\n  const handleDeleteExperienceTitle = useCallback(() => {\n    if (fetcher.state === \"idle\") {\n      modal.confirm({\n        title: `${t(`are you sure you want to delete this expereince title?`)}`,\n        icon: <ExclamationCircleFilled />,\n        okText: t(\"confirm\"),\n        okType: \"danger\",\n        cancelText: t(\"cancel\"),\n        maskClosable: true,\n        onOk() {\n          fetcher.submit(\n            { id: editTitleValue.id },\n            {\n              method: \"post\",\n              action: `/resources/delete-experience-title`,\n            }\n          );\n          setExperienceEditTitleModal(false);\n        },\n      });\n    }\n  }, [fetcher]);\n\n  const onChange = (key: any) => {\n    const param = experiencesTitle[key]?.rankingGameId\n      ? { rankingGameId: experiencesTitle[key]?.rankingGameId }\n      : { experienceTitleId: experiencesTitle[key]?.id };\n    const newSearchParams = param;\n\n    const queryString = new URLSearchParams(\n      omitBy(newSearchParams, isNil)\n    ).toString();\n    setGameId(\n      experiencesTitle[key]?.rankingGameId\n        ? experiencesTitle[key]?.rankingGameId\n        : experiencesTitle[key]?.id\n    );\n    setTitleType(\n      experiencesTitle[key]?.rankingGameId\n        ? \"rankingGameId\"\n        : \"experienceTitleId\"\n    );\n\n    setActiveTabKey(key);\n\n    fetcher.load(`.?${queryString}`);\n  };\n\n  useEffect(() => {\n    if (\n      fetcher.data &&\n      fetcher.data.success &&\n      fetcher.data.experienceTitleId\n    ) {\n      if (\n        // fetcher.data.success &&\n        // fetcher.data.success !== \"create-experience-title\" &&\n        // fetcher.data.success !== \"delete-experience-title\"\n        fetcher.data.success &&\n        fetcher.data.success !== \"create-experience-title\"\n      ) {\n        fetcher.load(`.?experienceTitleId=${fetcher.data.experienceTitleId}`);\n        messageApi.open({\n          type: \"success\",\n          message: t(`Successfully ${fetcher.data.action} experience`),\n          duration: 5,\n          placement: \"bottomRight\",\n        });\n        navigate(\"/settings/experiences\");\n      }\n    }\n    // else if (\n    //   fetcher.data &&\n    //   fetcher.data.success &&\n    //   fetcher.data.success === \"delete-experience-title\"\n    // ) {\n    //   // fetcher.load(`.?rankingGameId=${8}`);\n    //   messageApi.open({\n    //     type: \"success\",\n    //     message: t(`Successfully ${fetcher.data.action} experience title`),\n    //     duration: 5,\n    //     placement: \"bottomRight\",\n    //   });\n    //   navigate(\"/settings/experiences\");\n    // }\n  }, [fetcher.data]);\n\n  useEffect(() => {\n    // Listen for changes in screen size and update state variable accordingly\n    const handleResize = () => {\n      if (window.innerWidth > 576) {\n        setScreenSize(\"greaterThanSM\");\n      } else {\n        setScreenSize(\"atSM\");\n      }\n    };\n\n    handleResize(); // Call once to set initial state\n\n    window.addEventListener(\"resize\", handleResize); // Add event listener for window resize\n\n    return () => {\n      // Cleanup: Remove event listener when component unmounts\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <Space\n          size={10}\n          style={{\n            marginBottom: 20,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <Title level={2}>{t(\"experiences\")}</Title>\n          <Button\n            type=\"text\"\n            style={{\n              marginTop: 2,\n              marginRight: 10,\n              fontWeight: 600,\n              textAlign: \"center\",\n            }}\n            onClick={handleToggleSortingMode}\n          >\n            <ArrowUpDown\n              style={{\n                color: \"#7C6FF6\",\n                fontSize: \"1.2em\",\n                marginRight: \"5px\",\n              }}\n            />\n            {t(\"sort order\")}\n          </Button>\n        </Space>\n        <div>\n          <Tabs\n            items={gameItems}\n            onChange={onChange}\n            tabBarExtraContent={operations}\n          />\n        </div>\n        <div>\n          <TiltButton\n            color={`${scheme}-base`}\n            onClick={() => openExperienceModal()}\n            style={{ marginTop: 20 }}\n          >\n            + {t(\"add experince\")}\n          </TiltButton>\n        </div>\n        <TiltButton\n          color=\"primary\"\n          onClick={handleSubmitToProfileIndex}\n          style={{ marginTop: 20 }}\n        >\n          {t(\"save\")}\n        </TiltButton>\n      </div>\n      <Modal\n        {...modalProps}\n        onCancel={() => setExperienceModal(false)}\n        open={experienceModal}\n      >\n        <ExperienceForm\n          fetcher={fetcher}\n          form={form}\n          gameId={gameId}\n          titleType={titleType}\n          onCancel={() => setExperienceModal(false)}\n          action=\"create\"\n        />\n      </Modal>\n      <Modal\n        {...modalProps}\n        onCancel={() => setExperienceTitleModal(false)}\n        open={experienceTitleModal}\n      >\n        <ExperienceTitleForm\n          fetcher={fetcher}\n          form={titleForm}\n          gameId={gameId}\n          onCancel={() => setExperienceTitleModal(false)}\n          action=\"create\"\n        />\n      </Modal>\n      <Modal\n        {...modalProps}\n        onCancel={() => setExperienceEditTitleModal(false)}\n        open={experienceEditTitleModal}\n      >\n        <ExperienceTitleForm\n          fetcher={fetcher}\n          form={titleEditForm}\n          gameId={gameId}\n          onCancel={() => setExperienceEditTitleModal(false)}\n          action=\"edit\"\n          initialValues={fetcher.state === \"idle\" && editTitleValue}\n          handleDeleteExperienceTitle={handleDeleteExperienceTitle}\n        />\n      </Modal>\n      <Modal\n        {...modalProps}\n        onCancel={() => setSortingModal(false)}\n        open={sortingModal}\n      >\n        <div\n          style={{\n            marginTop: \"15px\",\n          }}\n        >\n          <Text style={{ fontSize: \"24px\", fontWeight: \"600\" }}>\n            {t(\"sorting order\")}\n          </Text>\n          <Divider style={{ margin: 7 }} />\n          <SortableList\n            items={experienceTitleSortLists}\n            onChange={onChangeSortItems}\n            renderItem={(item: any, items: any[]) => (\n              <SortableList.Item id={item.id}>\n                <div style={{ position: \"relative\", margin: \"15px\" }}>\n                  <div style={{ position: \"absolute\", zIndex: 1000 }}>\n                    {<SortableList.DragHandle />}\n                  </div>\n                  <TiltButton color=\"gray\">\n                    {item.rankingGame?.name\n                      ? item.rankingGame.name\n                      : item.title}\n                  </TiltButton>\n                </div>\n              </SortableList.Item>\n            )}\n          />\n          <Row gutter={10} style={{ marginTop: 30 }}>\n            <Col span={12}>\n              <TiltButton color=\"secondary\" onClick={onCloseSortingModal}>\n                {t(\"cancel\")}\n              </TiltButton>\n            </Col>\n            <Col span={12}>\n              <TiltButton color=\"primary\" onClick={handleSubmitSorting}>\n                {t(\"save\")}\n              </TiltButton>\n            </Col>\n          </Row>\n        </div>\n      </Modal>\n      {contextHolder}\n      {contextHolder2}\n    </div>\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Col,\n  Divider,\n  Flex,\n  Form,\n  Input,\n  notification,\n  Row,\n  Space,\n  // theme,\n  Typography,\n  DatePicker,\n  Switch,\n} from \"antd\";\n// import { AuthContext } from \"~/contexts\";\nimport { TiltButton } from \"~/components/common\";\nimport { useMatches } from \"@remix-run/react\";\nimport dayjs from \"dayjs\";\nimport { flattenObject } from \"~/utils/helper\";\nconst { Text, Title } = Typography;\n// const { useToken } = theme;\n\ninterface ExperienceFormProps {\n  fetcher: any;\n  form: any;\n  action: string;\n  initialValues?: any;\n  titleType?: string;\n  gameId: number | undefined;\n  onCancel: () => void;\n}\n\nexport function ExperienceForm(props: ExperienceFormProps) {\n  const { fetcher, form, initialValues, onCancel, action, gameId, titleType } =\n    props;\n\n  const { t } = useTranslation();\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  // const { token } = useToken();\n  // const { user } = useContext(AuthContext);\n  const [messageApi, contextHolder] = notification.useNotification();\n  const [uploading, setUploading] = useState<boolean>(false);\n  const [isPresent, setIsPresent] = useState<boolean>(\n    initialValues ? (initialValues.endDate === null ? true : false) : false\n  ); // State for \"present\" switch\n  let initialData = {} as any;\n\n  if (initialValues) {\n    const { startDate, endDate, ...rest } = initialValues;\n    initialData = {\n      ...rest,\n      startDate:\n        initialValues?.startDate &&\n        dayjs(initialValues.startDate).toISOString(),\n      endDate:\n        initialValues?.endDate && dayjs(initialValues.endDate).toISOString(),\n    };\n  }\n\n  const handlePresentChange = (checked: boolean) => {\n    setIsPresent(checked);\n    if (checked) {\n      form.setFieldValue(\"endDate\", null); // Set end date to null\n    }\n  };\n\n  const handleSubmit = (values: any) => {\n    const { isPrivate, ...rest } = values;\n\n    // Create a new object for submission with the common fields\n    let submissionData = {\n      ...rest,\n      id: initialValues?.id, // include initialValues ID if it exists\n    };\n\n    // Conditionally add or remove fields based on titleType\n    if (action === \"edit\") {\n      submissionData = {\n        ...submissionData,\n      };\n    } else if (titleType === \"experienceTitleId\") {\n      submissionData = {\n        ...submissionData,\n        experienceTitleId: gameId,\n      };\n    } else {\n      submissionData = {\n        ...submissionData,\n        rankingGameId: gameId,\n      };\n    }\n\n    fetcher.submit(\n      {\n        data: JSON.stringify(submissionData),\n      },\n      action === \"create\"\n        ? {\n            method: \"post\",\n            action: `/resources/create-experience`,\n          }\n        : {\n            method: \"put\",\n            action: `/resources/edit-experience`,\n          }\n    );\n    form.resetFields();\n    onCancel();\n  };\n\n  useEffect(() => {\n    if (initialValues) {\n      form.setFieldsValue(flattenObject(initialData));\n    }\n  }, [initialValues, form]); // Dependency array includes initialValues and form\n\n  useEffect(() => {\n    if (fetcher.data && fetcher.data.field && fetcher.state) {\n      if (fetcher.data.field === \"cover\") {\n        form.setFieldValue(\"cover\", fetcher.data.key);\n      }\n\n      setUploading(false);\n    }\n  }, [form, fetcher.data, fetcher.state]);\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Form\n        form={form}\n        initialValues={flattenObject(initialData)}\n        onFinish={handleSubmit}\n        layout=\"vertical\"\n      >\n        <Title level={4} style={{ margin: 0 }}>\n          {action === \"create\" ? t(\"add experience\") : t(\"edit experience\")}\n        </Title>\n        <Divider />\n        <Flex gap={15} vertical>\n          <Form.Item\n            key=\"name\"\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: t(\"please input experience name\"),\n              },\n            ]}\n            label={\n              <Space size={10}>\n                <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                  {t(\"team name or tournament name\")}\n                </Text>\n              </Space>\n            }\n          >\n            <Input />\n          </Form.Item>\n          <Row gutter={20}>\n            <Col span={12}>\n              <Form.Item\n                name=\"startDate\"\n                label={\n                  <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                    {t(\"experience start date\")}\n                  </Text>\n                }\n                rules={[\n                  {\n                    required: true,\n                    message: `${t(\"please select experience start date\")}`,\n                  },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value) {\n                        return Promise.resolve();\n                      } else {\n                        if (getFieldValue(\"endDate\")) {\n                          if (value.isBefore(getFieldValue(\"endDate\"))) {\n                            return Promise.resolve();\n                          }\n                        } else {\n                          return Promise.resolve();\n                        }\n                        return Promise.reject(\n                          \"start date must be before end date\"\n                        );\n                      }\n                    },\n                  }),\n                ]}\n              >\n                <DatePicker\n                  name=\"startDate\"\n                  showToday={false}\n                  allowClear={false}\n                  placeholder=\"DD/MM/YYYY\"\n                  format=\"DD/MM/YYYY\"\n                  style={{ display: \"flex\" }}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item\n                name=\"endDate\"\n                label={\n                  <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                    {t(\"experience end date\")}\n                  </Text>\n                }\n                rules={[\n                  {\n                    required: !isPresent,\n                    message: `${t(\"please select experience end date\")}`,\n                  },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || !getFieldValue(\"startDate\")) {\n                        return Promise.resolve();\n                      }\n                      if (value.isAfter(dayjs(getFieldValue(\"startDate\")))) {\n                        return Promise.resolve();\n                      }\n                      return Promise.reject(\n                        \"end date must be after the start date\"\n                      );\n                    },\n                  }),\n                ]}\n              >\n                <DatePicker\n                  name=\"endDate\"\n                  showToday={false}\n                  allowClear={false}\n                  placeholder=\"DD/MM/YYYY\"\n                  format=\"DD/MM/YYYY\"\n                  style={{ display: \"flex\" }}\n                  disabled={isPresent} // Disable when \"present\" switch is on\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Row justify={\"end\"}>\n            <Form.Item key=\"present\" name=\"present\" valuePropName=\"checked\">\n              <Space>\n                <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                  {t(\"present\")}\n                </Text>\n                <Switch onChange={handlePresentChange} value={isPresent} />\n              </Space>\n            </Form.Item>\n          </Row>\n\n          <Form.Item\n            key=\"description\"\n            name=\"description\"\n            label={\n              <Space size={5}>\n                <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                  {t(\"description\")}\n                </Text>\n              </Space>\n            }\n          >\n            <Input.TextArea\n              placeholder={t(\"input description\")}\n              autoSize={{\n                minRows: 5,\n              }}\n            />\n          </Form.Item>\n        </Flex>\n        <Row gutter={10} style={{ marginTop: 30 }}>\n          <Col span={12}>\n            <TiltButton color=\"secondary\" onClick={onCancel}>\n              {t(\"cancel\")}\n            </TiltButton>\n          </Col>\n          <Col span={12}>\n            <TiltButton color=\"primary\" onClick={() => form.submit()}>\n              {action === \"create\" ? t(\"create experience\") : t(\"edit\")}\n            </TiltButton>\n          </Col>\n        </Row>\n      </Form>\n      {contextHolder}\n    </div>\n  );\n}\n", "import { useContext, useEffect, useState } from \"react\";\nimport { useMatches } from \"@remix-run/react\";\nimport { Card, Flex, Space, Typography } from \"antd\";\nimport { AppContext, AuthContext } from \"~/contexts\";\nimport { LockOutlined } from \"@ant-design/icons\";\nimport { ExperienceEntryControl } from \"./ExperienceEntryControl\";\nimport dayjs from \"dayjs\";\nimport { useTranslation } from \"react-i18next\";\nconst { Text, Title } = Typography;\n\ninterface ExperienceEntryProps {\n  data: any;\n  rankingGame?: any;\n  fetcher?: any;\n  isMyWebboard?: boolean;\n}\n\nexport function ExperienceEntry(props: ExperienceEntryProps) {\n  const { data, rankingGame, fetcher } = props;\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const { scheme } = useContext(AppContext);\n  const { user } = useContext(AuthContext);\n  const isOwner = true;\n  const isForumAdmin = user && user.roles.includes(\"forum_admin\");\n  const { t } = useTranslation();\n  const [screenSize, setScreenSize] = useState<string>(\"\"); // Initialize state variable to hold screen size\n\n  // Add placeholders if there are fewer than 4 photos\n\n  useEffect(() => {\n    // Listen for changes in screen size and update state variable accordingly\n    const handleResize = () => {\n      if (window.innerWidth > 576) {\n        setScreenSize(\"greaterThanSM\");\n      } else {\n        setScreenSize(\"atSM\");\n      }\n    };\n\n    handleResize(); // Call once to set initial state\n\n    window.addEventListener(\"resize\", handleResize); // Add event listener for window resize\n\n    return () => {\n      // Cleanup: Remove event listener when component unmounts\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  const cardStyle = {\n    margin: \"10px 0\",\n    borderRadius: \"6px\",\n    border: \"1px solid #E5E4E4\",\n  };\n\n  return (\n    <>\n      <Card style={cardStyle}>\n        <Flex gap={20} vertical>\n          <Flex justify=\"space-between\" align=\"flex-start\" wrap=\"wrap\">\n            <Space\n              direction=\"vertical\"\n              size={1}\n              style={{ margin: 0, padding: 0 }}\n            >\n              <Title level={5}>{data.name}</Title>\n              <Text>\n                {dayjs(data.startDate).format(\"MMM YYYY\")} -{\" \"}\n                {data.endDate\n                  ? dayjs(data.endDate).format(\"MMM YYYY\")\n                  : t(\"present\")}\n              </Text>\n            </Space>\n            <ExperienceEntryControl\n              fetcher={fetcher}\n              id={data.id}\n              isOwner={isOwner}\n              isForumAdmin={isForumAdmin}\n              initialValues={data}\n              postType=\"experience\"\n            />\n          </Flex>\n          <Text>{data.description}</Text>\n        </Flex>\n      </Card>\n    </>\n  );\n}\n", "import { useTranslation } from \"react-i18next\";\nimport { Input, Modal, Space, Typography, Select, Form } from \"antd\";\nimport {\n  AlertOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  ExclamationCircleFilled,\n} from \"@ant-design/icons\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { TiltButton } from \"~/components/common\";\nimport { AppContext } from \"~/contexts\";\nimport { resetFetcher } from \"~/utils/helper\";\nimport { ShareDropDown } from \"~/components/common/ShareDropDown\";\nimport { AlbumForm } from \"./AlbumForm\";\nimport { ExperienceForm } from \"./ExperiencesForm\";\n\nconst { Text, Title } = Typography;\n\ninterface ExperienceEntryControlProps {\n  fetcher?: any;\n  id: string;\n  ignoreShare?: boolean;\n  isOwner?: boolean;\n  isForumAdmin?: boolean;\n  onEditClicked?: () => void;\n  postType?: string;\n  initialValues?: any;\n}\n\nconst modalProps = {\n  closeIcon: false,\n  footer: null,\n  modalRender: (modal: any) => modal,\n} as any;\n\nexport function ExperienceEntryControl(props: ExperienceEntryControlProps) {\n  const {\n    fetcher,\n    id,\n    ignoreShare,\n    isOwner,\n    isForumAdmin,\n    postType,\n    initialValues,\n  } = props;\n  const { t } = useTranslation();\n  const { baseUrl } = useContext(AppContext);\n  const [reason, setReason] = useState<string>(\"\");\n  const [modal, contextHolder] = Modal.useModal();\n  const [reportModal, setReportModal] = useState<boolean>(false);\n  const [openCreateExperienceModal, setOpenCreateExperienceModal] =\n    useState(false);\n  const [form] = Form.useForm();\n\n  const albumUrl = `${baseUrl}/album/${id}`;\n  const { Option } = Select;\n\n  const handleOpenCreateExperienceModal = () => {\n    setOpenCreateExperienceModal(true);\n  };\n\n  const handleDeleteExperience = useCallback(() => {\n    if (fetcher.state === \"idle\") {\n      modal.confirm({\n        title: `${t(`are you sure you want to delete this expereince?`)}`,\n        icon: <ExclamationCircleFilled />,\n        okText: t(\"confirm\"),\n        okType: \"danger\",\n        cancelText: t(\"cancel\"),\n        maskClosable: true,\n        onOk() {\n          fetcher.submit(\n            { id: initialValues.id },\n            {\n              method: \"post\",\n              action: `/resources/delete-experience`,\n            }\n          );\n        },\n      });\n    }\n  }, [fetcher]);\n\n  const openReportModal = () => {\n    setReportModal(true);\n  };\n\n  const closeReportModal = () => {\n    setReportModal(false);\n  };\n\n  const onReasonChanged = (e: any) => {\n    setReason(e.target.value);\n  };\n\n  const [selectedReason, setSelectedReason] = useState<string>(\"\");\n\n  const reasonOptions = [\n    { label: \" Inappropriate Content\", value: \"Inappropriate Content\" },\n    { label: \"Violence\", value: \"Violence\" },\n    { label: \"Harassment\", value: \"Harassment\" },\n    { label: \" False Information\", value: \"False Information\" },\n    { label: \"Spam\", value: \"Spam\" },\n    { label: \"Unauthorized Sales\", value: \"Unauthorized Sales\" },\n    { label: \"Others\", value: \"Others\" },\n  ];\n\n  const onReasonSelected = (value: string) => {\n    if (value !== \"Others\") {\n      setReason(value);\n    } else {\n      setReason(\"\");\n    }\n    setSelectedReason(value);\n  };\n\n  const reasonSelect = (\n    <Select\n      style={{ width: \"100%\" }}\n      onChange={onReasonSelected}\n      value={selectedReason ? selectedReason : undefined}\n      disabled={fetcher.state !== \"idle\"}\n      placeholder={t(\"select reason\")}\n      listHeight={300}\n    >\n      {reasonOptions.map((option) => (\n        <Option key={option.value} value={option.value}>\n          {option.label}\n        </Option>\n      ))}\n    </Select>\n  );\n\n  const submitReport = useCallback(() => {\n    if (reason.length > 0) {\n      fetcher.submit(\n        { reason, id, type: postType },\n        {\n          method: \"post\",\n          action: `/resources/report-post`,\n        }\n      );\n    }\n  }, [fetcher, postType, reason]);\n\n  const deletePost = useCallback(() => {\n    modal.confirm({\n      title: `${t(`are you sure to delete this post`)}?`,\n      icon: <ExclamationCircleFilled />,\n      okText: t(\"confirm\"),\n      okType: \"danger\",\n      cancelText: t(\"cancel\"),\n      maskClosable: true,\n      onOk() {\n        fetcher.submit(\n          { id, type: postType },\n          {\n            method: \"delete\",\n            action: `/resources/delete-post`,\n          }\n        );\n      },\n    });\n  }, [fetcher, id, postType]);\n\n  const menus = [\n    {\n      label: (\n        <Space size={10} style={{ color: \"#f5222d\" }}>\n          <AlertOutlined />\n          {t(\"report\")}\n        </Space>\n      ),\n      onClick: openReportModal,\n    },\n  ] as any[];\n  if (isOwner || isForumAdmin) {\n    menus.push({\n      label: (\n        <Space size={10}>\n          <DeleteOutlined />\n          {t(\"delete\")}\n        </Space>\n      ),\n      onClick: deletePost,\n    });\n  }\n  useEffect(() => {\n    setReason(\"\");\n  }, [id]);\n\n  useEffect(() => {\n    if (\n      fetcher &&\n      fetcher.data &&\n      fetcher.data.success === `report-${postType ? postType : \"webboard\"}` &&\n      fetcher.state === \"idle\"\n    ) {\n      setReason(\"\");\n      setReportModal(false);\n      resetFetcher(fetcher);\n    }\n  }, [fetcher, postType]);\n\n  return (\n    <>\n      <Space size={15}>\n        {/* {!ignoreShare && (\n          <ShareDropDown copiedMessage=\"album url copied\" postUrl={albumUrl} />\n        )} */}\n        {isOwner && (\n          <>\n            <Text\n              style={{ fontSize: 18, cursor: \"pointer\" }}\n              onClick={handleOpenCreateExperienceModal}\n            >\n              <EditOutlined />\n            </Text>\n            <Text\n              style={{ fontSize: 18, cursor: \"pointer\", color: \"#f5222d\" }}\n              onClick={handleDeleteExperience}\n            >\n              <DeleteOutlined />\n            </Text>\n          </>\n        )}\n      </Space>\n      <Modal\n        {...modalProps}\n        onCancel={() => setOpenCreateExperienceModal(false)}\n        open={fetcher.state === \"idle\" && openCreateExperienceModal}\n      >\n        <ExperienceForm\n          fetcher={fetcher}\n          form={form}\n          onCancel={() => setOpenCreateExperienceModal(false)}\n          initialValues={initialValues}\n          action=\"edit\"\n          gameId={initialValues.experienceTitleId}\n        />\n      </Modal>\n      <Modal\n        closeIcon={false}\n        footer={null}\n        open={reportModal}\n        onCancel={closeReportModal}\n      >\n        <Space direction=\"vertical\" size={20} style={{ display: \"flex\" }}>\n          <Title level={4} style={{ margin: 0 }}>\n            {t(\"please input reason to report\")}\n          </Title>\n          {reasonSelect}\n          {selectedReason === \"Others\" && (\n            <Input.TextArea\n              rows={4}\n              onChange={onReasonChanged}\n              value={reason}\n              disabled={fetcher.state !== \"idle\"}\n            />\n          )}\n          <TiltButton\n            color=\"danger\"\n            onClick={submitReport}\n            disabled={!reason.length || fetcher.state !== \"idle\"}\n          >\n            {t(\"report\")}\n          </TiltButton>\n        </Space>\n      </Modal>\n      {contextHolder}\n    </>\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Col,\n  Divider,\n  Flex,\n  Form,\n  Input,\n  notification,\n  Row,\n  Space,\n  // theme,\n  Typography,\n  Avatar,\n  theme,\n  Modal,\n} from \"antd\";\nimport {\n  LoadingOutlined,\n  CameraOutlined,\n  EditOutlined,\n} from \"@ant-design/icons\";\n// import { AuthContext } from \"~/contexts\";\nimport { FileUploader, OverlayBg, TiltButton } from \"~/components/common\";\nimport { useMatches } from \"@remix-run/react\";\nconst { Text, Title } = Typography;\nconst { useToken } = theme;\n\ninterface ExperienceTitleFormProps {\n  fetcher: any;\n  form: any;\n  action: string;\n  initialValues?: any;\n  gameId: number | undefined;\n  onCancel: () => void;\n  handleDeleteExperienceTitle?: () => void;\n}\n\nexport function ExperienceTitleForm(props: ExperienceTitleFormProps) {\n  const {\n    fetcher,\n    form,\n    initialValues,\n    onCancel,\n    action,\n    gameId,\n    handleDeleteExperienceTitle,\n  } = props;\n\n  const { t } = useTranslation();\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const { token } = useToken();\n  // const { user } = useContext(AuthContext);\n  const [messageApi, contextHolder] = notification.useNotification();\n  const [uploading, setUploading] = useState<boolean>(false);\n  const [modal, contextHolder2] = Modal.useModal();\n\n  const avatarStyle = {\n    position: \"absolute\",\n    left: \"1.5%\",\n    bottom: -30,\n    padding: 2,\n    border: `5px solid ${token.colorBgLayout}`,\n    borderRadius: \"50%\",\n    overflow: \"hidden\",\n  } as any;\n\n  const handleFileTooLarge = () => {\n    messageApi.open({\n      type: \"error\",\n      message: t(\"file upload failed due to too large image size\"),\n      duration: 5,\n      placement: \"bottomRight\",\n    });\n  };\n\n  const handleSubmit = useCallback(\n    (values: any) => {\n      const { isPrivate, ...rest } = values;\n\n      fetcher.submit(\n        {\n          data: JSON.stringify({\n            ...rest,\n            rankingGameId: gameId,\n            id: initialValues?.id,\n          }),\n        },\n        action === \"create\"\n          ? {\n              method: \"post\",\n              action: `/resources/create-experience-title`,\n            }\n          : {\n              method: \"put\",\n              action: `/resources/edit-experience-title`,\n            }\n      );\n      form.setFieldValue(\"icon\", null);\n      form.resetFields();\n      onCancel();\n    },\n    [fetcher, form, onCancel]\n  );\n\n  useEffect(() => {\n    if (initialValues) {\n      form.setFieldsValue(initialValues);\n    }\n  }, [initialValues, form]);\n\n  useEffect(() => {\n    if (fetcher.data && fetcher.data.field && fetcher.state) {\n      if (fetcher.data.field === \"icon\") {\n        form.setFieldValue(\"icon\", fetcher.data.key);\n      }\n\n      setUploading(false);\n    }\n  }, [form, fetcher.data, fetcher.state]);\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Form\n        form={form}\n        initialValues={initialValues}\n        onFinish={handleSubmit}\n        layout=\"vertical\"\n      >\n        <Title level={4} style={{ margin: 0 }}>\n          {action === \"create\"\n            ? t(\"add experience title\")\n            : t(\"edit experience title\")}\n        </Title>\n        <Divider />\n        <Flex gap={15} vertical>\n          <Form.Item\n            key=\"icon\"\n            name=\"icon\"\n            style={{ margin: \"0px\", marginBottom: \"25px\", padding: \"0px\" }}\n            rules={[\n              {\n                required: true,\n                message: (\n                  <div style={{ marginTop: \"17px\" }}>\n                    {t(\"please input game icon\")}\n                  </div>\n                ),\n              },\n            ]}\n          >\n            <Row style={{ marginBottom: 10 }}>\n              <Col flex=\"auto\">\n                <Space direction=\"vertical\" size={5}>\n                  <Text style={{ fontWeight: 600 }}>{t(\"game icon\")}</Text>\n                  {fetcher && fetcher.state && fetcher.state !== \"idle\" ? (\n                    <Avatar size={75}>\n                      <LoadingOutlined style={{ fontSize: 24 }} spin />\n                    </Avatar>\n                  ) : (\n                    <div style={{ marginTop: \"60px\", marginBottom: \"60px\" }}>\n                      <div style={avatarStyle} className=\"hover-show-parent\">\n                        <OverlayBg\n                          className=\"hover-show-child\"\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          <CameraOutlined\n                            style={{ fontSize: 30, color: \"#fff\" }}\n                          />\n                        </OverlayBg>\n                        <FileUploader\n                          fetcher={fetcher}\n                          fieldName={\"icon\"}\n                          // maxUpload={5}\n                          onUploading={setUploading}\n                          onErrorFileTooLarge={handleFileTooLarge}\n                        >\n                          <Avatar\n                            size={75}\n                            // src={`${cdnUrl}/profile-teams/profile-team-${1}.jpg`}\n                            src={`${cdnUrl}/${form.getFieldValue(\"icon\")}`}\n                          />\n                        </FileUploader>\n                      </div>\n                    </div>\n                  )}\n                </Space>\n              </Col>\n              <Col flex=\"none\">\n                <FileUploader\n                  fetcher={fetcher}\n                  fieldName={\"icon\"}\n                  // maxUpload={5}\n                  onUploading={setUploading}\n                  onErrorFileTooLarge={handleFileTooLarge}\n                >\n                  <Space size={5} style={{ cursor: \"pointer\" }}>\n                    <EditOutlined style={{ color: \"#8263ea\" }} />\n                    <Text>{t(\"change\")}</Text>\n                  </Space>\n                </FileUploader>\n              </Col>\n            </Row>\n          </Form.Item>\n\n          <Form.Item\n            key=\"title\"\n            name=\"title\"\n            rules={[\n              {\n                required: true,\n                message: t(\"please input experience title\"),\n              },\n            ]}\n            label={\n              <Space size={10}>\n                <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                  {t(\"experience title\")}\n                </Text>\n              </Space>\n            }\n          >\n            <Input />\n          </Form.Item>\n        </Flex>\n        <Space direction=\"vertical\" style={{ display: \"flex\" }}>\n          <Row gutter={10} style={{ marginTop: 30 }}>\n            <Col span={12}>\n              <TiltButton color=\"secondary\" onClick={onCancel}>\n                {t(\"cancel\")}\n              </TiltButton>\n            </Col>\n            <Col span={12}>\n              <TiltButton color=\"primary\" onClick={() => form.submit()}>\n                {action === \"create\"\n                  ? t(\"create experience\")\n                  : t(\"edit experience\")}\n              </TiltButton>\n            </Col>\n          </Row>\n          {initialValues && (\n            <TiltButton color=\"danger\" onClick={handleDeleteExperienceTitle}>\n              {t(\"delete experience title\")}\n            </TiltButton>\n          )}\n        </Space>\n      </Form>\n      {contextHolder}\n      {contextHolder2}\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "dayjs", "import_react", "import_react", "import_jsx_dev_runtime", "Text", "Title", "import_dayjs", "import_jsx_dev_runtime", "Text", "Title", "dayjs", "import_react", "import_jsx_dev_runtime", "Text", "Title", "import_jsx_dev_runtime", "Title", "Text", "modalProps", "_a", "_b", "Title", "index", "Text"]
}
