{
  "version": 3,
  "sources": ["../../../app/routes/_app.tournaments.$id.webboard.tsx"],
  "sourcesContent": ["import { json, type LoaderFunction } from \"@remix-run/node\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  useFetcher,\n  useLoaderData,\n  useLocation,\n  useNavigate,\n  useNavigation,\n  useRevalidator,\n  useSubmit,\n} from \"@remix-run/react\";\nimport { Element, scroller } from \"react-scroll\";\nimport { Card, notification, Skeleton } from \"antd\";\nimport { isEmpty, isNil, omitBy, toNumber } from \"lodash\";\nimport { dummyComments, dummyWebboard, Pagination } from \"~/components/common\";\nimport {\n  WebboardSingleCommentBox,\n  WebboardSingleComments,\n  WebboardSinglePost,\n} from \"~/components/pages/Webboard\";\nimport * as APIServer from \"~/api\";\nimport { AppContext, AuthContext } from \"~/contexts\";\nimport { resetFetcher } from \"~/utils/helper\";\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const { id } = params;\n  let webboard: any = null;\n  let comments: any = null;\n  const url = new URL(request.url) as any;\n  const searchParams = Object.fromEntries(url.searchParams);\n  let reactionOptions: any[] = [];\n  let tournament: any;\n\n  if (id) {\n    try {\n      const tournamentRes = await APIServer.clientFromSession().request(\n        APIServer.getTournament(toNumber(id))\n      );\n\n      if (tournamentRes.data) {\n        tournament = tournamentRes.data;\n      }\n\n      const webboardRes = await APIServer.clientFromSession().request(\n        APIServer.getTournamentWebboard(tournament.post.id)\n      );\n      if (webboardRes && webboardRes.data) {\n        webboard = webboardRes.data;\n        const reactionRes = await APIServer.clientFromSession().request(\n          APIServer.getReactions()\n        );\n        const commentRes = await APIServer.clientFromSession().request(\n          APIServer.getCommentsFromWebboardId(tournament.post.id, searchParams)\n        );\n        if (commentRes && commentRes.data) {\n          comments = commentRes.data;\n        }\n        if (reactionRes.data) {\n          reactionOptions = reactionRes.data;\n        }\n      }\n    } catch (e) {\n      webboard = dummyWebboard; // FIXME: remove this out\n      comments = dummyComments; // FIXME: remove this out\n    }\n  }\n\n  return json({ id, comments, reactionOptions, searchParams, webboard });\n};\n\nexport default function TournamentSingleWebboard() {\n  const { id, comments, reactionOptions, searchParams, webboard } =\n    useLoaderData();\n  const { t } = useTranslation();\n  const fetcher = useFetcher();\n  const location = useLocation();\n  const { user } = useContext(AuthContext);\n  const { scheme } = useContext(AppContext);\n  const navigation = useNavigation();\n  const submit = useSubmit();\n  const navigate = useNavigate();\n  const revalidator = useRevalidator();\n  const [api, contextHolder] = notification.useNotification();\n  const [quotedComment, setQuotedComment] = useState<any>(null);\n\n  const handleReplyComment = (comment: any) => {\n    setQuotedComment(comment);\n    scroller.scrollTo(\"comment-box\", {\n      duration: 1000,\n      delay: 100,\n      smooth: true,\n      offset: -80,\n    });\n  };\n\n  const handleChangePage = useCallback(\n    (page: number) => {\n      const newSearchParams = { ...searchParams } as any;\n      if (page === 1) {\n        delete newSearchParams[\"page\"];\n      } else {\n        newSearchParams[\"page\"] = `${page}`;\n      }\n      submit(\n        omitBy(newSearchParams, (v) => isNil(v) && isEmpty(v)),\n        { method: \"get\" }\n      );\n    },\n    [searchParams, submit]\n  );\n\n  useEffect(() => {\n    if (\n      fetcher &&\n      fetcher.data &&\n      fetcher.state === \"idle\" &&\n      revalidator.state === \"idle\"\n    ) {\n      if (fetcher.data.success && fetcher.data.success === \"create-comment\") {\n        revalidator.revalidate();\n        resetFetcher(fetcher);\n        setQuotedComment(null);\n        api.open({\n          message: t(\"successfully commented\"),\n          type: \"success\",\n          duration: 5,\n          placement: \"bottomRight\",\n        });\n      }\n    }\n  }, [fetcher, id, revalidator]);\n\n  useEffect(() => {\n    if (location.hash && location.hash.length > 0) {\n      let commentId: string = \"\";\n      commentId = location.hash.replace(\"#comment-\", \"comment-\");\n      if (commentId.length > 0) {\n        scroller.scrollTo(commentId, {\n          duration: 1000,\n          delay: 100,\n          smooth: true,\n          offset: -80,\n        });\n        setTimeout(() => {\n          navigate(location.pathname, { preventScrollReset: true });\n        }, 1200);\n      }\n    }\n  }, [location]);\n\n  return (\n    <div>\n      <WebboardSinglePost\n        data={webboard}\n        fetcher={fetcher}\n        reactionOptions={reactionOptions}\n      />\n      {navigation.state === \"loading\" &&\n      navigation.location.pathname === location.pathname ? (\n        <Card>\n          <Skeleton active />\n        </Card>\n      ) : comments.items.length > 0 ? (\n        <WebboardSingleComments\n          data={comments.items}\n          fetcher={fetcher}\n          reactionOptions={reactionOptions}\n          onReplyComment={handleReplyComment}\n        />\n      ) : (\n        <></>\n      )}\n      {user && (\n        <Element name=\"comment-box\">\n          <Card\n            bordered={false}\n            style={{\n              marginBottom: 20,\n              borderRadius: 10,\n              boxShadow:\n                scheme === \"dark\"\n                  ? \"0px 4px 15px -5px rgba(255,255,255,0.75)\"\n                  : \"0px 4px 15px -5px rgba(0,0,0,0.75)\",\n            }}\n          >\n            <WebboardSingleCommentBox\n              disabled={revalidator.state !== \"idle\"}\n              fetcher={fetcher}\n              postId={webboard.id}\n              refComment={quotedComment}\n            />\n          </Card>\n        </Element>\n      )}\n      {comments.totalPages > 1 && (\n        <Pagination\n          currentPage={comments.page}\n          totalPages={comments.totalPages}\n          onPageClicked={handleChangePage}\n        />\n      )}\n      {contextHolder}\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
