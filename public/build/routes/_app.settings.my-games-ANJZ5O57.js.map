{
  "version": 3,
  "sources": ["../../../app/routes/_app.settings.my-games.tsx", "../../../app/components/pages/User/MyGameEntry.tsx", "../../../app/components/pages/User/MyGameEntryControl.tsx", "../../../app/components/pages/User/UserGameForm.tsx", "../../../app/components/pages/User/GameUserSelect.tsx"],
  "sourcesContent": ["import { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFetcher, useLoaderData, useSubmit } from \"@remix-run/react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Divider,\n  Form,\n  Modal,\n  Row,\n  Space,\n  Typography,\n  notification,\n} from \"antd\";\nimport { PlusOutlined, VerticalAlignMiddleOutlined } from \"@ant-design/icons\";\nimport { TiltButton } from \"~/components/common\";\nimport {\n  type LoaderFunction,\n  json,\n  type ActionFunction,\n  redirect,\n} from \"@remix-run/node\";\n\nimport * as APIServer from \"~/api\";\nimport {\n  commitSession,\n  getSessionFromRequest,\n  mustAuthenticated,\n} from \"~/session.server\";\nimport { MyGameEntry } from \"~/components/pages/User/MyGameEntry\";\nimport { UserGameForm } from \"~/components/pages/User/UserGameForm\";\nimport { SortableList } from \"~/components/pages/Sorting/SortableList\";\nimport { AuthContext } from \"~/contexts\";\nimport { ArrowUpDown } from \"lucide-react\";\nconst { Title, Text } = Typography;\n\nlet defaultGame: any;\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await mustAuthenticated(request);\n  const session = await getSessionFromRequest(request);\n  const url = new URL(request.url) as any;\n  const searchParams = Object.fromEntries(url.searchParams);\n  let gamesInfoTitle = [];\n  let gamesInfo = [];\n  let firstGameId = null;\n  let games: any[] = [];\n  try {\n    const gamesInfoTitleRes = await APIServer.clientFromSession(\n      session\n    ).request(APIServer.getExperiencesTitle());\n    if (gamesInfoTitleRes.data) {\n      gamesInfoTitle = gamesInfoTitleRes.data;\n    }\n    firstGameId = gamesInfoTitle[0]?.rankingGameId\n      ? { rankingGameId: gamesInfoTitle[0]?.rankingGameId }\n      : { experienceTitleId: gamesInfoTitle[0]?.id };\n\n    const gamesInfoRes = await APIServer.clientFromSession(session).request(\n      APIServer.getUserGameInfo()\n    );\n    if (gamesInfoRes.data) {\n      gamesInfo = gamesInfoRes.data;\n    }\n\n    const gameRes = await APIServer.clientFromSession(session).request(\n      APIServer.getUserGameLists()\n    );\n    if (gameRes.data) {\n      games = gameRes.data;\n      defaultGame = games.find((game: any) => `${game.name}` === `VALORANT`);\n    }\n  } catch (e) {\n    console.log(\"user setting error\", e);\n  }\n\n  return json({\n    gamesInfoTitle,\n    gamesInfo,\n    firstGameId,\n    games,\n    defaultGame,\n  });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const session = await getSessionFromRequest(request);\n  const formdata = await request.formData();\n  const entries = Object.fromEntries(formdata) as any;\n  const data = entries.data ? JSON.parse(entries.data) : null;\n  const uuid = entries.uuid;\n\n  switch (entries.action) {\n    case \"create\":\n      try {\n        await APIServer.clientFromSession(session).request(\n          APIServer.createPersonalDetails(data)\n        );\n        session.flash(\"flashMessage\", {\n          type: \"success\",\n          message: `successfully created personal details`,\n        });\n      } catch (e: any) {\n        session.flash(\"flashMessage\", {\n          type: \"error\",\n          message:\n            e.errors && e.errors.length > 1\n              ? e.errors[0]\n              : e.response.data.message,\n        });\n      }\n      break;\n    case \"update\":\n      try {\n        await APIServer.clientFromSession(session).request(\n          APIServer.updatePersonalDetails(data)\n        );\n        session.flash(\"flashMessage\", {\n          type: \"success\",\n          message: `successfully updated personal details`,\n        });\n      } catch (e: any) {\n        session.flash(\"flashMessage\", {\n          type: \"error\",\n          message:\n            e.errors && e.errors.length > 1\n              ? e.errors[0]\n              : e.response.data.message,\n        });\n      }\n      break;\n    case \"save-to-profile-index\":\n      session.flash(\"flashMessage\", {\n        type: \"success\",\n        message: `successfully saved to profile index`,\n      });\n      return redirect(`/users/${uuid}`, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n  }\n\n  return json(null, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n};\n\n// Modal properties\nconst modalProps = {\n  closeIcon: false,\n  footer: null,\n  modalRender: (modal: any) => modal,\n};\n\n// Main component\nexport default function SettingsMyGames() {\n  const { t } = useTranslation();\n  const fetcher = useFetcher();\n  const [messageApi, contextHolder] = notification.useNotification();\n  const { gamesInfo, games, defaultGame } = useLoaderData();\n  const [gameInfoModal, setGameInfoModal] = useState(false);\n  const [gameInfoLists, setGameInfoLists] = useState<[]>(gamesInfo);\n  const [sortingModal, setSortingModal] = useState<boolean>(false);\n\n  const [screenSize, setScreenSize] = useState<string>(\"\"); // Initialize state variable to hold screen size\n\n  const [form] = Form.useForm();\n  const { user } = useContext(AuthContext);\n  const submit = useSubmit();\n\n  const handleSubmitToProfileIndex = () => {\n    submit(\n      {\n        uuid: user.uuid,\n        action: \"save-to-profile-index\",\n      },\n      { method: \"post\" }\n    );\n  };\n\n  const openExperienceModal = () => {\n    setGameInfoModal(true);\n  };\n\n  const handleToggleSortingMode = () => {\n    setSortingModal(!sortingModal);\n  };\n\n  const onChangeSortItems = (items: any) => {\n    setGameInfoLists(items);\n  };\n\n  const onCloseSortingModal = () => {\n    setSortingModal(false);\n  };\n\n  const handleSubmitSorting = () => {\n    setSortingModal(false);\n    const itemsId = {\n      userRankingGameIds: gameInfoLists.map(\n        (item: any, index: number) => item.id\n      ),\n    };\n    fetcher.submit(\n      {\n        data: JSON.stringify(itemsId),\n      },\n      {\n        method: \"post\",\n        action: `/resources/sorting-my-games`,\n      }\n    );\n  };\n\n  useEffect(() => {\n    setGameInfoLists(gamesInfo && gamesInfo.length ? gamesInfo : []);\n  }, [gamesInfo]);\n\n  useEffect(() => {\n    if (!fetcher.data || fetcher.state !== \"idle\") {\n      return;\n    }\n\n    if (fetcher.data.gamesInfo) {\n      setGameInfoLists(fetcher.data.gamesInfo);\n    }\n  }, [fetcher.data]);\n\n  useEffect(() => {\n    // Listen for changes in screen size and update state variable accordingly\n    const handleResize = () => {\n      if (window.innerWidth > 576) {\n        setScreenSize(\"greaterThanSM\");\n      } else {\n        setScreenSize(\"atSM\");\n      }\n    };\n\n    handleResize(); // Call once to set initial state\n\n    window.addEventListener(\"resize\", handleResize); // Add event listener for window resize\n\n    return () => {\n      // Cleanup: Remove event listener when component unmounts\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  // useEffect(() => {\n  //   setGameInfoLists([...gamesInfo]);\n  // }, [gamesInfo]);\n\n  // useEffect(() => {\n  //   if (fetcher.data && fetcher.data.success) {\n  //     if (\n  //       fetcher.data.success &&\n  //       fetcher.data.success !== \"create-experience-title\"\n  //     ) {\n  //       console.log(\"fetcher.data.success\", fetcher.data.success);\n  //       fetcher.load(`.?rankingGameId=2`);\n  //       messageApi.open({\n  //         type: \"success\",\n  //         message: t(`Successfully ${fetcher.data.action} experience`),\n  //         duration: 5,\n  //         placement: \"bottomRight\",\n  //       });\n  //     }\n  //   }\n  // }, [fetcher.data]);\n\n  return (\n    <div style={{ maxWidth: 600 }}>\n      <div>\n        <Space\n          size={10}\n          direction=\"horizontal\"\n          style={{\n            marginBottom: 20,\n            display: \"flex\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <Title level={2}>{t(\"my games\")}</Title>\n          {screenSize === \"greaterThanSM\" && (\n            <Row justify={\"end\"} style={{ margin: 10 }}>\n              {gameInfoLists.length > 0 && (\n                <Button\n                  type=\"text\"\n                  style={{\n                    marginTop: 2,\n                    marginRight: 10,\n                    fontWeight: 600,\n                    textAlign: \"center\",\n                  }}\n                  onClick={handleToggleSortingMode}\n                >\n                  <ArrowUpDown\n                    style={{\n                      color: \"#7C6FF6\",\n                      fontSize: \"1.2em\",\n                      marginRight: \"5px\",\n                    }}\n                  />\n                  {t(\"sort order\")}\n                </Button>\n              )}\n\n              <TiltButton color=\"primary\" onClick={() => openExperienceModal()}>\n                <Space>\n                  <PlusOutlined style={{ color: \"black\" }} />\n                  {t(\"add game\")}\n                </Space>\n              </TiltButton>\n            </Row>\n          )}\n        </Space>\n        {screenSize === \"atSM\" && (\n          <Row justify={\"end\"} style={{ margin: 10, marginTop: 0 }}>\n            {gameInfoLists.length > 0 && (\n              <Button\n                type=\"text\"\n                style={{\n                  marginTop: 2,\n                  marginRight: 10,\n                  fontWeight: 600,\n                  textAlign: \"center\",\n                }}\n              >\n                <ArrowUpDown\n                  style={{\n                    color: \"#7C6FF6\",\n                    fontSize: \"1.2em\",\n                    marginRight: \"5px\",\n                  }}\n                />\n                {t(\"sort order\")}\n              </Button>\n            )}\n\n            <TiltButton color=\"primary\" onClick={() => openExperienceModal()}>\n              <Space>\n                <PlusOutlined style={{ color: \"black\" }} />\n                {t(\"add game\")}\n              </Space>\n            </TiltButton>\n          </Row>\n        )}\n\n        {gameInfoLists.map((experience: any, index: number) => (\n          <div key={index}>\n            <MyGameEntry\n              data={experience}\n              fetcher={fetcher}\n              game={defaultGame}\n              games={games}\n            />\n          </div>\n        ))}\n        <TiltButton\n          color=\"primary\"\n          onClick={handleSubmitToProfileIndex}\n          style={{ marginTop: 20 }}\n        >\n          {t(\"save\")}\n        </TiltButton>\n      </div>\n      {/* <Modal\n        {...modalProps}\n        onCancel={() => setGameInfoModal(false)}\n        open={gameInfoModal}\n      >\n        <ExperienceForm\n          fetcher={fetcher}\n          form={form}\n          gameId={gameId}\n          titleType={titleType}\n          onCancel={() => setGameInfoModal(false)}\n          action=\"create\"\n        />\n      </Modal> */}\n      <Modal\n        {...modalProps}\n        onCancel={() => setGameInfoModal(false)}\n        open={gameInfoModal}\n      >\n        <UserGameForm\n          fetcher={fetcher}\n          form={form}\n          game={defaultGame}\n          games={games}\n          action=\"create\"\n          onCancel={() => setGameInfoModal(false)}\n        />\n      </Modal>\n      <Modal\n        {...modalProps}\n        onCancel={() => setSortingModal(false)}\n        open={sortingModal}\n      >\n        <div\n          style={{\n            marginTop: \"15px\",\n          }}\n        >\n          <Text style={{ fontSize: \"24px\", fontWeight: \"600\" }}>\n            {t(\"sorting order\")}\n          </Text>\n          <Divider style={{ margin: 7 }} />\n          <SortableList\n            items={gameInfoLists}\n            onChange={onChangeSortItems}\n            renderItem={(item: any, items: any[]) => (\n              <SortableList.Item id={item.id}>\n                <div style={{ position: \"relative\", margin: \"15px\" }}>\n                  <div style={{ position: \"absolute\", zIndex: 1000 }}>\n                    {<SortableList.DragHandle />}\n                  </div>\n                  <TiltButton color=\"gray\">{item.rankingGame.name}</TiltButton>\n                </div>\n              </SortableList.Item>\n            )}\n          />\n          <Row gutter={10} style={{ marginTop: 30 }}>\n            <Col span={12}>\n              <TiltButton color=\"secondary\" onClick={onCloseSortingModal}>\n                {t(\"cancel\")}\n              </TiltButton>\n            </Col>\n            <Col span={12}>\n              <TiltButton color=\"primary\" onClick={handleSubmitSorting}>\n                {t(\"save\")}\n              </TiltButton>\n            </Col>\n          </Row>\n        </div>\n      </Modal>\n      {contextHolder}\n    </div>\n  );\n}\n", "import { useContext, useEffect, useState } from \"react\";\nimport { useMatches } from \"@remix-run/react\";\nimport {\n  Card,\n  Col,\n  Flex,\n  Input,\n  Row,\n  Image,\n  Typography,\n  Space,\n  Tooltip,\n} from \"antd\";\nimport { AppContext, AuthContext } from \"~/contexts\";\nimport { MyGameEntryControl } from \"./MyGameEntryControl\";\nimport dayjs from \"dayjs\";\nimport { useTranslation } from \"react-i18next\";\nimport { LuUserCircle } from \"react-icons/lu\";\nconst { Text, Title } = Typography;\n\ninterface MyGameEntryProps {\n  data: any;\n  fetcher?: any;\n  game?: any;\n  games: any[];\n  isMyWebboard?: boolean;\n}\n\nexport function MyGameEntry(props: MyGameEntryProps) {\n  const { t } = useTranslation();\n  const { data, fetcher, game, games } = props;\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const { scheme } = useContext(AppContext);\n  const { user } = useContext(AuthContext);\n  const isOwner = true;\n  const isForumAdmin = user && user.roles.includes(\"forum_admin\");\n  const [screenSize, setScreenSize] = useState<string>(\"\"); // Initialize state variable to hold screen size\n\n  const targetRank = data.rank;\n  const foundRank = data.rankingGame.rank.find(\n    (rank: any) => rank.name === targetRank\n  );\n\n  const photosStyle = {\n    position: \"relative\",\n    height: 200,\n    width: \"131.64px\",\n    borderRadius: 5,\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    // cursor: \"pointer\",\n  } as any;\n\n  useEffect(() => {\n    // Listen for changes in screen size and update state variable accordingly\n    const handleResize = () => {\n      if (window.innerWidth > 576) {\n        setScreenSize(\"greaterThanSM\");\n      } else {\n        setScreenSize(\"atSM\");\n      }\n    };\n\n    handleResize(); // Call once to set initial state\n\n    window.addEventListener(\"resize\", handleResize); // Add event listener for window resize\n\n    return () => {\n      // Cleanup: Remove event listener when component unmounts\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  const cardStyle = {\n    margin: \"10px 0\",\n    borderRadius: \"6px\",\n    border: \"1px solid #E5E4E4\",\n    overflow: \"auto\",\n  };\n\n  const triangleClipPath = \"polygon(0 0, 100% 0, 100% 80%, 50% 100%, 0 80%)\";\n  const triangleClipPathTop =\n    \"polygon(0 0, 50% 25%, 100% 0, 100% 100%, 0 100%)\";\n\n  const gameCard = (\n    <div\n      style={{\n        filter: \"url('#goo')\",\n        overflow: \"hidden\",\n      }}\n    >\n      <Card\n        bordered={false}\n        style={{\n          ...photosStyle,\n          clipPath: triangleClipPath,\n          backgroundImage: `url(\"${cdnUrl}/${data.rankingGame.image}\")`,\n          textAlign: \"center\",\n          justifyContent: \"center\",\n          filter: \"url('#goo')\",\n        }}\n        bodyStyle={{ padding: 0 }}\n      >\n        <div style={{ position: \"absolute\", width: \"100%\", bottom: 0 }}>\n          <div className=\"triangle\">\n            <div\n              className=\"triangle-box\"\n              style={{\n                backgroundColor: foundRank?.backgroundColor\n                  ? foundRank?.backgroundColor\n                  : \"rgba(222,151,35)\",\n              }}\n            />\n          </div>\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            top: 95,\n            // bottom: \"50px\",\n            width: \"100%\",\n            left: 0,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            zIndex: 1,\n          }}\n        >\n          <Image\n            style={{\n              marginBottom: 5,\n              zIndex: 2,\n              filter: \"drop-shadow(0px 4px 8px rgba(255, 255, 255, 0.6))\",\n            }}\n            width={50}\n            preview={false}\n            src={`${cdnUrl}/${foundRank?.icon}`}\n          />\n        </div>\n        <svg\n          style={{ position: \"absolute\", visibility: \"hidden\" }}\n          width=\"0\"\n          height=\"0\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          version=\"1.1\"\n        >\n          <defs>\n            <filter id=\"goo\">\n              <feGaussianBlur\n                in=\"SourceGraphic\"\n                stdDeviation=\"4\"\n                result=\"blur\"\n              />\n              <feColorMatrix\n                in=\"blur\"\n                mode=\"matrix\"\n                values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9\"\n                result=\"goo\"\n              />\n              <feComposite in=\"SourceGraphic\" in2=\"goo\" operator=\"atop\" />\n            </filter>\n          </defs>\n        </svg>\n      </Card>\n    </div>\n  );\n\n  return (\n    <>\n      <Card style={cardStyle}>\n        <Row>\n          <Col span={screenSize === \"greaterThanSM\" ? 6 : 24}>\n            {screenSize === \"greaterThanSM\" ? (\n              gameCard\n            ) : (\n              <Flex\n                justify=\"center\" // This centers horizontally\n                align=\"center\" // This centers vertically\n              >\n                {gameCard}\n              </Flex>\n            )}\n          </Col>\n          <Col span={screenSize === \"greaterThanSM\" ? 18 : 24}>\n            <div\n              style={{\n                marginLeft: \"15px\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Flex justify=\"space-between\" align=\"flex-start\" wrap=\"wrap\">\n                <Space\n                  direction=\"vertical\"\n                  size={1}\n                  style={{ margin: 0, padding: 0 }}\n                >\n                  <Title level={5}>{t(\"username in game\")}</Title>\n                </Space>\n                <MyGameEntryControl\n                  fetcher={fetcher}\n                  id={data.id}\n                  isOwner={isOwner}\n                  isForumAdmin={isForumAdmin}\n                  initialValues={data}\n                  game={game}\n                  games={games}\n                  postType=\"experience\"\n                />\n              </Flex>\n              <Input\n                disabled\n                value={data.ign}\n                style={{ marginBottom: \"15px\" }}\n              />\n              <Title level={5}>{t(\"rank in game\")}</Title>\n              <Input disabled value={t(`${data.rank}`)} />\n            </div>\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n}\n", "import { useTranslation } from \"react-i18next\";\nimport { Input, Modal, Space, Typography, Select, Form } from \"antd\";\nimport {\n  AlertOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  ExclamationCircleFilled,\n} from \"@ant-design/icons\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { TiltButton } from \"~/components/common\";\nimport { resetFetcher } from \"~/utils/helper\";\nimport { ExperienceForm } from \"./ExperiencesForm\";\nimport { UserGameForm } from \"./UserGameForm\";\n\nconst { Text, Title } = Typography;\n\ninterface MyGameEntryControlProps {\n  fetcher?: any;\n  id: string;\n  game?: any;\n  games: any[];\n  ignoreShare?: boolean;\n  isOwner?: boolean;\n  isForumAdmin?: boolean;\n  onEditClicked?: () => void;\n  postType?: string;\n  initialValues?: any;\n}\n\nconst modalProps = {\n  closeIcon: false,\n  footer: null,\n  modalRender: (modal: any) => modal,\n} as any;\n\nexport function MyGameEntryControl(props: MyGameEntryControlProps) {\n  const {\n    fetcher,\n    id,\n    isOwner,\n    isForumAdmin,\n    postType,\n    initialValues,\n    game,\n    games,\n  } = props;\n  const { t } = useTranslation();\n  const [reason, setReason] = useState<string>(\"\");\n  const [modal, contextHolder] = Modal.useModal();\n  const [reportModal, setReportModal] = useState<boolean>(false);\n  const [gameInfoModal, setGameInfoModal] = useState(false);\n  const [form] = Form.useForm();\n\n  const { Option } = Select;\n\n  const handleOpenCreateExperienceModal = () => {\n    setGameInfoModal(true);\n  };\n\n  const handleDeleteGame = useCallback(() => {\n    modal.confirm({\n      title: `${t(`are you sure you want to delete this rank?`)}`,\n      icon: <ExclamationCircleFilled />,\n      okText: t(\"confirm\"),\n      okType: \"danger\",\n      cancelText: t(\"cancel\"),\n      maskClosable: true,\n      onOk() {\n        fetcher.submit(\n          { id: initialValues.id },\n          {\n            method: \"post\",\n            action: `/resources/delete-user-in-game`,\n          }\n        );\n      },\n    });\n  }, [fetcher]);\n\n  const openReportModal = () => {\n    setReportModal(true);\n  };\n\n  const closeReportModal = () => {\n    setReportModal(false);\n  };\n\n  const onReasonChanged = (e: any) => {\n    setReason(e.target.value);\n  };\n\n  const [selectedReason, setSelectedReason] = useState<string>(\"\");\n\n  const reasonOptions = [\n    { label: \" Inappropriate Content\", value: \"Inappropriate Content\" },\n    { label: \"Violence\", value: \"Violence\" },\n    { label: \"Harassment\", value: \"Harassment\" },\n    { label: \" False Information\", value: \"False Information\" },\n    { label: \"Spam\", value: \"Spam\" },\n    { label: \"Unauthorized Sales\", value: \"Unauthorized Sales\" },\n    { label: \"Others\", value: \"Others\" },\n  ];\n\n  const onReasonSelected = (value: string) => {\n    if (value !== \"Others\") {\n      setReason(value);\n    } else {\n      setReason(\"\");\n    }\n    setSelectedReason(value);\n  };\n\n  const reasonSelect = (\n    <Select\n      style={{ width: \"100%\" }}\n      onChange={onReasonSelected}\n      value={selectedReason ? selectedReason : undefined}\n      disabled={fetcher.state !== \"idle\"}\n      placeholder={t(\"select reason\")}\n      listHeight={300}\n    >\n      {reasonOptions.map((option) => (\n        <Option key={option.value} value={option.value}>\n          {option.label}\n        </Option>\n      ))}\n    </Select>\n  );\n\n  const submitReport = useCallback(() => {\n    if (reason.length > 0) {\n      fetcher.submit(\n        { reason, id, type: postType },\n        {\n          method: \"post\",\n          action: `/resources/report-post`,\n        }\n      );\n    }\n  }, [fetcher, postType, reason]);\n\n  const deletePost = useCallback(() => {\n    modal.confirm({\n      title: `${t(`are you sure to delete this post`)}?`,\n      icon: <ExclamationCircleFilled />,\n      okText: t(\"confirm\"),\n      okType: \"danger\",\n      cancelText: t(\"cancel\"),\n      maskClosable: true,\n      onOk() {\n        fetcher.submit(\n          { id, type: postType },\n          {\n            method: \"delete\",\n            action: `/resources/delete-post`,\n          }\n        );\n      },\n    });\n  }, [fetcher, id, postType]);\n\n  const menus = [\n    {\n      label: (\n        <Space size={10} style={{ color: \"#f5222d\" }}>\n          <AlertOutlined />\n          {t(\"report\")}\n        </Space>\n      ),\n      onClick: openReportModal,\n    },\n  ] as any[];\n  if (isOwner || isForumAdmin) {\n    menus.push({\n      label: (\n        <Space size={10}>\n          <DeleteOutlined />\n          {t(\"delete\")}\n        </Space>\n      ),\n      onClick: deletePost,\n    });\n  }\n  useEffect(() => {\n    setReason(\"\");\n  }, [id]);\n\n  useEffect(() => {\n    if (\n      fetcher &&\n      fetcher.data &&\n      fetcher.data.success === `report-${postType ? postType : \"webboard\"}` &&\n      fetcher.state === \"idle\"\n    ) {\n      setReason(\"\");\n      setReportModal(false);\n      resetFetcher(fetcher);\n    }\n  }, [fetcher, postType]);\n\n  return (\n    <>\n      <Space size={15}>\n        {/* {!ignoreShare && (\n          <ShareDropDown copiedMessage=\"album url copied\" postUrl={albumUrl} />\n        )} */}\n        {isOwner && (\n          <>\n            <Text\n              style={{ fontSize: 18, cursor: \"pointer\" }}\n              onClick={handleOpenCreateExperienceModal}\n            >\n              <EditOutlined />\n            </Text>\n            <Text\n              style={{ fontSize: 18, cursor: \"pointer\", color: \"#f5222d\" }}\n              onClick={handleDeleteGame}\n            >\n              <DeleteOutlined />\n            </Text>\n          </>\n        )}\n      </Space>\n      <Modal\n        {...modalProps}\n        onCancel={() => setGameInfoModal(false)}\n        open={gameInfoModal}\n      >\n        <UserGameForm\n          fetcher={fetcher}\n          form={form}\n          game={game}\n          games={games}\n          action=\"update\"\n          onCancel={() => setGameInfoModal(false)}\n          initialValues={initialValues}\n        />\n      </Modal>\n      {contextHolder}\n    </>\n  );\n}\n", "import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Avatar,\n  Card,\n  Col,\n  Divider,\n  Flex,\n  Form,\n  Image,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Space,\n  theme,\n  Typography,\n} from \"antd\";\nimport { AuthContext } from \"~/contexts\";\nimport { GameCard, TiltButton } from \"~/components/common\";\nimport { useMatches } from \"@remix-run/react\";\nimport { GameUserSelect } from \"./GameUserSelect\";\nimport { flattenObject } from \"~/utils/helper\";\nconst { Text, Title } = Typography;\nconst { useToken } = theme;\n\ninterface UserGameFormProps {\n  fetcher: any;\n  form: any;\n  action: string;\n  game?: any;\n  games: any[];\n  initialValues?: any;\n  onCancel: () => void;\n}\n\nexport function UserGameForm(props: UserGameFormProps) {\n  const { fetcher, form, game, games, action, initialValues, onCancel } = props;\n  const { t } = useTranslation();\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const { token } = useToken();\n  const { user } = useContext(AuthContext);\n  let defaultValues: any = initialValues ? initialValues : undefined;\n  let defaultMode: any = null;\n  let ign = \"\";\n  const gameId = game.id;\n  const userGame =\n    user && user.userGames && user.userGames.length > 0\n      ? user.userGames.find((userGame: any) => userGame.gameId === gameId)\n      : null;\n  if (userGame) {\n    ign = userGame.ign;\n  }\n\n  if (game && game.modes) {\n    defaultMode = game.modes.find((m: any) => m.isDefaultMode);\n    if (defaultMode) {\n      defaultValues = {\n        mode: defaultMode.name,\n        slots: defaultMode.maxPlayer - 1,\n        username: ign,\n      };\n    }\n  }\n  const [gameModal, setGameModal] = useState<boolean>(false);\n  const [selectedGameId, setSelectedGameId] = useState<any>(\n    initialValues && initialValues.rankingGameId\n      ? initialValues.rankingGameId\n      : game.id\n      ? game.id\n      : null\n  );\n\n  const [selectedGame, setSelectedGame] = useState<any>(\n    initialValues && initialValues.rankingGameId\n      ? games.find((g: any) => g.id == initialValues.rankingGameId)\n      : game\n      ? game\n      : null\n  );\n\n  const modalProps = {\n    closeIcon: false,\n    footer: null,\n    modalRender: (modal: any) => modal,\n  } as any;\n\n  const openGameModal = () => {\n    setGameModal(true);\n  };\n\n  const closeGameModal = () => {\n    setGameModal(false);\n  };\n\n  const handleGameChanged = (gameId: any) => {\n    const newSelectedGame = games.find((g: any) => g.id == gameId);\n\n    form.resetFields();\n    setGameModal(false);\n    setSelectedGameId(gameId);\n    setSelectedGame(newSelectedGame);\n  };\n\n  const handleSubmit = useCallback(\n    (values: any) => {\n      if (selectedGameId) {\n        const newValues = {\n          ...values,\n          rankingGameId: selectedGameId,\n          id: initialValues ? initialValues.id : null,\n        };\n\n        fetcher.submit(\n          {\n            data: JSON.stringify(newValues),\n          },\n          action === \"create\"\n            ? {\n                method: \"post\",\n                action: `/resources/create-user-in-game`,\n              }\n            : {\n                method: \"put\",\n                action: `/resources/edit-user-in-game`,\n              }\n        );\n        form.resetFields();\n      }\n\n      onCancel();\n    },\n    [selectedGameId]\n  );\n\n  useEffect(() => {\n    if (initialValues && fetcher.data && fetcher.data.success) {\n      if (fetcher.data.success) {\n        form.setFieldsValue(flattenObject(initialValues));\n      }\n    }\n  }, [initialValues, form, fetcher.data]);\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Form\n        form={form}\n        initialValues={defaultValues}\n        onFinish={handleSubmit}\n        layout=\"vertical\"\n      >\n        <Title level={4} style={{ margin: 0 }}>\n          {t(`${action === \"create\" ? \"add game\" : \"edit game\"}`)}\n        </Title>\n        <Divider />\n        <Flex gap={15} vertical>\n          <Row gutter={[15, 15]}>\n            <Col flex=\"none\">\n              <Space>\n                {selectedGame ? (\n                  <GameCard\n                    avatarStyle={{\n                      position: \"relative\",\n                      width: 160,\n                      overflow: \"hidden\",\n                      cursor: action === \"update\" ? \"default\" : \"pointer\",\n                      borderRadius: 10,\n                      backgroundSize: \"cover\",\n                      backgroundPosition: \"center\",\n                      backgroundImage:\n                        selectedGame &&\n                        selectedGame.image &&\n                        selectedGame.image !== \"-\"\n                          ? `url(\"${cdnUrl}/${selectedGame.image}\")`\n                          : `url(\"/image/placeholder.png\")`,\n                    }}\n                    onClick={openGameModal}\n                    action={action}\n                  />\n                ) : (\n                  <Card\n                    style={{\n                      backgroundColor: token.colorBgElevated,\n                      textAlign: \"center\",\n                    }}\n                    bodyStyle={{ padding: \"30px 10px\", cursor: \"pointer\" }}\n                    onClick={openGameModal}\n                  >\n                    <Space direction=\"vertical\" size={5} align=\"center\">\n                      <Image\n                        preview={false}\n                        src=\"/image/game-icon.svg\"\n                        width={30}\n                        height={30}\n                      />\n                      <Text>{t(\"select game\")}</Text>\n                    </Space>\n                  </Card>\n                )}\n              </Space>\n            </Col>\n            {selectedGame && (\n              <Col flex=\"auto\">\n                <Form.Item\n                  key=\"ign\"\n                  name=\"ign\"\n                  // rules={[\n                  //   {\n                  //     required: true,\n                  //     message: t('please input game username'),\n                  //   },\n                  // ]}\n                  label={\n                    <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                      {/* {`${selectedGame.name} ${t(\"username\")}`} */}\n                      {`${t(\"in game username\")}`}\n                    </Text>\n                  }\n                >\n                  <Input />\n                </Form.Item>\n                <Form.Item\n                  key=\"rank\"\n                  name=\"rank\"\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\"please input game rank\"),\n                    },\n                  ]}\n                  label={\n                    <Space size={10}>\n                      <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                        {t(\"rank\")}\n                      </Text>\n                    </Space>\n                  }\n                >\n                  <Select\n                    style={{ width: \"100%\" }}\n                    placeholder={t(\"select rank\")}\n                    options={\n                      selectedGame.rank\n                        ? selectedGame.rank.map((rank: any) => ({\n                            label: (\n                              <Space size={5}>\n                                {rank.icon ? (\n                                  <Avatar\n                                    src={`${cdnUrl}/${rank.icon}`}\n                                    size={20}\n                                    shape=\"square\"\n                                  />\n                                ) : (\n                                  <></>\n                                )}\n                                <Text style={{ color: \"inherit\" }}>\n                                  {rank.name}\n                                </Text>\n                              </Space>\n                            ),\n                            value: rank.name,\n                          }))\n                        : []\n                    }\n                  />\n                </Form.Item>\n              </Col>\n            )}\n          </Row>\n        </Flex>\n        <Row gutter={10} style={{ marginTop: 30 }}>\n          <Col span={12}>\n            <TiltButton color=\"secondary\" onClick={onCancel}>\n              {t(\"cancel\")}\n            </TiltButton>\n          </Col>\n          <Col span={12}>\n            <TiltButton color=\"primary\" onClick={() => form.submit()}>\n              {t(`${action === \"create\" ? \"add game\" : \"edit\"}`)}\n            </TiltButton>\n          </Col>\n        </Row>\n      </Form>\n      {!initialValues ? (\n        <Modal\n          {...modalProps}\n          width={600}\n          onCancel={closeGameModal}\n          open={gameModal}\n        >\n          <GameUserSelect\n            currentGameId={selectedGameId ? selectedGameId : null}\n            games={games}\n            onGameSelect={handleGameChanged}\n          />\n        </Modal>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n", "import { useMatches } from \"@remix-run/react\";\nimport { Col, Row, Typography } from \"antd\";\nimport { useTranslation } from \"react-i18next\";\nconst { Text, Title } = Typography;\n\ninterface GameUserSelectProps {\n  currentGameId?: number | null;\n  games: any[];\n  onGameSelect: (gameId: number) => void;\n}\n\nexport function GameUserSelect(props: GameUserSelectProps) {\n  const { currentGameId, games, onGameSelect } = props;\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const { t } = useTranslation();\n\n  return (\n    <div style={{ padding: 10 }}>\n      <Title\n        level={4}\n        style={{ marginTop: 0, marginBottom: 40, textAlign: \"center\" }}\n      >\n        {t(\"select game\")}\n      </Title>\n      <Row gutter={[20, 20]}>\n        {games.map((game: any) => (\n          <Col\n            key={game.id}\n            span={8}\n            style={{\n              textAlign: \"center\",\n              cursor: \"pointer\",\n            }} //FIXME: must check with somethingelse which is note max players\n            onClick={() => onGameSelect(game.id)}\n          >\n            <div\n              style={{\n                position: \"relative\",\n                paddingBottom: \"133%\",\n                marginBottom: 10,\n                borderRadius: 20,\n                backgroundSize: \"cover\",\n                backgroundPosition: \"center\",\n                backgroundImage:\n                  game && game.image && game.image !== \"-\"\n                    ? `url(\"${cdnUrl}/${game.image}\")`\n                    : `url(\"/image/placeholder.png\")`,\n                transform:\n                  currentGameId && currentGameId == game.id\n                    ? \"scale(1.05)\"\n                    : undefined,\n                zIndex:\n                  currentGameId && currentGameId == game.id ? 1 : undefined,\n                boxShadow:\n                  currentGameId && currentGameId == game.id\n                    ? \"0px 0px 24px 0px rgba(71, 0, 252, 0.50)\"\n                    : undefined,\n              }}\n            />\n            <Text>{game.name}</Text>\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,gBAAgD;AAiBhD,kBAKO;AAGP,qBAIO;;;AC7BP,IAAAC,gBAAgD;;;ACQhD,IAAAC,gBAAiD;;;ACRjD,IAAAC,gBAA6D;;;ACmBvD;AAhBN,IAAM,EAAE,MAAM,MAAM,IAAI;AAQjB,SAAS,eAAe,OAA4B;AACzD,QAAM,EAAE,eAAe,OAAO,aAAa,IAAI;AAC/C,QAAM,UAAU,WAAW;AAC3B,QAAM,EAAE,OAAO,IAAI,QAAQ,CAAC,EAAE;AAC9B,QAAM,EAAE,EAAE,IAAI,eAAe;AAE7B,SACE,mDAAC,SAAI,OAAO,EAAE,SAAS,GAAG,GACxB;AAAA;AAAA,MAAC;AAAA;AAAA,QACC,OAAO;AAAA,QACP,OAAO,EAAE,WAAW,GAAG,cAAc,IAAI,WAAW,SAAS;AAAA,QAE5D,YAAE,aAAa;AAAA;AAAA,MAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA;AAAA,IACA,mDAAC,eAAI,QAAQ,CAAC,IAAI,EAAE,GACjB,gBAAM,IAAI,CAAC,SACV;AAAA,MAAC;AAAA;AAAA,QAEC,MAAM;AAAA,QACN,OAAO;AAAA,UACL,WAAW;AAAA,UACX,QAAQ;AAAA,QACV;AAAA,QACA,SAAS,MAAM,aAAa,KAAK,EAAE;AAAA,QAEnC;AAAA;AAAA,YAAC;AAAA;AAAA,cACC,OAAO;AAAA,gBACL,UAAU;AAAA,gBACV,eAAe;AAAA,gBACf,cAAc;AAAA,gBACd,cAAc;AAAA,gBACd,gBAAgB;AAAA,gBAChB,oBAAoB;AAAA,gBACpB,iBACE,QAAQ,KAAK,SAAS,KAAK,UAAU,MACjC,QAAQ,UAAU,KAAK,YACvB;AAAA,gBACN,WACE,iBAAiB,iBAAiB,KAAK,KACnC,gBACA;AAAA,gBACN,QACE,iBAAiB,iBAAiB,KAAK,KAAK,IAAI;AAAA,gBAClD,WACE,iBAAiB,iBAAiB,KAAK,KACnC,4CACA;AAAA,cACR;AAAA;AAAA,YAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAuBA;AAAA,UACA,mDAAC,QAAM,eAAK,QAAZ;AAAA;AAAA;AAAA;AAAA,iBAAiB;AAAA;AAAA;AAAA,MAhCZ,KAAK;AAAA,MADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkCA,CACD,KArCH;AAAA;AAAA;AAAA;AAAA,WAsCA;AAAA,OA7CF;AAAA;AAAA;AAAA;AAAA,SA8CA;AAEJ;;;ADsFQ,IAAAC,0BAAA;AAjIR,IAAM,EAAE,MAAAC,OAAM,OAAAC,OAAM,IAAI;AACxB,IAAM,EAAE,SAAS,IAAI;AAYd,SAAS,aAAa,OAA0B;AACrD,QAAM,EAAE,SAAS,MAAM,MAAM,OAAO,QAAQ,eAAe,SAAS,IAAI;AACxE,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,UAAU,WAAW;AAC3B,QAAM,EAAE,OAAO,IAAI,QAAQ,CAAC,EAAE;AAC9B,QAAM,EAAE,MAAM,IAAI,SAAS;AAC3B,QAAM,EAAE,KAAK,QAAI,0BAAW,WAAW;AACvC,MAAI,gBAAqB,gBAAgB,gBAAgB;AACzD,MAAI,cAAmB;AACvB,MAAI,MAAM;AACV,QAAM,SAAS,KAAK;AACpB,QAAM,WACJ,QAAQ,KAAK,aAAa,KAAK,UAAU,SAAS,IAC9C,KAAK,UAAU,KAAK,CAACC,cAAkBA,UAAS,WAAW,MAAM,IACjE;AACN,MAAI,UAAU;AACZ,UAAM,SAAS;AAAA,EACjB;AAEA,MAAI,QAAQ,KAAK,OAAO;AACtB,kBAAc,KAAK,MAAM,KAAK,CAAC,MAAW,EAAE,aAAa;AACzD,QAAI,aAAa;AACf,sBAAgB;AAAA,QACd,MAAM,YAAY;AAAA,QAClB,OAAO,YAAY,YAAY;AAAA,QAC/B,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACA,QAAM,CAAC,WAAW,YAAY,QAAI,wBAAkB,KAAK;AACzD,QAAM,CAAC,gBAAgB,iBAAiB,QAAI;AAAA,IAC1C,iBAAiB,cAAc,gBAC3B,cAAc,gBACd,KAAK,KACL,KAAK,KACL;AAAA,EACN;AAEA,QAAM,CAAC,cAAc,eAAe,QAAI;AAAA,IACtC,iBAAiB,cAAc,gBAC3B,MAAM,KAAK,CAAC,MAAW,EAAE,MAAM,cAAc,aAAa,IAC1D,OACA,OACA;AAAA,EACN;AAEA,QAAMC,cAAa;AAAA,IACjB,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,aAAa,CAAC,UAAe;AAAA,EAC/B;AAEA,QAAM,gBAAgB,MAAM;AAC1B,iBAAa,IAAI;AAAA,EACnB;AAEA,QAAM,iBAAiB,MAAM;AAC3B,iBAAa,KAAK;AAAA,EACpB;AAEA,QAAM,oBAAoB,CAACC,YAAgB;AACzC,UAAM,kBAAkB,MAAM,KAAK,CAAC,MAAW,EAAE,MAAMA,OAAM;AAE7D,SAAK,YAAY;AACjB,iBAAa,KAAK;AAClB,sBAAkBA,OAAM;AACxB,oBAAgB,eAAe;AAAA,EACjC;AAEA,QAAM,mBAAe;AAAA,IACnB,CAAC,WAAgB;AACf,UAAI,gBAAgB;AAClB,cAAM,YAAY;AAAA,UAChB,GAAG;AAAA,UACH,eAAe;AAAA,UACf,IAAI,gBAAgB,cAAc,KAAK;AAAA,QACzC;AAEA,gBAAQ;AAAA,UACN;AAAA,YACE,MAAM,KAAK,UAAU,SAAS;AAAA,UAChC;AAAA,UACA,WAAW,WACP;AAAA,YACE,QAAQ;AAAA,YACR,QAAQ;AAAA,UACV,IACA;AAAA,YACE,QAAQ;AAAA,YACR,QAAQ;AAAA,UACV;AAAA,QACN;AACA,aAAK,YAAY;AAAA,MACnB;AAEA,eAAS;AAAA,IACX;AAAA,IACA,CAAC,cAAc;AAAA,EACjB;AAEA,+BAAU,MAAM;AACd,QAAI,iBAAiB,QAAQ,QAAQ,QAAQ,KAAK,SAAS;AACzD,UAAI,QAAQ,KAAK,SAAS;AACxB,aAAK,eAAe,cAAc,aAAa,CAAC;AAAA,MAClD;AAAA,IACF;AAAA,EACF,GAAG,CAAC,eAAe,MAAM,QAAQ,IAAI,CAAC;AAEtC,SACE,oDAAC,SAAI,OAAO,EAAE,SAAS,GAAG,GACxB;AAAA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,eAAe;AAAA,QACf,UAAU;AAAA,QACV,QAAO;AAAA,QAEP;AAAA,8DAACH,QAAA,EAAM,OAAO,GAAG,OAAO,EAAE,QAAQ,EAAE,GACjC,YAAE,GAAG,WAAW,WAAW,aAAa,aAAa,KADxD;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,oDAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,iBAAS;AAAA,UACT,oDAAC,gBAAK,KAAK,IAAI,UAAQ,MACrB,8DAAC,eAAI,QAAQ,CAAC,IAAI,EAAE,GAClB;AAAA,gEAAC,eAAI,MAAK,QACR,8DAAC,iBACE,yBACC;AAAA,cAAC;AAAA;AAAA,gBACC,aAAa;AAAA,kBACX,UAAU;AAAA,kBACV,OAAO;AAAA,kBACP,UAAU;AAAA,kBACV,QAAQ,WAAW,WAAW,YAAY;AAAA,kBAC1C,cAAc;AAAA,kBACd,gBAAgB;AAAA,kBAChB,oBAAoB;AAAA,kBACpB,iBACE,gBACA,aAAa,SACb,aAAa,UAAU,MACnB,QAAQ,UAAU,aAAa,YAC/B;AAAA,gBACR;AAAA,gBACA,SAAS;AAAA,gBACT;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAkBA,IAEA;AAAA,cAAC;AAAA;AAAA,gBACC,OAAO;AAAA,kBACL,iBAAiB,MAAM;AAAA,kBACvB,WAAW;AAAA,gBACb;AAAA,gBACA,WAAW,EAAE,SAAS,aAAa,QAAQ,UAAU;AAAA,gBACrD,SAAS;AAAA,gBAET,8DAAC,iBAAM,WAAU,YAAW,MAAM,GAAG,OAAM,UACzC;AAAA;AAAA,oBAAC;AAAA;AAAA,sBACC,SAAS;AAAA,sBACT,KAAI;AAAA,sBACJ,OAAO;AAAA,sBACP,QAAQ;AAAA;AAAA,oBAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKA;AAAA,kBACA,oDAACD,OAAA,EAAM,YAAE,aAAa,KAAtB;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAAA,qBAP1B;AAAA;AAAA;AAAA;AAAA,uBAQA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAiBA,KAvCJ;AAAA;AAAA;AAAA;AAAA,mBAyCA,KA1CF;AAAA;AAAA;AAAA;AAAA,mBA2CA;AAAA,YACC,gBACC,oDAAC,eAAI,MAAK,QACR;AAAA;AAAA,gBAAC,aAAK;AAAA,gBAAL;AAAA,kBAEC,MAAK;AAAA,kBAOL,OACE,oDAACA,OAAA,EAAK,OAAO,EAAE,YAAY,KAAK,UAAU,UAAU,GAEjD,aAAG,EAAE,kBAAkB,OAF1B;AAAA;AAAA;AAAA;AAAA,yBAGA;AAAA,kBAGF,8DAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,yBAAO;AAAA;AAAA,gBAfH;AAAA,gBADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAiBA;AAAA,cACA;AAAA,gBAAC,aAAK;AAAA,gBAAL;AAAA,kBAEC,MAAK;AAAA,kBACL,OAAO;AAAA,oBACL;AAAA,sBACE,UAAU;AAAA,sBACV,SAAS,EAAE,wBAAwB;AAAA,oBACrC;AAAA,kBACF;AAAA,kBACA,OACE,oDAAC,iBAAM,MAAM,IACX,8DAACA,OAAA,EAAK,OAAO,EAAE,YAAY,KAAK,UAAU,UAAU,GACjD,YAAE,MAAM,KADX;AAAA;AAAA;AAAA;AAAA,yBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,yBAIA;AAAA,kBAGF;AAAA,oBAAC;AAAA;AAAA,sBACC,OAAO,EAAE,OAAO,OAAO;AAAA,sBACvB,aAAa,EAAE,aAAa;AAAA,sBAC5B,SACE,aAAa,OACT,aAAa,KAAK,IAAI,CAAC,UAAe;AAAA,wBACpC,OACE,oDAAC,iBAAM,MAAM,GACV;AAAA,+BAAK,OACJ;AAAA,4BAAC;AAAA;AAAA,8BACC,KAAK,GAAG,UAAU,KAAK;AAAA,8BACvB,MAAM;AAAA,8BACN,OAAM;AAAA;AAAA,4BAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAIA,IAEA;AAAA;AAAA;AAAA;AAAA,iCAAE;AAAA,0BAEJ,oDAACA,OAAA,EAAK,OAAO,EAAE,OAAO,UAAU,GAC7B,eAAK,QADR;AAAA;AAAA;AAAA;AAAA,iCAEA;AAAA,6BAZF;AAAA;AAAA;AAAA;AAAA,+BAaA;AAAA,wBAEF,OAAO,KAAK;AAAA,sBACd,EAAE,IACF,CAAC;AAAA;AAAA,oBAxBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA0BA;AAAA;AAAA,gBA1CI;AAAA,gBADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA4CA;AAAA,iBA/DF;AAAA;AAAA;AAAA;AAAA,mBAgEA;AAAA,eA9GJ;AAAA;AAAA;AAAA;AAAA,iBAgHA,KAjHF;AAAA;AAAA;AAAA;AAAA,iBAkHA;AAAA,UACA,oDAAC,eAAI,QAAQ,IAAI,OAAO,EAAE,WAAW,GAAG,GACtC;AAAA,gEAAC,eAAI,MAAM,IACT,8DAAC,cAAW,OAAM,aAAY,SAAS,UACpC,YAAE,QAAQ,KADb;AAAA;AAAA;AAAA;AAAA,mBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,mBAIA;AAAA,YACA,oDAAC,eAAI,MAAM,IACT,8DAAC,cAAW,OAAM,WAAU,SAAS,MAAM,KAAK,OAAO,GACpD,YAAE,GAAG,WAAW,WAAW,aAAa,QAAQ,KADnD;AAAA;AAAA;AAAA;AAAA,mBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,mBAIA;AAAA,eAVF;AAAA;AAAA;AAAA;AAAA,iBAWA;AAAA;AAAA;AAAA,MAxIF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAyIA;AAAA,IACC,CAAC,gBACA;AAAA,MAAC;AAAA;AAAA,QACE,GAAGG;AAAA,QACJ,OAAO;AAAA,QACP,UAAU;AAAA,QACV,MAAM;AAAA,QAEN;AAAA,UAAC;AAAA;AAAA,YACC,eAAe,iBAAiB,iBAAiB;AAAA,YACjD;AAAA,YACA,cAAc;AAAA;AAAA,UAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIA;AAAA;AAAA,MAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,IAEA;AAAA;AAAA;AAAA;AAAA,WAAE;AAAA,OAzJN;AAAA;AAAA;AAAA;AAAA,SA2JA;AAEJ;;;ADhPY,IAAAE,0BAAA;AAhDZ,IAAM,EAAE,MAAAC,OAAM,OAAAC,OAAM,IAAI;AAexB,IAAM,aAAa;AAAA,EACjB,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,aAAa,CAAC,UAAe;AAC/B;AAEO,SAAS,mBAAmB,OAAgC;AACjE,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,CAAC,QAAQ,SAAS,QAAI,wBAAiB,EAAE;AAC/C,QAAM,CAAC,OAAO,aAAa,IAAI,cAAM,SAAS;AAC9C,QAAM,CAAC,aAAa,cAAc,QAAI,wBAAkB,KAAK;AAC7D,QAAM,CAAC,eAAe,gBAAgB,QAAI,wBAAS,KAAK;AACxD,QAAM,CAAC,IAAI,IAAI,aAAK,QAAQ;AAE5B,QAAM,EAAE,OAAO,IAAI;AAEnB,QAAM,kCAAkC,MAAM;AAC5C,qBAAiB,IAAI;AAAA,EACvB;AAEA,QAAM,uBAAmB,2BAAY,MAAM;AACzC,UAAM,QAAQ;AAAA,MACZ,OAAO,GAAG,EAAE,4CAA4C;AAAA,MACxD,MAAM,oDAAC,qCAAD;AAAA;AAAA;AAAA;AAAA,aAAyB;AAAA,MAC/B,QAAQ,EAAE,SAAS;AAAA,MACnB,QAAQ;AAAA,MACR,YAAY,EAAE,QAAQ;AAAA,MACtB,cAAc;AAAA,MACd,OAAO;AACL,gBAAQ;AAAA,UACN,EAAE,IAAI,cAAc,GAAG;AAAA,UACvB;AAAA,YACE,QAAQ;AAAA,YACR,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,OAAO,CAAC;AAEZ,QAAM,kBAAkB,MAAM;AAC5B,mBAAe,IAAI;AAAA,EACrB;AAEA,QAAM,mBAAmB,MAAM;AAC7B,mBAAe,KAAK;AAAA,EACtB;AAEA,QAAM,kBAAkB,CAAC,MAAW;AAClC,cAAU,EAAE,OAAO,KAAK;AAAA,EAC1B;AAEA,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,wBAAiB,EAAE;AAE/D,QAAM,gBAAgB;AAAA,IACpB,EAAE,OAAO,0BAA0B,OAAO,wBAAwB;AAAA,IAClE,EAAE,OAAO,YAAY,OAAO,WAAW;AAAA,IACvC,EAAE,OAAO,cAAc,OAAO,aAAa;AAAA,IAC3C,EAAE,OAAO,sBAAsB,OAAO,oBAAoB;AAAA,IAC1D,EAAE,OAAO,QAAQ,OAAO,OAAO;AAAA,IAC/B,EAAE,OAAO,sBAAsB,OAAO,qBAAqB;AAAA,IAC3D,EAAE,OAAO,UAAU,OAAO,SAAS;AAAA,EACrC;AAEA,QAAM,mBAAmB,CAAC,UAAkB;AAC1C,QAAI,UAAU,UAAU;AACtB,gBAAU,KAAK;AAAA,IACjB,OAAO;AACL,gBAAU,EAAE;AAAA,IACd;AACA,sBAAkB,KAAK;AAAA,EACzB;AAEA,QAAM,eACJ;AAAA,IAAC;AAAA;AAAA,MACC,OAAO,EAAE,OAAO,OAAO;AAAA,MACvB,UAAU;AAAA,MACV,OAAO,iBAAiB,iBAAiB;AAAA,MACzC,UAAU,QAAQ,UAAU;AAAA,MAC5B,aAAa,EAAE,eAAe;AAAA,MAC9B,YAAY;AAAA,MAEX,wBAAc,IAAI,CAAC,WAClB,oDAAC,UAA0B,OAAO,OAAO,OACtC,iBAAO,SADG,OAAO,OAApB;AAAA;AAAA;AAAA;AAAA,aAEA,CACD;AAAA;AAAA,IAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA;AAGF,QAAM,mBAAe,2BAAY,MAAM;AACrC,QAAI,OAAO,SAAS,GAAG;AACrB,cAAQ;AAAA,QACN,EAAE,QAAQ,IAAI,MAAM,SAAS;AAAA,QAC7B;AAAA,UACE,QAAQ;AAAA,UACR,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF,GAAG,CAAC,SAAS,UAAU,MAAM,CAAC;AAE9B,QAAM,iBAAa,2BAAY,MAAM;AACnC,UAAM,QAAQ;AAAA,MACZ,OAAO,GAAG,EAAE,kCAAkC;AAAA,MAC9C,MAAM,oDAAC,qCAAD;AAAA;AAAA;AAAA;AAAA,aAAyB;AAAA,MAC/B,QAAQ,EAAE,SAAS;AAAA,MACnB,QAAQ;AAAA,MACR,YAAY,EAAE,QAAQ;AAAA,MACtB,cAAc;AAAA,MACd,OAAO;AACL,gBAAQ;AAAA,UACN,EAAE,IAAI,MAAM,SAAS;AAAA,UACrB;AAAA,YACE,QAAQ;AAAA,YACR,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,SAAS,IAAI,QAAQ,CAAC;AAE1B,QAAM,QAAQ;AAAA,IACZ;AAAA,MACE,OACE,oDAAC,iBAAM,MAAM,IAAI,OAAO,EAAE,OAAO,UAAU,GACzC;AAAA,4DAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,eAAe;AAAA,QACd,EAAE,QAAQ;AAAA,WAFb;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MAEF,SAAS;AAAA,IACX;AAAA,EACF;AACA,MAAI,WAAW,cAAc;AAC3B,UAAM,KAAK;AAAA,MACT,OACE,oDAAC,iBAAM,MAAM,IACX;AAAA,4DAAC,4BAAD;AAAA;AAAA;AAAA;AAAA,eAAgB;AAAA,QACf,EAAE,QAAQ;AAAA,WAFb;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MAEF,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACA,+BAAU,MAAM;AACd,cAAU,EAAE;AAAA,EACd,GAAG,CAAC,EAAE,CAAC;AAEP,+BAAU,MAAM;AACd,QACE,WACA,QAAQ,QACR,QAAQ,KAAK,YAAY,UAAU,WAAW,WAAW,gBACzD,QAAQ,UAAU,QAClB;AACA,gBAAU,EAAE;AACZ,qBAAe,KAAK;AACpB,mBAAa,OAAO;AAAA,IACtB;AAAA,EACF,GAAG,CAAC,SAAS,QAAQ,CAAC;AAEtB,SACE,wFACE;AAAA,wDAAC,iBAAM,MAAM,IAIV,qBACC,wFACE;AAAA;AAAA,QAACD;AAAA,QAAA;AAAA,UACC,OAAO,EAAE,UAAU,IAAI,QAAQ,UAAU;AAAA,UACzC,SAAS;AAAA,UAET,8DAAC,0BAAD;AAAA;AAAA;AAAA;AAAA,iBAAc;AAAA;AAAA,QAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,MACA;AAAA,QAACA;AAAA,QAAA;AAAA,UACC,OAAO,EAAE,UAAU,IAAI,QAAQ,WAAW,OAAO,UAAU;AAAA,UAC3D,SAAS;AAAA,UAET,8DAAC,4BAAD;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAAA;AAAA,QAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,SAZF;AAAA;AAAA;AAAA;AAAA,WAaA,KAlBJ;AAAA;AAAA;AAAA;AAAA,WAoBA;AAAA,IACA;AAAA,MAAC;AAAA;AAAA,QACE,GAAG;AAAA,QACJ,UAAU,MAAM,iBAAiB,KAAK;AAAA,QACtC,MAAM;AAAA,QAEN;AAAA,UAAC;AAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,QAAO;AAAA,YACP,UAAU,MAAM,iBAAiB,KAAK;AAAA,YACtC;AAAA;AAAA,UAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQA;AAAA;AAAA,MAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA;AAAA,IACC;AAAA,OArCH;AAAA;AAAA;AAAA;AAAA,SAsCA;AAEJ;;;ADvIY,IAAAE,0BAAA;AAxFZ,IAAM,EAAE,MAAAC,OAAM,OAAAC,OAAM,IAAI;AAUjB,SAAS,YAAY,OAAyB;AACnD,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,EAAE,MAAM,SAAS,MAAM,MAAM,IAAI;AACvC,QAAM,UAAU,WAAW;AAC3B,QAAM,EAAE,OAAO,IAAI,QAAQ,CAAC,EAAE;AAC9B,QAAM,EAAE,OAAO,QAAI,0BAAW,UAAU;AACxC,QAAM,EAAE,KAAK,QAAI,0BAAW,WAAW;AACvC,QAAM,UAAU;AAChB,QAAM,eAAe,QAAQ,KAAK,MAAM,SAAS,aAAa;AAC9D,QAAM,CAAC,YAAY,aAAa,QAAI,wBAAiB,EAAE;AAEvD,QAAM,aAAa,KAAK;AACxB,QAAM,YAAY,KAAK,YAAY,KAAK;AAAA,IACtC,CAAC,SAAc,KAAK,SAAS;AAAA,EAC/B;AAEA,QAAM,cAAc;AAAA,IAClB,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,cAAc;AAAA,IACd,gBAAgB;AAAA,IAChB,oBAAoB;AAAA;AAAA,EAEtB;AAEA,+BAAU,MAAM;AAEd,UAAM,eAAe,MAAM;AACzB,UAAI,OAAO,aAAa,KAAK;AAC3B,sBAAc,eAAe;AAAA,MAC/B,OAAO;AACL,sBAAc,MAAM;AAAA,MACtB;AAAA,IACF;AAEA,iBAAa;AAEb,WAAO,iBAAiB,UAAU,YAAY;AAE9C,WAAO,MAAM;AAEX,aAAO,oBAAoB,UAAU,YAAY;AAAA,IACnD;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,QAAM,YAAY;AAAA,IAChB,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,QAAQ;AAAA,IACR,UAAU;AAAA,EACZ;AAEA,QAAM,mBAAmB;AACzB,QAAM,sBACJ;AAEF,QAAM,WACJ;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,QACL,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MAEA;AAAA,QAAC;AAAA;AAAA,UACC,UAAU;AAAA,UACV,OAAO;AAAA,YACL,GAAG;AAAA,YACH,UAAU;AAAA,YACV,iBAAiB,QAAQ,UAAU,KAAK,YAAY;AAAA,YACpD,WAAW;AAAA,YACX,gBAAgB;AAAA,YAChB,QAAQ;AAAA,UACV;AAAA,UACA,WAAW,EAAE,SAAS,EAAE;AAAA,UAExB;AAAA,gEAAC,SAAI,OAAO,EAAE,UAAU,YAAY,OAAO,QAAQ,QAAQ,EAAE,GAC3D,8DAAC,SAAI,WAAU,YACb;AAAA,cAAC;AAAA;AAAA,gBACC,WAAU;AAAA,gBACV,OAAO;AAAA,kBACL,kBAAiB,uCAAW,mBACxB,uCAAW,kBACX;AAAA,gBACN;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAOA,KARF;AAAA;AAAA;AAAA;AAAA,mBASA,KAVF;AAAA;AAAA;AAAA;AAAA,mBAWA;AAAA,YACA;AAAA,cAAC;AAAA;AAAA,gBACC,OAAO;AAAA,kBACL,UAAU;AAAA,kBACV,KAAK;AAAA;AAAA,kBAEL,OAAO;AAAA,kBACP,MAAM;AAAA,kBACN,SAAS;AAAA,kBACT,eAAe;AAAA,kBACf,YAAY;AAAA,kBACZ,QAAQ;AAAA,gBACV;AAAA,gBAEA;AAAA,kBAAC;AAAA;AAAA,oBACC,OAAO;AAAA,sBACL,cAAc;AAAA,sBACd,QAAQ;AAAA,sBACR,QAAQ;AAAA,oBACV;AAAA,oBACA,OAAO;AAAA,oBACP,SAAS;AAAA,oBACT,KAAK,GAAG,UAAU,uCAAW;AAAA;AAAA,kBAR/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBASA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAuBA;AAAA,YACA;AAAA,cAAC;AAAA;AAAA,gBACC,OAAO,EAAE,UAAU,YAAY,YAAY,SAAS;AAAA,gBACpD,OAAM;AAAA,gBACN,QAAO;AAAA,gBACP,OAAM;AAAA,gBACN,SAAQ;AAAA,gBAER,8DAAC,UACC,8DAAC,YAAO,IAAG,OACT;AAAA;AAAA,oBAAC;AAAA;AAAA,sBACC,IAAG;AAAA,sBACH,cAAa;AAAA,sBACb,QAAO;AAAA;AAAA,oBAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIA;AAAA,kBACA;AAAA,oBAAC;AAAA;AAAA,sBACC,IAAG;AAAA,sBACH,MAAK;AAAA,sBACL,QAAO;AAAA,sBACP,QAAO;AAAA;AAAA,oBAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKA;AAAA,kBACA,oDAAC,iBAAY,IAAG,iBAAgB,KAAI,OAAM,UAAS,UAAnD;AAAA;AAAA;AAAA;AAAA,yBAA0D;AAAA,qBAZ5D;AAAA;AAAA;AAAA;AAAA,uBAaA,KAdF;AAAA;AAAA;AAAA;AAAA,uBAeA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAuBA;AAAA;AAAA;AAAA,QAvEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAwEA;AAAA;AAAA,IA9EF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+EA;AAGF,SACE,wFACE,8DAAC,gBAAK,OAAO,WACX,8DAAC,eACC;AAAA,wDAAC,eAAI,MAAM,eAAe,kBAAkB,IAAI,IAC7C,yBAAe,kBACd,WAEA;AAAA,MAAC;AAAA;AAAA,QACC,SAAQ;AAAA,QACR,OAAM;AAAA,QAEL;AAAA;AAAA,MAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,KATJ;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,IACA,oDAAC,eAAI,MAAM,eAAe,kBAAkB,KAAK,IAC/C;AAAA,MAAC;AAAA;AAAA,QACC,OAAO;AAAA,UACL,YAAY;AAAA,UACZ,gBAAgB;AAAA,QAClB;AAAA,QAEA;AAAA,8DAAC,gBAAK,SAAQ,iBAAgB,OAAM,cAAa,MAAK,QACpD;AAAA;AAAA,cAAC;AAAA;AAAA,gBACC,WAAU;AAAA,gBACV,MAAM;AAAA,gBACN,OAAO,EAAE,QAAQ,GAAG,SAAS,EAAE;AAAA,gBAE/B,8DAACA,QAAA,EAAM,OAAO,GAAI,YAAE,kBAAkB,KAAtC;AAAA;AAAA;AAAA;AAAA,uBAAwC;AAAA;AAAA,cAL1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMA;AAAA,YACA;AAAA,cAAC;AAAA;AAAA,gBACC;AAAA,gBACA,IAAI,KAAK;AAAA,gBACT;AAAA,gBACA;AAAA,gBACA,eAAe;AAAA,gBACf;AAAA,gBACA;AAAA,gBACA,UAAS;AAAA;AAAA,cARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YASA;AAAA,eAjBF;AAAA;AAAA;AAAA;AAAA,iBAkBA;AAAA,UACA;AAAA,YAAC;AAAA;AAAA,cACC,UAAQ;AAAA,cACR,OAAO,KAAK;AAAA,cACZ,OAAO,EAAE,cAAc,OAAO;AAAA;AAAA,YAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIA;AAAA,UACA,oDAACA,QAAA,EAAM,OAAO,GAAI,YAAE,cAAc,KAAlC;AAAA;AAAA;AAAA;AAAA,iBAAoC;AAAA,UACpC,oDAAC,iBAAM,UAAQ,MAAC,OAAO,EAAE,GAAG,KAAK,MAAM,KAAvC;AAAA;AAAA;AAAA;AAAA,iBAA0C;AAAA;AAAA;AAAA,MA/B5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgCA,KAjCF;AAAA;AAAA;AAAA;AAAA,WAkCA;AAAA,OA/CF;AAAA;AAAA;AAAA;AAAA,SAgDA,KAjDF;AAAA;AAAA;AAAA;AAAA,SAkDA,KAnDF;AAAA;AAAA;AAAA;AAAA,SAoDA;AAEJ;;;AD+DU,IAAAC,0BAAA;AA3PV,IAAM,EAAE,OAAAC,QAAO,MAAAC,MAAK,IAAI;AAqHxB,IAAMC,cAAa;AAAA,EACjB,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,aAAa,CAAC,UAAe;AAC/B;AAGe,SAAR,kBAAmC;AACxC,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,UAAU,WAAW;AAC3B,QAAM,CAAC,YAAY,aAAa,IAAI,qBAAa,gBAAgB;AACjE,QAAM,EAAE,WAAW,OAAO,YAAY,IAAI,cAAc;AACxD,QAAM,CAAC,eAAe,gBAAgB,QAAI,wBAAS,KAAK;AACxD,QAAM,CAAC,eAAe,gBAAgB,QAAI,wBAAa,SAAS;AAChE,QAAM,CAAC,cAAc,eAAe,QAAI,wBAAkB,KAAK;AAE/D,QAAM,CAAC,YAAY,aAAa,QAAI,wBAAiB,EAAE;AAEvD,QAAM,CAAC,IAAI,IAAI,aAAK,QAAQ;AAC5B,QAAM,EAAE,KAAK,QAAI,0BAAW,WAAW;AACvC,QAAM,SAAS,UAAU;AAEzB,QAAM,6BAA6B,MAAM;AACvC;AAAA,MACE;AAAA,QACE,MAAM,KAAK;AAAA,QACX,QAAQ;AAAA,MACV;AAAA,MACA,EAAE,QAAQ,OAAO;AAAA,IACnB;AAAA,EACF;AAEA,QAAM,sBAAsB,MAAM;AAChC,qBAAiB,IAAI;AAAA,EACvB;AAEA,QAAM,0BAA0B,MAAM;AACpC,oBAAgB,CAAC,YAAY;AAAA,EAC/B;AAEA,QAAM,oBAAoB,CAAC,UAAe;AACxC,qBAAiB,KAAK;AAAA,EACxB;AAEA,QAAM,sBAAsB,MAAM;AAChC,oBAAgB,KAAK;AAAA,EACvB;AAEA,QAAM,sBAAsB,MAAM;AAChC,oBAAgB,KAAK;AACrB,UAAM,UAAU;AAAA,MACd,oBAAoB,cAAc;AAAA,QAChC,CAAC,MAAW,UAAkB,KAAK;AAAA,MACrC;AAAA,IACF;AACA,YAAQ;AAAA,MACN;AAAA,QACE,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B;AAAA,MACA;AAAA,QACE,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,+BAAU,MAAM;AACd,qBAAiB,aAAa,UAAU,SAAS,YAAY,CAAC,CAAC;AAAA,EACjE,GAAG,CAAC,SAAS,CAAC;AAEd,+BAAU,MAAM;AACd,QAAI,CAAC,QAAQ,QAAQ,QAAQ,UAAU,QAAQ;AAC7C;AAAA,IACF;AAEA,QAAI,QAAQ,KAAK,WAAW;AAC1B,uBAAiB,QAAQ,KAAK,SAAS;AAAA,IACzC;AAAA,EACF,GAAG,CAAC,QAAQ,IAAI,CAAC;AAEjB,+BAAU,MAAM;AAEd,UAAM,eAAe,MAAM;AACzB,UAAI,OAAO,aAAa,KAAK;AAC3B,sBAAc,eAAe;AAAA,MAC/B,OAAO;AACL,sBAAc,MAAM;AAAA,MACtB;AAAA,IACF;AAEA,iBAAa;AAEb,WAAO,iBAAiB,UAAU,YAAY;AAE9C,WAAO,MAAM;AAEX,aAAO,oBAAoB,UAAU,YAAY;AAAA,IACnD;AAAA,EACF,GAAG,CAAC,CAAC;AAwBL,SACE,oDAAC,SAAI,OAAO,EAAE,UAAU,IAAI,GAC1B;AAAA,wDAAC,SACC;AAAA;AAAA,QAAC;AAAA;AAAA,UACC,MAAM;AAAA,UACN,WAAU;AAAA,UACV,OAAO;AAAA,YACL,cAAc;AAAA,YACd,SAAS;AAAA,YACT,gBAAgB;AAAA,UAClB;AAAA,UAEA;AAAA,gEAACC,QAAA,EAAM,OAAO,GAAI,YAAE,UAAU,KAA9B;AAAA;AAAA;AAAA;AAAA,mBAAgC;AAAA,YAC/B,eAAe,mBACd,oDAAC,eAAI,SAAS,OAAO,OAAO,EAAE,QAAQ,GAAG,GACtC;AAAA,4BAAc,SAAS,KACtB;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,OAAO;AAAA,oBACL,WAAW;AAAA,oBACX,aAAa;AAAA,oBACb,YAAY;AAAA,oBACZ,WAAW;AAAA,kBACb;AAAA,kBACA,SAAS;AAAA,kBAET;AAAA;AAAA,sBAAC;AAAA;AAAA,wBACC,OAAO;AAAA,0BACL,OAAO;AAAA,0BACP,UAAU;AAAA,0BACV,aAAa;AAAA,wBACf;AAAA;AAAA,sBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMA;AAAA,oBACC,EAAE,YAAY;AAAA;AAAA;AAAA,gBAjBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAkBA;AAAA,cAGF,oDAAC,cAAW,OAAM,WAAU,SAAS,MAAM,oBAAoB,GAC7D,8DAAC,iBACC;AAAA,oEAAC,wBAAa,OAAO,EAAE,OAAO,QAAQ,KAAtC;AAAA;AAAA;AAAA;AAAA,uBAAyC;AAAA,gBACxC,EAAE,UAAU;AAAA,mBAFf;AAAA;AAAA;AAAA;AAAA,qBAGA,KAJF;AAAA;AAAA;AAAA;AAAA,qBAKA;AAAA,iBA5BF;AAAA;AAAA;AAAA;AAAA,mBA6BA;AAAA;AAAA;AAAA,QAxCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA0CA;AAAA,MACC,eAAe,UACd,oDAAC,eAAI,SAAS,OAAO,OAAO,EAAE,QAAQ,IAAI,WAAW,EAAE,GACpD;AAAA,sBAAc,SAAS,KACtB;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,OAAO;AAAA,cACL,WAAW;AAAA,cACX,aAAa;AAAA,cACb,YAAY;AAAA,cACZ,WAAW;AAAA,YACb;AAAA,YAEA;AAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,OAAO;AAAA,oBACL,OAAO;AAAA,oBACP,UAAU;AAAA,oBACV,aAAa;AAAA,kBACf;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMA;AAAA,cACC,EAAE,YAAY;AAAA;AAAA;AAAA,UAhBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAiBA;AAAA,QAGF,oDAAC,cAAW,OAAM,WAAU,SAAS,MAAM,oBAAoB,GAC7D,8DAAC,iBACC;AAAA,8DAAC,wBAAa,OAAO,EAAE,OAAO,QAAQ,KAAtC;AAAA;AAAA;AAAA;AAAA,iBAAyC;AAAA,UACxC,EAAE,UAAU;AAAA,aAFf;AAAA;AAAA;AAAA;AAAA,eAGA,KAJF;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA,WA3BF;AAAA;AAAA;AAAA;AAAA,aA4BA;AAAA,MAGD,cAAc,IAAI,CAAC,YAAiB,UACnC,oDAAC,SACC;AAAA,QAAC;AAAA;AAAA,UACC,MAAM;AAAA,UACN;AAAA,UACA,MAAM;AAAA,UACN;AAAA;AAAA,QAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,KANQ,OAAV;AAAA;AAAA;AAAA;AAAA,aAOA,CACD;AAAA,MACD;AAAA,QAAC;AAAA;AAAA,UACC,OAAM;AAAA,UACN,SAAS;AAAA,UACT,OAAO,EAAE,WAAW,GAAG;AAAA,UAEtB,YAAE,MAAM;AAAA;AAAA,QALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,SA5FF;AAAA;AAAA;AAAA;AAAA,WA6FA;AAAA,IAeA;AAAA,MAAC;AAAA;AAAA,QACE,GAAGD;AAAA,QACJ,UAAU,MAAM,iBAAiB,KAAK;AAAA,QACtC,MAAM;AAAA,QAEN;AAAA,UAAC;AAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA,MAAM;AAAA,YACN;AAAA,YACA,QAAO;AAAA,YACP,UAAU,MAAM,iBAAiB,KAAK;AAAA;AAAA,UANxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOA;AAAA;AAAA,MAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA;AAAA,IACA;AAAA,MAAC;AAAA;AAAA,QACE,GAAGA;AAAA,QACJ,UAAU,MAAM,gBAAgB,KAAK;AAAA,QACrC,MAAM;AAAA,QAEN;AAAA,UAAC;AAAA;AAAA,YACC,OAAO;AAAA,cACL,WAAW;AAAA,YACb;AAAA,YAEA;AAAA,kEAACE,OAAA,EAAK,OAAO,EAAE,UAAU,QAAQ,YAAY,MAAM,GAChD,YAAE,eAAe,KADpB;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,oDAAC,mBAAQ,OAAO,EAAE,QAAQ,EAAE,KAA5B;AAAA;AAAA;AAAA;AAAA,qBAA+B;AAAA,cAC/B;AAAA,gBAAC;AAAA;AAAA,kBACC,OAAO;AAAA,kBACP,UAAU;AAAA,kBACV,YAAY,CAAC,MAAW,UACtB,oDAAC,aAAa,MAAb,EAAkB,IAAI,KAAK,IAC1B,8DAAC,SAAI,OAAO,EAAE,UAAU,YAAY,QAAQ,OAAO,GACjD;AAAA,wEAAC,SAAI,OAAO,EAAE,UAAU,YAAY,QAAQ,IAAK,GAC9C,8DAAC,aAAa,YAAb,IAAD;AAAA;AAAA;AAAA;AAAA,2BAAyB,KAD5B;AAAA;AAAA;AAAA;AAAA,2BAEA;AAAA,oBACA,oDAAC,cAAW,OAAM,QAAQ,eAAK,YAAY,QAA3C;AAAA;AAAA;AAAA;AAAA,2BAAgD;AAAA,uBAJlD;AAAA;AAAA;AAAA;AAAA,yBAKA,KANF;AAAA;AAAA;AAAA;AAAA,yBAOA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAaA;AAAA,cACA,oDAAC,eAAI,QAAQ,IAAI,OAAO,EAAE,WAAW,GAAG,GACtC;AAAA,oEAAC,eAAI,MAAM,IACT,8DAAC,cAAW,OAAM,aAAY,SAAS,qBACpC,YAAE,QAAQ,KADb;AAAA;AAAA;AAAA;AAAA,uBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,uBAIA;AAAA,gBACA,oDAAC,eAAI,MAAM,IACT,8DAAC,cAAW,OAAM,WAAU,SAAS,qBAClC,YAAE,MAAM,KADX;AAAA;AAAA;AAAA;AAAA,uBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,uBAIA;AAAA,mBAVF;AAAA;AAAA;AAAA;AAAA,qBAWA;AAAA;AAAA;AAAA,UAlCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAmCA;AAAA;AAAA,MAxCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAyCA;AAAA,IACC;AAAA,OArKH;AAAA;AAAA;AAAA;AAAA,SAsKA;AAEJ;",
  "names": ["import_react", "import_react", "import_react", "import_react", "import_jsx_dev_runtime", "Text", "Title", "userGame", "modalProps", "gameId", "import_jsx_dev_runtime", "Text", "Title", "import_jsx_dev_runtime", "Text", "Title", "import_jsx_dev_runtime", "Title", "Text", "modalProps", "Title", "Text"]
}
