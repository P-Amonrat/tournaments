{
  "version": 3,
  "sources": ["../../../app/routes/_app.users.$uuid.joined-tournaments.tsx"],
  "sourcesContent": ["import { json, type LoaderFunction } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Card, Result } from \"antd\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport * as APIServer from \"~/api\";\nimport { TournamentGrid } from \"~/components/pages/Tournament\";\nimport { joinTournaments } from \"~/utils/helper\";\nimport { getSessionFromRequest } from \"~/session.server\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const loader: LoaderFunction = async ({ params, request }) => {\n  const session = await getSessionFromRequest(request);\n  const { uuid } = params;\n  const accessToken = session.get(\"accessToken\");\n  let uuidUser = \"\" as string;\n  let tournaments: any[] = [];\n  let transformedTournaments: any[] = [];\n  let joinedTournaments: any[] = [];\n  let transformedJoinedTournaments: any[] = [];\n  if (uuid) {\n    try {\n      const tournamentRes = await APIServer.clientFromSession().request(\n        APIServer.getJoinedTournament(uuid)\n      );\n      if (tournamentRes.data) {\n        tournaments = tournamentRes.data;\n      }\n\n      transformedTournaments = tournaments.map((item) => {\n        return {\n          id: item.tournament.id,\n          name: item.tournament.name,\n          nameEn: item.tournament.nameEn,\n          discordUrl: item.tournament.discordUrl,\n          registrationStartDate: item.tournament.registrationStartDate,\n          registrationEndDate: item.tournament.registrationEndDate,\n          startDate: item.tournament.startDate,\n          endDate: item.tournament.endDate,\n          maxTeam: item.tournament.maxTeam,\n          playerCount: item.tournament.playerCount,\n          additionalPlayerCount: item.tournament.additionalPlayerCount,\n          type: item.tournament.type,\n          status: item.tournament.status,\n          finalRoundLocation: item.tournament.finalRoundLocation,\n          finalRoundLocationEn: item.tournament.finalRoundLocationEn,\n          prize: item.tournament.prize,\n          description: item.tournament.description,\n          descriptionEn: item.tournament.descriptionEn,\n          qualificationRules: item.tournament.qualificationRules,\n          qualificationRulesEn: item.tournament.qualificationRulesEn,\n          isOnline: item.tournament.isOnline,\n          bannerImageUrl: item.tournament.bannerImageUrl,\n          thumbnailImageUrl: item.tournament.thumbnailImageUrl,\n          remark: item.tournament.remark,\n          isKycRequired: item.tournament.isKycRequired,\n          isDiscordIdRequired: item.tournament.isDiscordIdRequired,\n          isEmailRequired: item.tournament.isEmailRequired,\n          isPhoneNumberRequired: item.tournament.isPhoneNumberRequired,\n          isIgnRequired: item.tournament.isIgnRequired,\n          requirementFields: item.tournament.requirementFields,\n          organizerId: item.tournament.organizerId,\n          gameId: item.tournament.gameId,\n          organizer: item.tournament.organizer,\n          game: item.tournament.game,\n          createdDate: item.tournament.createdDate,\n          updatedDate: item.tournament.updatedDate,\n        };\n      });\n      tournaments = transformedTournaments;\n    } catch (e) {\n      console.log(\"e\", e);\n    }\n  }\n\n  if (accessToken) {\n    const accessTokenDecoded: any = jwt_decode(accessToken);\n    uuidUser = accessTokenDecoded.sub;\n    try {\n      const tournamentRes = await APIServer.clientFromSession().request(\n        APIServer.getJoinedTournament(uuidUser)\n      );\n      if (tournamentRes.data) {\n        joinedTournaments = tournamentRes.data;\n      }\n\n      transformedJoinedTournaments = joinedTournaments.map((item) => {\n        return {\n          id: item.tournament.id,\n          name: item.tournament.name,\n          nameEn: item.tournament.nameEn,\n          discordUrl: item.tournament.discordUrl,\n          registrationStartDate: item.tournament.registrationStartDate,\n          registrationEndDate: item.tournament.registrationEndDate,\n          startDate: item.tournament.startDate,\n          endDate: item.tournament.endDate,\n          maxTeam: item.tournament.maxTeam,\n          playerCount: item.tournament.playerCount,\n          additionalPlayerCount: item.tournament.additionalPlayerCount,\n          type: item.tournament.type,\n          status: item.tournament.status,\n          finalRoundLocation: item.tournament.finalRoundLocation,\n          finalRoundLocationEn: item.tournament.finalRoundLocationEn,\n          prize: item.tournament.prize,\n          description: item.tournament.description,\n          descriptionEn: item.tournament.descriptionEn,\n          qualificationRules: item.tournament.qualificationRules,\n          qualificationRulesEn: item.tournament.qualificationRulesEn,\n          isOnline: item.tournament.isOnline,\n          bannerImageUrl: item.tournament.bannerImageUrl,\n          thumbnailImageUrl: item.tournament.thumbnailImageUrl,\n          remark: item.tournament.remark,\n          isKycRequired: item.tournament.isKycRequired,\n          isDiscordIdRequired: item.tournament.isDiscordIdRequired,\n          isEmailRequired: item.tournament.isEmailRequired,\n          isPhoneNumberRequired: item.tournament.isPhoneNumberRequired,\n          isIgnRequired: item.tournament.isIgnRequired,\n          requirementFields: item.tournament.requirementFields,\n          organizerId: item.tournament.organizerId,\n          gameId: item.tournament.gameId,\n          organizer: item.tournament.organizer,\n          game: item.tournament.game,\n          createdDate: item.tournament.createdDate,\n          updatedDate: item.tournament.updatedDate,\n        };\n      });\n      tournaments = joinTournaments(\n        transformedTournaments,\n        transformedJoinedTournaments\n      );\n    } catch (e) {\n      console.log(\"e\", e);\n    }\n  }\n  return json({ uuid, tournaments });\n};\n\nexport default function UserJoinedTournaments() {\n  const { tournaments } = useLoaderData();\n  const { t } = useTranslation();\n\n  return tournaments.length ? (\n    <TournamentGrid loading={tournaments === null} data={tournaments} />\n  ) : (\n    <Card style={{ borderRadius: 10 }}>\n      <Result icon={<InboxOutlined />} title={t(\"no past tournament\")} />\n    </Card>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kBAA0C;AAQ1C,qBAAsC;AAsIlC;AALW,SAAR,wBAAyC;AAC9C,QAAM,EAAE,YAAY,IAAI,cAAc;AACtC,QAAM,EAAE,EAAE,IAAI,eAAe;AAE7B,SAAO,YAAY,SACjB,mDAAC,kBAAe,SAAS,gBAAgB,MAAM,MAAM,eAArD;AAAA;AAAA;AAAA;AAAA,SAAkE,IAElE,mDAAC,gBAAK,OAAO,EAAE,cAAc,GAAG,GAC9B,6DAAC,kBAAO,MAAM,mDAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,SAAe,GAAI,OAAO,EAAE,oBAAoB,KAA9D;AAAA;AAAA;AAAA;AAAA,SAAiE,KADnE;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;",
  "names": []
}
