{
  "version": 3,
  "sources": ["../../../app/routes/_app.tournaments.$id.edit.tsx"],
  "sourcesContent": ["import {\n  useFetcher,\n  useLoaderData,\n  useNavigation,\n  useRouteLoaderData,\n  useSubmit,\n} from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport { json, redirect } from \"@remix-run/node\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { Card, Form } from \"antd\";\nimport {\n  commitSession,\n  getSessionFromRequest,\n  mustAuthenticated,\n} from \"~/session.server\";\nimport * as APIServer from \"~/api\";\nimport { TournamentForm } from \"~/components/pages/Tournament/TournamentForm\";\nimport { flattenObject, unflattenObject } from \"~/utils/helper\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await mustAuthenticated(request);\n  let games: any[] = [];\n  try {\n    const gameRes = await APIServer.clientFromSession().request(\n      APIServer.getGames()\n    );\n    if (gameRes.data) {\n      games = gameRes.data;\n    }\n  } catch (e) {\n    console.log(\"e\", e);\n  }\n  return json({ games });\n};\n\nexport const action: ActionFunction = async ({ params, request }) => {\n  const { id } = params;\n  const session = await getSessionFromRequest(request);\n  const formdata = await request.formData();\n  // const entries = Object.fromEntries(formdata) as any;\n  const data = formdata.get(\"data\") as any;\n  const toSubmitData = JSON.parse(data);\n  let tournament: any = null;\n  if (id) {\n    try {\n      const tournamentRes = await APIServer.clientFromSession(session).request(\n        APIServer.updateTournament(toSubmitData, Number(id))\n      );\n      if (tournamentRes && tournamentRes.data) {\n        tournament = tournamentRes.data;\n      }\n      session.flash(\"flashMessage\", {\n        type: \"success\",\n        message: `successfully update tournament`,\n      });\n    } catch (e: any) {\n      console.log(\"error from edit\", e.response.data.message);\n\n      session.flash(\"flashMessage\", {\n        type: \"error\",\n        message: e.response.data.message.data,\n      });\n    }\n    if (tournament) {\n      return redirect(`/tournaments/${tournament.id}`, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n    } else {\n      return json({ success: false });\n    }\n  } else {\n    return json({ success: false });\n  }\n};\n\nexport default function TournamentEdit() {\n  const { t } = useTranslation();\n  const { games } = useLoaderData();\n  const routeLoader = useRouteLoaderData(\"routes/_app.tournaments.$id\");\n  const { tournament } = routeLoader;\n  const fetcher = useFetcher();\n  const submit = useSubmit();\n  const [form] = Form.useForm();\n  const navigation = useNavigation();\n\n  const handleEditTournament = (values: any) => {\n    if (values.isOnline) {\n      const { finalRoundLocation, finalRoundLocationEn, ...value } = values;\n      submit(\n        {\n          data: JSON.stringify(\n            unflattenObject({\n              ...value,\n            })\n          ),\n        },\n        { method: \"post\" }\n      );\n    } else {\n      const { playerCount, additionalPlayerCount, ...rest } = values;\n      submit(\n        {\n          data: JSON.stringify(\n            unflattenObject({\n              ...rest,\n              playerCount: Number(playerCount),\n              additionalPlayerCount: Number(additionalPlayerCount),\n            })\n          ),\n        },\n        { method: \"post\" }\n      );\n    }\n  };\n\n  return (\n    <Card\n      style={{\n        borderRadius: 12,\n        maxWidth: 800,\n        marginInline: \"auto\",\n      }}\n      bodyStyle={{ padding: 30 }}\n    >\n      <Form\n        form={form}\n        onFinish={handleEditTournament}\n        layout=\"vertical\"\n        initialValues={flattenObject(tournament)}\n        scrollToFirstError\n      >\n        <TournamentForm\n          fetcher={fetcher}\n          form={form}\n          games={games}\n          initialAdditionalLength={\n            tournament &&\n            tournament.requirementFields &&\n            tournament.requirementFields.length\n          }\n          prizeInitialAdditionalLength={\n            tournament && tournament.prize && tournament.prize.length\n          }\n          loading={navigation.state !== \"idle\"}\n          submitLabel={t(\"submit\")}\n          edit={true}\n        />\n      </Form>\n    </Card>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,kBAA+B;AAG/B,qBAIO;AAuHC;AAxDO,SAAR,iBAAkC;AACvC,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,EAAE,MAAM,IAAI,cAAc;AAChC,QAAM,cAAc,mBAAmB,6BAA6B;AACpE,QAAM,EAAE,WAAW,IAAI;AACvB,QAAM,UAAU,WAAW;AAC3B,QAAM,SAAS,UAAU;AACzB,QAAM,CAAC,IAAI,IAAI,aAAK,QAAQ;AAC5B,QAAM,aAAa,cAAc;AAEjC,QAAM,uBAAuB,CAAC,WAAgB;AAC5C,QAAI,OAAO,UAAU;AACnB,YAAM,EAAE,oBAAoB,sBAAsB,GAAG,MAAM,IAAI;AAC/D;AAAA,QACE;AAAA,UACE,MAAM,KAAK;AAAA,YACT,gBAAgB;AAAA,cACd,GAAG;AAAA,YACL,CAAC;AAAA,UACH;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,OAAO;AAAA,MACnB;AAAA,IACF,OAAO;AACL,YAAM,EAAE,aAAa,uBAAuB,GAAG,KAAK,IAAI;AACxD;AAAA,QACE;AAAA,UACE,MAAM,KAAK;AAAA,YACT,gBAAgB;AAAA,cACd,GAAG;AAAA,cACH,aAAa,OAAO,WAAW;AAAA,cAC/B,uBAAuB,OAAO,qBAAqB;AAAA,YACrD,CAAC;AAAA,UACH;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,OAAO;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAEA,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,QACL,cAAc;AAAA,QACd,UAAU;AAAA,QACV,cAAc;AAAA,MAChB;AAAA,MACA,WAAW,EAAE,SAAS,GAAG;AAAA,MAEzB;AAAA,QAAC;AAAA;AAAA,UACC;AAAA,UACA,UAAU;AAAA,UACV,QAAO;AAAA,UACP,eAAe,cAAc,UAAU;AAAA,UACvC,oBAAkB;AAAA,UAElB;AAAA,YAAC;AAAA;AAAA,cACC;AAAA,cACA;AAAA,cACA;AAAA,cACA,yBACE,cACA,WAAW,qBACX,WAAW,kBAAkB;AAAA,cAE/B,8BACE,cAAc,WAAW,SAAS,WAAW,MAAM;AAAA,cAErD,SAAS,WAAW,UAAU;AAAA,cAC9B,aAAa,EAAE,QAAQ;AAAA,cACvB,MAAM;AAAA;AAAA,YAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAeA;AAAA;AAAA,QAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAuBA;AAAA;AAAA,IA/BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA;AAEJ;",
  "names": []
}
