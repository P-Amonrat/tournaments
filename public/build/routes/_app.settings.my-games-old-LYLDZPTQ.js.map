{
  "version": 3,
  "sources": ["../../../app/routes/_app.settings.my-games-old.tsx"],
  "sourcesContent": ["import { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useFetcher, useLoaderData, useSubmit } from \"@remix-run/react\";\nimport { Form, Input, Modal, Result, Space, Typography } from \"antd\";\nimport { LoadingOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport { GameSelect, TextEditor, TiltButton } from \"~/components/common\";\nimport { AppContext } from \"~/contexts\";\nimport {\n  type LoaderFunction,\n  json,\n  type ActionFunction,\n} from \"@remix-run/node\";\n\nimport * as APIServer from \"~/api\";\nimport {\n  commitSession,\n  getSessionFromRequest,\n  mustAuthenticated,\n} from \"~/session.server\";\nconst { Text, Title } = Typography;\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await mustAuthenticated(request);\n  const session = await getSessionFromRequest(request);\n  let personalDetails = [];\n  let games = [];\n  try {\n    const personalDetailsRes = await APIServer.clientFromSession(\n      session\n    ).request(APIServer.getPersonalDetails());\n    if (personalDetailsRes.data) {\n      personalDetails = personalDetailsRes.data;\n    }\n    const gameRes = await APIServer.clientFromSession(session).request(\n      APIServer.getGamesWithRanksAndModes()\n    );\n    if (gameRes.data) {\n      games = gameRes.data;\n    }\n  } catch (e) {\n    console.log(\"user setting error\", e);\n  }\n\n  return json({ personalDetails, games });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const session = await getSessionFromRequest(request);\n  const formdata = await request.formData();\n  const entries = Object.fromEntries(formdata) as any;\n  const data = JSON.parse(entries.data);\n\n  switch (entries.action) {\n    case \"create\":\n      try {\n        await APIServer.clientFromSession(session).request(\n          APIServer.createPersonalDetails(data)\n        );\n        session.flash(\"flashMessage\", {\n          type: \"success\",\n          message: `successfully created personal details`,\n        });\n      } catch (e: any) {\n        session.flash(\"flashMessage\", {\n          type: \"error\",\n          message:\n            e.errors && e.errors.length > 1\n              ? e.errors[0]\n              : e.response.data.message,\n        });\n      }\n      break;\n    case \"update\":\n      try {\n        await APIServer.clientFromSession(session).request(\n          APIServer.updatePersonalDetails(data)\n        );\n        session.flash(\"flashMessage\", {\n          type: \"success\",\n          message: `successfully updated personal details`,\n        });\n      } catch (e: any) {\n        session.flash(\"flashMessage\", {\n          type: \"error\",\n          message:\n            e.errors && e.errors.length > 1\n              ? e.errors[0]\n              : e.response.data.message,\n        });\n      }\n      break;\n  }\n\n  return json(null, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n};\n\n// Modal properties\nconst modalProps = {\n  closeIcon: false,\n  footer: null,\n  modalRender: (modal: any) => modal,\n};\n\n// Main component\nexport default function SettingsMyGames() {\n  const { t } = useTranslation();\n  const fetcher = useFetcher();\n  const { personalDetails, games } = useLoaderData();\n  const [textEditorLoading, setTextEditorLoading] = useState(true);\n  const [gameModal, setGameModal] = useState(false);\n  const [newGameCallback, setNewGameCallback] = useState<any>(null); // Callback to add new detail\n  const { scheme } = useContext(AppContext);\n  const submit = useSubmit();\n  const [form] = Form.useForm();\n\n  const [personalDetailsList, setPersonalDetailsList] = useState(\n    personalDetails.details.length > 0\n      ? personalDetails.details.map((detail: any) => ({\n          title: detail.title,\n          detail: detail.detail,\n        }))\n      : [\n          {\n            id: 1,\n            title: \"\",\n            detail: \"\",\n          },\n        ]\n  );\n\n  const handleRemove = (index: any) => {\n    setPersonalDetailsList((prevList: any) =>\n      prevList.filter((_: any, i: any) => i !== index)\n    );\n  };\n\n  const openGameModal = (callback: any) => {\n    setNewGameCallback(callback); // Set callback for when game is selected\n    setGameModal(true);\n  };\n\n  const closeGameModal = () => {\n    setGameModal(false);\n    setNewGameCallback(null); // Clear the callback when modal is closed\n  };\n\n  const handleGameChanged = (gameId: any) => {\n    if (newGameCallback) {\n      // Add new item with the game title\n      newGameCallback({\n        title: gameId,\n        detail: \"\",\n      });\n    }\n    closeGameModal(); // Close modal after selection\n  };\n\n  const handlePersonalDetails = (values: any) => {\n    submit(\n      {\n        data: JSON.stringify(values),\n        action: \"update\",\n      },\n      { method: \"post\" }\n    );\n  };\n\n  useEffect(() => {\n    setTextEditorLoading(false);\n  }, []);\n\n  return (\n    <div style={{ maxWidth: 600 }}>\n      <Space size={10} direction=\"vertical\" style={{ marginBottom: 20 }}>\n        <Title level={2} style={{ margin: 0 }}>\n          {t(\"my games\")}\n        </Title>\n      </Space>\n      <Form\n        layout=\"vertical\"\n        form={form}\n        name=\"dynamic_form_complex\"\n        initialValues={{ personalDetails: personalDetailsList }}\n        onFinish={handlePersonalDetails}\n      >\n        <Form.List name=\"personalDetails\">\n          {(fields, { add, remove }) => (\n            <div\n              style={{\n                display: \"flex\",\n                rowGap: 16,\n                flexDirection: \"column\",\n              }}\n            >\n              {fields.map((field, index) => (\n                <div key={field.key}>\n                  <Space\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      marginBottom: 10,\n                    }}\n                  >\n                    <Text style={{ fontWeight: 600 }} className=\"required\">\n                      {t(\"title personal details\")}\n                    </Text>\n                    {index > 0 && (\n                      <div\n                        onClick={() => {\n                          handleRemove(index);\n                          remove(field.name);\n                        }}\n                        style={{ cursor: \"pointer\" }}\n                      >\n                        <Space style={{ color: \"#D61515\" }}>\n                          <DeleteOutlined />\n                          <Text\n                            style={{\n                              fontWeight: 600,\n                              fontSize: \"inherit\",\n                              color: \"#D61515\",\n                            }}\n                          >\n                            {t(\"delete detail box\")}\n                          </Text>\n                        </Space>\n                      </div>\n                    )}\n                  </Space>\n\n                  <Form.Item\n                    name={[field.name, \"title\"]}\n                    rules={[\n                      { required: true, message: t(\"please input title\") },\n                    ]}\n                  >\n                    <Input />\n                  </Form.Item>\n\n                  {!textEditorLoading ? (\n                    <>\n                      <Text\n                        style={{\n                          fontWeight: 600,\n                          fontSize: \"inherit\",\n                        }}\n                        className=\"required\"\n                      >\n                        {t(\"detail personal details\")}\n                      </Text>\n                      <Form.Item\n                        name={[field.name, \"detail\"]}\n                        rules={[\n                          { required: true, message: t(\"please input detail\") },\n                        ]}\n                      >\n                        <TextEditor\n                          id=\"detail\"\n                          initialValues={personalDetailsList[index]?.detail}\n                          fetcher={fetcher}\n                          onChange={(values) =>\n                            form.setFieldValue(\n                              `personalDetails[${index}].detail`,\n                              values\n                            )\n                          }\n                        />\n                      </Form.Item>\n                    </>\n                  ) : (\n                    <Result\n                      icon={<LoadingOutlined style={{ fontSize: 24 }} spin />}\n                    />\n                  )}\n                </div>\n              ))}\n\n              <TiltButton\n                color={`${scheme}-base`}\n                onClick={() =>\n                  openGameModal((newDetail: any) => add(newDetail))\n                } // Pass the callback to add new detail\n                style={{ marginTop: 20 }}\n              >\n                + {t(\"Add Item\")}\n              </TiltButton>\n            </div>\n          )}\n        </Form.List>\n\n        <TiltButton\n          color=\"primary\"\n          onClick={form.submit}\n          style={{ marginTop: 20 }}\n        >\n          {t(\"save\")}\n        </TiltButton>\n      </Form>\n\n      <Modal\n        {...modalProps}\n        width={600}\n        onCancel={closeGameModal}\n        open={gameModal}\n      >\n        <GameSelect games={games} onGameSelect={handleGameChanged} />\n      </Modal>\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
