{
  "version": 3,
  "sources": ["../../../app/routes/_app.settings._index.tsx", "../../../app/components/common/PrivateFieldSelection.tsx", "../../../app/components/common/TextEditorNoTools.client.tsx"],
  "sourcesContent": ["import { useContext, useEffect, useState } from \"react\";\nimport {\n  useFetcher,\n  useLoaderData,\n  useMatches,\n  useSubmit,\n} from \"@remix-run/react\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Avatar,\n  Col,\n  Divider,\n  Flex,\n  Form,\n  Input,\n  Modal,\n  Result,\n  Row,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { PrivateFieldSelection, TiltButton } from \"~/components/common\";\nimport { AuthContext } from \"~/contexts\";\nimport { commitSession, getSessionFromRequest } from \"~/session.server\";\nimport * as APIServer from \"~/api\";\nimport { SortableList } from \"~/components/pages/Sorting/SortableList\";\nimport { TextEditorNoTools } from \"~/components/common/TextEditorNoTools.client\";\nimport { ArrowUpDown } from \"lucide-react\";\nconst { Text, Title } = Typography;\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  let games: any[] = [];\n  try {\n    const gameRes = await APIServer.clientFromSession().request(\n      APIServer.getGames()\n    );\n    if (gameRes.data) {\n      games = gameRes.data;\n    }\n  } catch (e) {\n    console.log(\"user setting error\", e);\n  }\n\n  const activeGame = games.filter((game) => game.isActive);\n\n  return json({ games: activeGame });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const session = await getSessionFromRequest(request);\n  const formdata = await request.formData();\n  const uuid = formdata.get(\"uuid\");\n  const entries = Object.fromEntries(formdata);\n  delete entries.uuid;\n\n  try {\n    await APIServer.clientFromSession(session).request(\n      APIServer.updateProfile(entries)\n    );\n    if (entries.gameProfiles) {\n      await APIServer.clientFromSession(session).request(\n        APIServer.updateGameProfile({ gameProfiles: entries.gameProfiles })\n      );\n    }\n    const { data } = await APIServer.clientFromSession(session).request(\n      APIServer.me()\n    );\n\n    session.set(\"me\", data);\n    session.flash(\"flashMessage\", {\n      type: \"success\",\n      message: `successfully update profile`,\n    });\n  } catch (e: any) {\n    session.flash(\"flashMessage\", {\n      type: \"error\",\n      message:\n        // e.errors && e.errors.length > 1 ? e.errors[0] : e.response.data.message,\n        \"please enter username\",\n    });\n  }\n\n  return redirect(`/users/${uuid}`, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n};\n\n// Modal properties\nconst modalProps = {\n  closeIcon: false,\n  footer: null,\n  modalRender: (modal: any) => modal,\n};\n\nexport default function SettingsProfile() {\n  const { t } = useTranslation();\n  const { games } = useLoaderData();\n  const submit = useSubmit();\n  const { user } = useContext(AuthContext);\n  const [form] = Form.useForm();\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const socials = [\"discord\", \"twitch\", \"facebook\", \"x\"];\n  const [sortingModal, setSortingModal] = useState<boolean>(false);\n  const [textEditorLoading, setTextEditorLoading] = useState<boolean>(true);\n\n  const updatedArray = user.profile.sortOrder.map((item: any, index: any) => {\n    return { ...item, id: index + 1 };\n  });\n\n  const [sortOrderList, setSortOrderList] = useState<any>(updatedArray);\n\n  const fetcher = useFetcher();\n  let initialValues: any = null;\n  if (user) {\n    initialValues = {\n      displayName: user.displayName ? user.displayName : \"\",\n      userName: user?.userName ? user.userName : undefined,\n      bio: user.profile.bio ? user.profile.bio : \"\",\n      profileEmail: user.profile.profileEmail ? user.profile.profileEmail : \"\",\n      privateEmail:\n        user.profile.privateEmail === \"public\" ? \"public\" : \"private\",\n      profilePhoneNumber: user.profile.profilePhoneNumber\n        ? user.profile.profilePhoneNumber\n        : \"\",\n      privatePhone:\n        user.profile.privatePhone === \"public\" ? \"public\" : \"private\",\n      websiteUrl: user.profile.websiteUrl ? user.profile.websiteUrl : \"\",\n      privateWebsite:\n        user.profile.privateWebsite === \"public\" ? \"public\" : \"private\",\n      discordId: user.profile.discordId ? user.profile.discordId : \"\",\n      privateDiscordId:\n        user.profile.privateDiscordId === \"public\" ? \"public\" : \"private\",\n      facebookLink: user.profile.facebookLink ? user.profile.facebookLink : \"\",\n      privateFacebookLink:\n        user.profile.privateFacebookLink === \"public\" ? \"public\" : \"private\",\n      twitchLink: user.profile.twitchLink ? user.profile.twitchLink : \"\",\n      privateTwitchLink:\n        user.profile.privateTwitchLink === \"public\" ? \"public\" : \"private\",\n      xLink: user.profile.xLink ? user.profile.xLink : \"\",\n      privateXLink:\n        user.profile.privateXLink === \"public\" ? \"public\" : \"private\",\n    } as any;\n    if (games && games.length > 0 && user.userGames) {\n      games.map((game: any) => {\n        initialValues[`username-${game.id}`] = user.userGames.find(\n          (userGame: any) => userGame.gameId == game.id\n        )?.ign;\n        return null;\n      });\n    }\n  }\n  const [userName, setUserName] = useState<string>(initialValues?.userName);\n  const handleUserNameChange = (e: any) => {\n    setUserName(e.target.value);\n  };\n\n  const handleToggleSortingMode = () => {\n    setSortingModal(!sortingModal);\n  };\n\n  const onChangeSortItems = (items: any) => {\n    setSortOrderList(items);\n  };\n\n  const onCloseSortingModal = () => {\n    setSortingModal(false);\n  };\n\n  const handleSubmitSorting = () => {\n    setSortingModal(false);\n    const itemsId = {\n      order: sortOrderList.map((item: any, index: number) => item.name),\n    };\n\n    fetcher.submit(\n      {\n        data: JSON.stringify(itemsId),\n        uuid: user.uuid,\n      },\n      {\n        method: \"post\",\n        action: `/resources/sorting-profile`,\n      }\n    );\n  };\n\n  const onSubmit = (values: any) => {\n    const result: any = {};\n    Object.keys(values).map((key: string) => {\n      if (values.hasOwnProperty(key)) {\n        const parts = key.split(\"-\");\n        if (parts.length === 1) {\n          result[key] = values[key];\n        } else {\n          switch (parts[0]) {\n            // case \"username\":\n            //   if (!result.userGames) {\n            //     result.userGames = {};\n            //   }\n            //   result.userGames[parts[1]] = values[key];\n            //   break;\n            case \"private\":\n              if (!result.privateFields) {\n                result.privateFields = [];\n              }\n              if (values[key] === \"private\") {\n                result.privateFields.push(parts[1]);\n              }\n              break;\n          }\n        }\n      }\n    });\n    const gamesData = [];\n    for (const key in values) {\n      if (key.startsWith(\"username-\")) {\n        const idKey = key.replace(\"username-\", \"gameId\");\n        const gameId = values[idKey];\n        gamesData.push({ ign: values[key], gameId: gameId });\n      }\n    }\n\n    submit(\n      {\n        ...result,\n        userName: userName,\n        uuid: user.uuid,\n        gameProfiles: JSON.stringify(gamesData),\n        gameCount: gamesData.length,\n      },\n      { method: \"post\" }\n    );\n  };\n\n  useEffect(() => {\n    setTextEditorLoading(false);\n  }, []);\n\n  return (\n    <div style={{ maxWidth: 600 }}>\n      <Title level={2} style={{ marginTop: 0, marginBottom: 40 }}>\n        {t(\"profile\")}\n      </Title>\n      <Form\n        form={form}\n        onFinish={onSubmit}\n        layout=\"vertical\"\n        initialValues={initialValues}\n      >\n        <Space direction=\"vertical\" size={10} style={{ display: \"flex\" }}>\n          <Form.Item\n            name=\"displayName\"\n            rules={[\n              {\n                required: true,\n                message: t(\"please input display name\"),\n              },\n              () => ({\n                validator(_, value) {\n                  if (!value) {\n                    return Promise.resolve();\n                  }\n                  if (value.length && value.length > 20) {\n                    return Promise.reject(\n                      new Error(\n                        `${t(\n                          \"display name is too long (maximum 20 characters)\"\n                        )}`\n                      )\n                    );\n                  }\n                  return Promise.resolve();\n                },\n              }),\n            ]}\n            label={\n              <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                {t(\"display name\")}\n              </Text>\n            }\n          >\n            <Input />\n          </Form.Item>\n          {!textEditorLoading ? (\n            <Space size={10} direction=\"vertical\" style={{ display: \"flex\" }}>\n              <Form.Item\n                key=\"bio\"\n                name=\"bio\"\n                label={\n                  <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                    {t(\"bio\")}\n                  </Text>\n                }\n              >\n                <TextEditorNoTools\n                  id=\"bio\"\n                  initialValues={form.getFieldValue(\"bio\")}\n                  fetcher={fetcher}\n                  onChange={(values: any) => form.setFieldValue(\"bio\", values)}\n                />\n              </Form.Item>\n            </Space>\n          ) : (\n            <Result icon={<LoadingOutlined style={{ fontSize: 24 }} spin />} />\n          )}\n          {/* <Form.Item\n            name=\"bio\"\n            label={\n              <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                {t(\"bio\")}\n              </Text>\n            }\n          >\n            <Input.TextArea rows={6} />\n          </Form.Item> */}\n          <Form.Item\n            name=\"profileEmail\"\n            label={\n              <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                {t(\"email\")}\n              </Text>\n            }\n          >\n            <Input\n              type=\"email\"\n              addonAfter={<PrivateFieldSelection fieldName=\"privateEmail\" />}\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"profilePhoneNumber\"\n            label={\n              <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                {t(\"phone\")}\n              </Text>\n            }\n          >\n            <Input\n              type=\"tel\"\n              addonAfter={<PrivateFieldSelection fieldName=\"privatePhone\" />}\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"websiteUrl\"\n            label={\n              <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                {t(\"website\")}\n              </Text>\n            }\n          >\n            <Input\n              type=\"website\"\n              addonAfter={<PrivateFieldSelection fieldName=\"privateWebsite\" />}\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"userName\"\n            label={\n              <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                {t(\"user url\")}\n              </Text>\n            }\n            rules={[\n              {\n                pattern: /^[A-Za-z0-9]*$/,\n                message: t(\n                  \"only english characters and numbers are allowed, and no spaces\"\n                ),\n              },\n              {\n                min: 5,\n                message: t(\"username must be more than 5 characters\"),\n              },\n              {\n                max: 30,\n                message: t(\"username can't be more than 30 characters\"),\n              },\n            ]}\n          >\n            <div style={{ display: \"flex\", width: \"100%\" }}>\n              <div style={{ marginTop: \"7px\", marginRight: \"9px\" }}>\n                ctrlg.gg/users/\n              </div>\n              <div style={{ width: \"100%\" }}>\n                <Form.Item name=\"userName\" noStyle>\n                  <Input\n                    placeholder={t(\"username\")}\n                    value={userName}\n                    onChange={handleUserNameChange}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n              </div>\n            </div>\n          </Form.Item>\n          <div style={{ marginTop: \"7px\", color: \"#C7C8CC\" }}>\n            <ul>\n              <li>{t(\"only english characters and numbers are allowed\")}</li>\n              <li>{t(\"spaces are not allowed\")}</li>\n              <li>{t(\"must contain 5-30 characters\")}</li>\n            </ul>\n          </div>\n          <label style={{ marginTop: \"0\", display: \"flex\", paddingBottom: 5 }}>\n            <Text\n              style={{\n                fontWeight: 600,\n                fontSize: \"inherit\",\n              }}\n            >\n              {t(\"social accounts\")}\n            </Text>\n          </label>\n          {socials.map((social: string) => (\n            <Form.Item\n              key={social === \"discord\" ? `${social}Id` : `${social}Link`}\n              name={social === \"discord\" ? `${social}Id` : `${social}Link`}\n            >\n              <Input\n                addonBefore={\n                  <Avatar src={`image/social/${social}.png`} size={40} />\n                }\n                placeholder={\n                  social === \"discord\"\n                    ? `Discord ID`\n                    : `https://www.${social}.com/username`\n                }\n                addonAfter={\n                  <PrivateFieldSelection\n                    fieldName={`private${\n                      social === \"discord\"\n                        ? `${\n                            social.charAt(0).toUpperCase() + social.slice(1)\n                          }Id`\n                        : `${\n                            social.charAt(0).toUpperCase() + social.slice(1)\n                          }Link`\n                    }`}\n                  />\n                }\n              />\n            </Form.Item>\n          ))}\n          <Flex justify=\"space-between\" style={{ marginBottom: 0 }}>\n            <div>\n              <Text\n                style={{\n                  fontWeight: 600,\n                  fontSize: \"inherit\",\n                  marginRight: \"10px\",\n                }}\n              >\n                {t(\"display order\")}\n              </Text>\n            </div>\n            <Text\n              style={{\n                marginRight: 10,\n                marginTop: 0,\n                fontWeight: 600,\n                textAlign: \"center\",\n                cursor: \"pointer\",\n              }}\n              onClick={handleToggleSortingMode}\n            >\n              <Space>\n                <ArrowUpDown style={{ color: \"#7C6FF6\", fontSize: \"1.2em\" }} />\n                {t(\"sort order\")}\n              </Space>\n            </Text>\n          </Flex>\n          <Space direction=\"vertical\">\n            {sortOrderList.map((profile: any, index: number) => (\n              <div key={index}>\n                {index + 1}. {t(profile.name)}\n              </div>\n            ))}\n          </Space>\n          {/* {games.length > 0 && (\n            <>\n              <label style={{ display: \"flex\", paddingBottom: 5 }}>\n                <Text\n                  style={{\n                    fontWeight: 600,\n                    fontSize: \"inherit\",\n                  }}\n                >\n                  {t(\"game usernames\")}\n                </Text>\n              </label>\n              {games.map((game: any, index: number) => (\n                <div key={`game-username-${index}`}>\n                  <Form.Item name={`username-${game.id}`}>\n                    <Input\n                      addonBefore={\n                        <Avatar\n                          src={\n                            game.iconUrl\n                              ? `${cdnUrl}/${game.iconUrl}`\n                              : \"/image/placeholder.png\"\n                          }\n                          size={40}\n                        />\n                      }\n                    />\n                  </Form.Item>\n                  <Form.Item\n                    name={`gameId${game.id}`}\n                    initialValue={game.id}\n                    style={{ display: \"none\" }}\n                  >\n                    <Input type=\"hidden\" />\n                  </Form.Item>\n                </div>\n              ))}\n            </>\n          )} */}\n          <TiltButton\n            color=\"primary\"\n            onClick={() => form.submit()}\n            style={{ marginTop: 20 }}\n          >\n            {t(\"save\")}\n          </TiltButton>\n        </Space>\n      </Form>\n      <Modal\n        {...modalProps}\n        onCancel={() => setSortingModal(false)}\n        open={sortingModal}\n      >\n        <div\n          style={{\n            marginTop: \"15px\",\n          }}\n        >\n          <Text style={{ fontSize: \"24px\", fontWeight: \"600\" }}>\n            {t(\"sorting order\")}\n          </Text>\n          <Divider style={{ margin: 7 }} />\n          <SortableList\n            items={sortOrderList}\n            onChange={onChangeSortItems}\n            renderItem={(item: any, items: any[]) => (\n              <SortableList.Item id={item.id}>\n                <div style={{ position: \"relative\", margin: \"15px\" }}>\n                  <div style={{ position: \"absolute\", zIndex: 1000 }}>\n                    {<SortableList.DragHandle />}\n                  </div>\n                  <TiltButton color=\"gray\">{t(`${item.name}`)}</TiltButton>\n                </div>\n              </SortableList.Item>\n            )}\n          />\n          <Row gutter={10} style={{ marginTop: 30 }}>\n            <Col span={12}>\n              <TiltButton color=\"secondary\" onClick={onCloseSortingModal}>\n                {t(\"cancel\")}\n              </TiltButton>\n            </Col>\n            <Col span={12}>\n              <TiltButton color=\"primary\" onClick={handleSubmitSorting}>\n                {t(\"save\")}\n              </TiltButton>\n            </Col>\n          </Row>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n", "import { Form, Select, Space, Tooltip, Typography } from \"antd\";\nimport { useTranslation } from \"react-i18next\";\nimport { Globe, Lock } from \"lucide-react\";\nconst { Text } = Typography;\n\ninterface PrivateFieldSelectionProps {\n  fieldName: string;\n}\n\nexport function PrivateFieldSelection(props: PrivateFieldSelectionProps) {\n  const { fieldName } = props;\n  const { t } = useTranslation();\n\n  return (\n    <Form.Item name={fieldName} style={{ marginBottom: 0 }}>\n      <Select\n        style={{ width: 60 }}\n        dropdownStyle={{ minWidth: 120 }}\n        optionLabelProp=\"selectedLabel\"\n        options={[\n          {\n            selectedLabel: (\n              <Tooltip placement=\"bottom\" title={t(\"private\")} arrow={false}>\n                <Lock size={17} style={{ color: \"#7a6fee\" }} />\n              </Tooltip>\n            ),\n            value: \"private\",\n            label: (\n              <Space size={10}>\n                <Lock size={17} style={{ color: \"#7a6fee\" }} />\n                <Text style={{ color: \"#7a6fee\" }}>{t(\"private\")}</Text>\n              </Space>\n            ),\n          },\n          {\n            selectedLabel: (\n              <Tooltip placement=\"bottom\" title={t(\"public\")} arrow={false}>\n                <Globe size={17} style={{ color: \"#7a6fee\" }} />\n              </Tooltip>\n            ),\n            value: \"public\",\n            label: (\n              <Space size={10}>\n                <Globe size={17} style={{ color: \"#7a6fee\" }} />\n                <Text style={{ color: \"#7a6fee\" }}>{t(\"public\")}</Text>\n              </Space>\n            ),\n          },\n        ]}\n      />\n    </Form.Item>\n  );\n}\n", "import { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport ReactQuill, { Quill } from \"react-quill\";\nimport { notification } from \"antd\";\nimport { encode } from \"base64-arraybuffer\";\nimport { isPermalink } from \"~/utils/helper\";\n\n// const { useToken } = theme;\n\ninterface TextEditorNoToolsProps {\n  disabled?: boolean;\n  id: string;\n  initialValues?: any;\n  fetcher: any;\n  onChange: (content: any) => void;\n}\n\nconst BlockEmbed = Quill.import(\"blots/block/embed\");\n\nclass Video extends BlockEmbed {\n  static create(value: any) {\n    let node = super.create(value);\n    let iframe = document.createElement(\"iframe\");\n    iframe.setAttribute(\"frameborder\", \"0\");\n    iframe.setAttribute(\"allowfullscreen\", \"true\");\n    iframe.setAttribute(\"src\", value);\n    node.appendChild(iframe);\n    return isPermalink(value) ? node : null;\n  }\n\n  static value(domNode: any) {\n    if (domNode && domNode.firstChild) {\n      return domNode.firstChild.getAttribute(\"src\");\n    }\n  }\n}\nVideo.blotName = \"video\";\nVideo.className = \"ql-video\";\nVideo.tagName = \"div\";\n\nQuill.register({\n  \"formats/video\": Video,\n});\n\nexport function TextEditorNoTools(props: TextEditorNoToolsProps) {\n  const { t } = useTranslation();\n  // const { token } = useToken();\n  const elRefs: any = useRef([]);\n  const { disabled, id, initialValues, fetcher, onChange } = props;\n  const imageFieldName = `${id}-editor-image`;\n  const [messageApi, contextHolder] = notification.useNotification();\n  const [uploading, setUploading] = useState<boolean>(false);\n\n  const setButtonTitle = () => {\n    const toolbarElements = document.querySelectorAll(\n      '.ql-toolbar button[class*=\"ql-\"], .ql-toolbar span.ql-picker.ql-color-picker'\n    );\n    let title = \"\";\n    toolbarElements.forEach((element) => {\n      if (element.tagName.toLowerCase() === \"button\") {\n        const { className } = element;\n        title = className.split(\"ql-\")[1].split(\" \")[0]; // Split by 'ql-' and take the first part\n        title = title.charAt(0).toUpperCase() + title.slice(1);\n        const value = element.getAttribute(\"value\");\n        title = t(`${title}${value ? `: ${value}` : \"\"}`);\n      } else if (\n        element.tagName.toLowerCase() === \"span\" &&\n        element.className.includes(\"ql-picker\")\n      ) {\n        title = element.className.split(\" \")[0];\n        title = title.split(\"ql-\")[1];\n        title = title.charAt(0).toUpperCase() + title.slice(1);\n        title = t(`${title} picker`);\n      }\n      if (title.length > 0 && title !== \"Video\") {\n        element.innerHTML += `<span class=\"text-editor-tooltip\">${t(\n          title\n        )}</span>`;\n      } else if (title === \"Video\") {\n        element.innerHTML += `<span class=\"text-editor-tooltip\">${t(\n          \"Video (YouTube supported)\"\n        )}</span>`;\n      }\n    });\n  };\n\n  const handleImageUpload = (e: any) => {\n    if (e.target.files[0].size > 2000000) {\n      messageApi.open({\n        type: \"error\",\n        message: t(\"file upload failed due to too large image size\"),\n        duration: 5,\n        placement: \"bottomRight\",\n      });\n      return;\n    }\n    setUploading(true);\n    const reader = new FileReader();\n    reader.onload = (event: any) => {\n      e.target.files[0].base64 = reader.result;\n      if (e.target.files[0].base64) {\n        fetcher.submit(\n          {\n            name: e.target.files[0].name,\n            size: e.target.files[0].size,\n            type: e.target.files[0].type,\n            file: encode(e.target.files[0].base64),\n            field: imageFieldName,\n          },\n          {\n            method: \"put\",\n            action: \"/resources/upload\",\n            encType: \"multipart/form-data\",\n          }\n        );\n      }\n    };\n    reader.readAsArrayBuffer(e.target.files[0]);\n  };\n\n  const imageHandler = (e: any) => {\n    elRefs.current[1].click();\n  };\n\n  const modules = useMemo(\n    () => ({\n      toolbar: false,\n    }),\n    []\n  );\n\n  useEffect(() => {\n    setButtonTitle();\n  }, []);\n\n  useEffect(() => {\n    if (\n      fetcher.data &&\n      fetcher.data.field &&\n      fetcher.data.field === imageFieldName &&\n      fetcher.data.url\n    ) {\n      setUploading(false);\n      const editor = elRefs.current[0].getEditor();\n      editor.insertEmbed(\n        editor.getSelection(true).index,\n        \"image\",\n        fetcher.data.url\n      );\n    }\n  }, [fetcher.data]);\n\n  return (\n    <>\n      <ReactQuill\n        id={id}\n        className=\"text-editor text-editor-no-tools ctrlg-html\"\n        theme=\"snow\"\n        readOnly={disabled}\n        modules={modules}\n        // placeholder={t(\"write your content ...\")}\n        onChange={onChange}\n        defaultValue={initialValues}\n        ref={(el: any) => (elRefs.current[0] = el)}\n      />\n      <input\n        type=\"file\"\n        name=\"image\"\n        disabled={uploading}\n        style={{ display: \"none\" }}\n        accept=\"image/*\"\n        onChange={handleImageUpload}\n        ref={(el: any) => (elRefs.current[1] = el)}\n      />\n      {contextHolder}\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "ReactQuill", "import_jsx_dev_runtime", "Text", "Text"]
}
