{
  "version": 3,
  "sources": ["../../../app/routes/_app.users.$uuid.my-conversations.comments.tsx"],
  "sourcesContent": ["import { json, type LoaderFunction } from \"@remix-run/node\";\nimport {\n  useFetcher,\n  useLoaderData,\n  useLocation,\n  useNavigation,\n  useRevalidator,\n  useSubmit,\n} from \"@remix-run/react\";\nimport { notification, Skeleton } from \"antd\";\nimport { isEmpty, isNil, omitBy } from \"lodash\";\nimport { useCallback, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport * as APIServer from \"~/api\";\nimport { dummyComments, Pagination } from \"~/components/common\";\nimport { WebboardLists } from \"~/components/pages/Webboard\";\nimport { getSessionFromRequest } from \"~/session.server\";\nimport { resetFetcher } from \"~/utils/helper\";\n\nexport const loader: LoaderFunction = async ({ params, request }) => {\n  const { uuid } = params;\n  const session = await getSessionFromRequest(request);\n  const url = new URL(request.url) as any;\n  const searchParams = Object.fromEntries(url.searchParams);\n  let commentRes: any;\n  let comments: any;\n  const me = session.get(\"me\");\n\n  try {\n    if (uuid !== undefined) {\n      if (me) {\n        commentRes = await APIServer.clientFromSession(session).request(\n          APIServer.getMyComments(uuid, searchParams)\n        );\n      } else {\n        commentRes = await APIServer.clientFromSession().request(\n          APIServer.getMyComments(uuid, searchParams)\n        );\n      }\n\n      if (commentRes.data) {\n        comments = commentRes.data;\n      }\n    }\n  } catch (e) {\n    comments = dummyComments; // FIXME: remove this out\n    console.log(\"my comments error\", e);\n  }\n  return json({ searchParams, comments });\n};\n\nexport default function UserMyComments() {\n  const { searchParams, comments } = useLoaderData();\n  const revalidator = useRevalidator();\n  const fetcher = useFetcher();\n  const submit = useSubmit();\n  const { t } = useTranslation();\n  const location = useLocation();\n  const navigation = useNavigation();\n  const [api, contextHolder] = notification.useNotification();\n\n  const handleChangePage = useCallback(\n    (page: number) => {\n      const newSearchParams = { ...searchParams } as any;\n      if (page === 1) {\n        delete newSearchParams[\"page\"];\n      } else {\n        newSearchParams[\"page\"] = `${page}`;\n      }\n      submit(\n        omitBy(newSearchParams, (v) => isNil(v) && isEmpty(v)),\n        { method: \"get\" }\n      );\n    },\n    [searchParams, submit]\n  );\n\n  useEffect(() => {\n    if (\n      fetcher &&\n      fetcher.data &&\n      fetcher.state === \"idle\" &&\n      revalidator.state === \"idle\"\n    ) {\n      if (fetcher.data.success && fetcher.data.success === \"delete-webboard\") {\n        revalidator.revalidate();\n        resetFetcher(fetcher);\n        api.open({\n          message: t(\"successfully deleted post\"),\n          type: \"success\",\n          duration: 5,\n          placement: \"bottomRight\",\n        });\n      }\n    }\n  }, [fetcher, revalidator]);\n\n  return (\n    <>\n      {navigation.state === \"loading\" &&\n      navigation.location.pathname === location.pathname ? (\n        <Skeleton active />\n      ) : (\n        <>\n          <WebboardLists\n            data={comments.items}\n            fetcher={fetcher}\n            isMyWebboard={true}\n          />\n          <Pagination\n            currentPage={comments.page}\n            totalPages={comments.totalPages}\n            onPageClicked={handleChangePage}\n          />\n        </>\n      )}\n      {contextHolder}\n    </>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kBAA0C;AAU1C,oBAAuC;AACvC,IAAAA,gBAAuC;AAKvC,qBAAsC;AAqF9B;AAlDO,SAAR,iBAAkC;AACvC,QAAM,EAAE,cAAc,SAAS,IAAI,cAAc;AACjD,QAAM,cAAc,eAAe;AACnC,QAAM,UAAU,WAAW;AAC3B,QAAM,SAAS,UAAU;AACzB,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,WAAW,YAAY;AAC7B,QAAM,aAAa,cAAc;AACjC,QAAM,CAAC,KAAK,aAAa,IAAI,qBAAa,gBAAgB;AAE1D,QAAM,uBAAmB;AAAA,IACvB,CAAC,SAAiB;AAChB,YAAM,kBAAkB,EAAE,GAAG,aAAa;AAC1C,UAAI,SAAS,GAAG;AACd,eAAO,gBAAgB,MAAM;AAAA,MAC/B,OAAO;AACL,wBAAgB,MAAM,IAAI,GAAG;AAAA,MAC/B;AACA;AAAA,YACE,sBAAO,iBAAiB,CAAC,UAAM,qBAAM,CAAC,SAAK,uBAAQ,CAAC,CAAC;AAAA,QACrD,EAAE,QAAQ,MAAM;AAAA,MAClB;AAAA,IACF;AAAA,IACA,CAAC,cAAc,MAAM;AAAA,EACvB;AAEA,+BAAU,MAAM;AACd,QACE,WACA,QAAQ,QACR,QAAQ,UAAU,UAClB,YAAY,UAAU,QACtB;AACA,UAAI,QAAQ,KAAK,WAAW,QAAQ,KAAK,YAAY,mBAAmB;AACtE,oBAAY,WAAW;AACvB,qBAAa,OAAO;AACpB,YAAI,KAAK;AAAA,UACP,SAAS,EAAE,2BAA2B;AAAA,UACtC,MAAM;AAAA,UACN,UAAU;AAAA,UACV,WAAW;AAAA,QACb,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF,GAAG,CAAC,SAAS,WAAW,CAAC;AAEzB,SACE,sFACG;AAAA,eAAW,UAAU,aACtB,WAAW,SAAS,aAAa,SAAS,WACxC,mDAAC,oBAAS,QAAM,QAAhB;AAAA;AAAA;AAAA;AAAA,WAAiB,IAEjB,sFACE;AAAA;AAAA,QAAC;AAAA;AAAA,UACC,MAAM,SAAS;AAAA,UACf;AAAA,UACA,cAAc;AAAA;AAAA,QAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA;AAAA,MACA;AAAA,QAAC;AAAA;AAAA,UACC,aAAa,SAAS;AAAA,UACtB,YAAY,SAAS;AAAA,UACrB,eAAe;AAAA;AAAA,QAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA;AAAA,SAVF;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,IAED;AAAA,OAlBH;AAAA;AAAA;AAAA;AAAA,SAmBA;AAEJ;",
  "names": ["import_react"]
}
