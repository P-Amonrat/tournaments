{
  "version": 3,
  "sources": ["../../../app/routes/_app.tournaments.$id._index.tsx", "../../../app/components/common/CardWithLabel.tsx", "../../../app/components/pages/Tournament/TournamentSingleRewards.tsx"],
  "sourcesContent": ["import { useRouteLoaderData } from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport dayjs from \"dayjs\";\nimport { Col, Row, Space, theme, Typography } from \"antd\";\nimport { CalendarOutlined, EnvironmentOutlined } from \"@ant-design/icons\";\nimport { CardWithLabel } from \"~/components/common\";\nimport { TournamentSingleRewards } from \"~/components/pages/Tournament\";\nimport { useContext } from \"react\";\nimport { AppContext } from \"~/contexts\";\nimport { renderData } from \"~/utils/helper\";\nconst { useToken } = theme;\n\nconst { Text, Title } = Typography;\n\nexport default function TournamentSingleDetail() {\n  const routeLoader = useRouteLoaderData(\"routes/_app.tournaments.$id\");\n  const { tournament } = routeLoader;\n  const { locale } = useContext(AppContext);\n  const { t } = useTranslation();\n  const { token } = useToken();\n\n  return (\n    <Space direction=\"vertical\" size={20} style={{ display: \"flex\" }}>\n      <TournamentSingleRewards reward={tournament.prize} />\n      <Row gutter={[20, 20]}>\n        <Col span={24} md={12}>\n          <CardWithLabel\n            label={t(\"tournament date\")}\n            detail={`${dayjs(tournament.startDate).format(\"DD MMM\")} - ${dayjs(\n              tournament.endDate\n            ).format(\"DD MMM\")}`}\n            icon={<CalendarOutlined style={{ color: \"#8861f2\" }} />}\n          />\n        </Col>\n        <Col span={24} md={12}>\n          <CardWithLabel\n            label={t(\"tournament location\")}\n            detail={\n              tournament.finalRoundLocation\n                ? renderData(tournament, \"finalRoundLocation\", locale)\n                : \"-\"\n            }\n            icon={<EnvironmentOutlined style={{ color: \"#8861f2\" }} />}\n          />\n        </Col>\n      </Row>\n      <Space\n        size={10}\n        direction=\"vertical\"\n        style={{ display: \"flex\", marginTop: 20 }}\n      >\n        <Title level={4}>{t(\"detail_2\")}</Title>\n        <div\n          className=\"ctrlg-html\"\n          style={{ color: token.colorTextBase }}\n          dangerouslySetInnerHTML={{\n            __html: `${renderData(tournament, \"description\", locale)}`,\n          }}\n        />\n      </Space>\n      <Space\n        size={10}\n        direction=\"vertical\"\n        style={{ display: \"flex\", marginTop: 20 }}\n      >\n        <Title level={4}>{t(\"rules\")}</Title>\n        <Text>\n          <div\n            className=\"ctrlg-html\"\n            style={{ color: token.colorTextBase }}\n            dangerouslySetInnerHTML={{\n              __html: renderData(tournament, \"qualificationRules\", locale),\n            }}\n          />\n        </Text>\n      </Space>\n    </Space>\n  );\n}\n", "import { Card, Space, Typography } from \"antd\";\nimport React from \"react\";\n\nconst { Text } = Typography;\n\ninterface CardWithLabelProps {\n  icon?: React.ReactNode;\n  label: React.ReactNode;\n  detail: React.ReactNode;\n}\n\nexport function CardWithLabel(props: CardWithLabelProps) {\n  const { icon, label, detail } = props;\n\n  return (\n    <Card\n      style={{\n        height: \"100%\",\n        backgroundColor: \"transparent\",\n        border: \"1px solid #dfdfdf\",\n      }}\n      bodyStyle={{ padding: 15 }}\n    >\n      <Space direction=\"vertical\">\n        <Space size={10} style={{ fontWeight: 600 }}>\n          {icon && icon}\n          {label}\n        </Space>\n        <Text>{detail}</Text>\n      </Space>\n    </Card>\n  );\n}\n", "import { Card, Col, Row, Space, theme, Typography } from \"antd\";\nimport { toNumber } from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\nconst { useToken } = theme;\nconst { Text, Title } = Typography;\n\ninterface TournamentSingleRewardsProps {\n  reward: any[];\n}\n\nexport function TournamentSingleRewards(props: TournamentSingleRewardsProps) {\n  const { t } = useTranslation();\n  const { reward } = props;\n  const { token } = useToken();\n\n  return (\n    <Row\n      style={{\n        position: \"relative\",\n        paddingBottom: \"5px\",\n        // paddingBlock: 20,\n        // paddingInline: \"3.5%\",\n        overflowX: \"auto\",\n        scrollbarColor: \"#999 transparent\",\n        scrollbarWidth: \"thin\",\n      }}\n      gutter={[20, 20]}\n      wrap={false}\n    >\n      {reward\n        .filter((r: any) => r !== \"\") // Filter out rewards with empty string values\n        .map((r: any, index: number) => (\n          <Col\n            span={reward.length >= 3 ? 8 : 24 / reward.length}\n            key={`reward-${index}`}\n          >\n            <Card\n              bordered={false}\n              bodyStyle={{ padding: 15 }}\n              style={{\n                height: \"100%\",\n                borderRadius: 10,\n                backgroundColor:\n                  index === 0\n                    ? \"#8861f2\"\n                    : index === 1\n                    ? token.colorPrimary\n                    : token.colorBgBase,\n              }}\n            >\n              <Space direction=\"vertical\">\n                <Text\n                  style={\n                    index === 0\n                      ? { color: \"#fff\" }\n                      : index === 1\n                      ? { color: \"#000\" }\n                      : {}\n                  }\n                >\n                  {`${t(\"reward #\")} ${index + 1}`}\n                </Text>\n                <Title\n                  level={3}\n                  style={\n                    index === 0\n                      ? { color: \"#fff\", margin: 0 }\n                      : index === 1\n                      ? { color: \"#000\", margin: 0 }\n                      : { margin: 0 }\n                  }\n                >\n                  {toNumber(r)\n                    ? `${toNumber(r).toLocaleString()} ${t(\"thb\")}`\n                    : r}\n                </Title>\n              </Space>\n            </Card>\n          </Col>\n        ))}\n    </Row>\n    // <Row gutter={[20, 20]}>\n    //   {reward\n    //     .filter((r: any) => r !== \"\") // Filter out rewards with empty string values\n    //     .map((r: any, index: number) => (\n    //       <Col span={24} md={columnWidth} key={`reward-${index}`}>\n    //         <Card\n    //           bordered={false}\n    //           bodyStyle={{ padding: 15 }}\n    //           style={{\n    //             height: \"100%\",\n    //             borderRadius: 10,\n    //             backgroundColor:\n    //               index === 0\n    //                 ? \"#8861f2\"\n    //                 : index === 1\n    //                 ? token.colorPrimary\n    //                 : token.colorBgBase,\n    //           }}\n    //         >\n    //           <Space direction=\"vertical\">\n    //             <Text\n    //               style={\n    //                 index === 0\n    //                   ? { color: \"#fff\" }\n    //                   : index === 1\n    //                   ? { color: \"#000\" }\n    //                   : {}\n    //               }\n    //             >\n    //               {`${t(\"reward #\")} ${index + 1}`}\n    //             </Text>\n    //             <Title\n    //               level={3}\n    //               style={\n    //                 index === 0\n    //                   ? { color: \"#fff\", margin: 0 }\n    //                   : index === 1\n    //                   ? { color: \"#000\", margin: 0 }\n    //                   : { margin: 0 }\n    //               }\n    //             >{`${toNumber(r).toLocaleString()} ${t(\"thb\")}`}</Title>\n    //           </Space>\n    //         </Card>\n    //       </Col>\n    //     ))}\n    // </Row>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_jsx_dev_runtime", "Text", "import_react", "import_jsx_dev_runtime", "useToken", "Text", "Title", "dayjs"]
}
