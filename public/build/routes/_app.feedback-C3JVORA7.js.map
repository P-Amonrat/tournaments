{
  "version": 3,
  "sources": ["../../../app/routes/_app.feedback.tsx"],
  "sourcesContent": ["import type { ActionFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  useActionData,\n  useFetcher,\n  useMatches,\n  useSubmit,\n} from \"@remix-run/react\";\nimport {\n  Card,\n  Flex,\n  Form,\n  Image,\n  Input,\n  notification,\n  Result,\n  Space,\n  Typography,\n} from \"antd\";\nimport { UploadOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FileUploader, TiltButton } from \"~/components/common\";\nimport { AuthContext } from \"~/contexts\";\nimport { commitSession, getSessionFromRequest } from \"~/session.server\";\nimport * as APIServer from \"~/api\";\n\nconst { Text, Title } = Typography;\n\nexport const action: ActionFunction = async ({ request }) => {\n  const session = await getSessionFromRequest(request);\n  const formdata = await request.formData();\n  const data = formdata.get(\"data\") as any;\n  const toSubmitData = JSON.parse(data);\n\n  try {\n    await APIServer.clientFromSession(session).request(\n      APIServer.submitFeedback(toSubmitData)\n    );\n    await commitSession(session);\n    return json({ success: true });\n  } catch (e: any) {\n    session.flash(\"flashMessage\", {\n      type: \"error\",\n      message: e.errors && e.errors.length > 1 ? e.errors[0] : e.response.data,\n    });\n    await commitSession(session);\n    return json({ success: false });\n  }\n};\n\nexport default function Feedback() {\n  const { t } = useTranslation();\n  const actionData = useActionData();\n  const matches = useMatches();\n  const submit = useSubmit();\n  const { cdnUrl } = matches[0].data;\n  const { user } = useContext(AuthContext);\n  const fetcher = useFetcher();\n  const [form] = Form.useForm();\n  const [messageApi, contextHolder] = notification.useNotification();\n  const [submitting, setSubmitting] = useState<boolean>(false);\n  const [uploading, setUploading] = useState<boolean>(false);\n  const [success, setSuccess] = useState<boolean>(false);\n  const [attachedImage, setAttachedImage] = useState<string>(\"\");\n\n  const handleSubmitFeedback = (values: any) => {\n    setSubmitting(true);\n    submit({ data: JSON.stringify(values) }, { method: \"post\" });\n  };\n\n  const handleFileTooLarge = () => {\n    messageApi.open({\n      type: \"error\",\n      message: t(\"file upload failed due to too large image size\"),\n      duration: 5,\n      placement: \"bottomRight\",\n    });\n  };\n\n  useEffect(() => {\n    if (fetcher.data && fetcher.data.field && fetcher.state) {\n      if (fetcher.data.field === \"image\") {\n        form.setFieldValue(\"image\", fetcher.data.key);\n        setAttachedImage(fetcher.data.key);\n      }\n      setUploading(false);\n    }\n  }, [form, fetcher.data]);\n\n  useEffect(() => {\n    if (actionData) {\n      setSubmitting(false);\n      if (actionData.success) {\n        setSuccess(true);\n      }\n    }\n  }, [actionData]);\n\n  return (\n    <div\n      style={{\n        paddingInline: \"3.5%\",\n        paddingBlock: 50,\n        maxWidth: 800,\n        marginInline: \"auto\",\n      }}\n    >\n      <Card bordered={false} bodyStyle={{ padding: 40 }}>\n        {success ? (\n          <Result status=\"success\" title={t(\"successfully sent feedback\")} />\n        ) : (\n          <>\n            <Title level={1} style={{ marginTop: 0, marginBottom: 30 }}>\n              {t(\"feedback\")}\n            </Title>\n            <Flex vertical gap={20} style={{ fontSize: 18 }}>\n              <Form\n                form={form}\n                onFinish={handleSubmitFeedback}\n                layout=\"vertical\"\n              >\n                <Form.Item\n                  key=\"message\"\n                  name=\"message\"\n                  rules={[\n                    {\n                      required: true,\n                      message: t(\"please input feedback message\"),\n                    },\n                  ]}\n                  label={\n                    <Text style={{ fontSize: 20, fontWeight: 600 }}>\n                      {t(\"message\")}\n                    </Text>\n                  }\n                >\n                  <Input.TextArea rows={4} disabled={!user || submitting} />\n                </Form.Item>\n                <Form.Item\n                  key=\"image\"\n                  name=\"image\"\n                  label={\n                    <Text style={{ fontSize: 20, fontWeight: 600 }}>\n                      {t(\"attachment image\")}\n                    </Text>\n                  }\n                >\n                  <FileUploader\n                    disabled={!user || uploading || submitting}\n                    fetcher={fetcher}\n                    fieldName={\"image\"}\n                    onUploading={setUploading}\n                    onErrorFileTooLarge={handleFileTooLarge}\n                  >\n                    {uploading ? (\n                      <Result\n                        icon={<LoadingOutlined style={{ fontSize: 24 }} spin />}\n                      />\n                    ) : attachedImage.length > 0 ? (\n                      <Image\n                        preview={false}\n                        style={{ maxWidth: 400, cursor: \"pointer\" }}\n                        src={`${cdnUrl}/${attachedImage}`}\n                      />\n                    ) : (\n                      <Space\n                        size={10}\n                        style={{\n                          padding: \"5px 15px\",\n                          backgroundColor: \"#e5e4e4\",\n                          color: \"#000\",\n                          borderRadius: 6,\n                          cursor: \"pointer\",\n                        }}\n                      >\n                        <UploadOutlined />\n                        {t(\"select file\")}\n                      </Space>\n                    )}\n                  </FileUploader>\n                </Form.Item>\n              </Form>\n              <Space>\n                <TiltButton\n                  color={\n                    user && !uploading && !submitting ? \"primary\" : \"secondary\"\n                  }\n                  onClick={\n                    user && !uploading && !submitting\n                      ? () => form.submit()\n                      : undefined\n                  }\n                  style={{ marginTop: 20 }}\n                >\n                  {user\n                    ? t(\"submit feedback\")\n                    : t(\"please login to submit feedback\")}\n                </TiltButton>\n              </Space>\n            </Flex>\n          </>\n        )}\n      </Card>\n      {contextHolder}\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react"]
}
