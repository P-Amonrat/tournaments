{
  "version": 3,
  "sources": ["../../../app/routes/_app.webboards.new.tsx"],
  "sourcesContent": ["import {\n  redirect,\n  type ActionFunction,\n  type LoaderFunction,\n  json,\n} from \"@remix-run/node\";\nimport { Affix, Col, Form, Modal, Row } from \"antd\";\nimport {\n  useFetcher,\n  useNavigation,\n  useRouteLoaderData,\n  useSubmit,\n} from \"@remix-run/react\";\nimport { KycForm, Media } from \"~/components/common\";\nimport { WebboardForm, WebboardTags } from \"~/components/pages/Webboard\";\nimport * as APIServer from \"~/api\";\nimport {\n  commitSession,\n  getSessionFromRequest,\n  mustAuthenticated,\n} from \"~/session.server\";\nimport { useState } from \"react\";\n// import { parseAndConvert } from \"~/utils/helper\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await mustAuthenticated(request);\n  try {\n    return null;\n  } catch (e) {\n    console.log(\"e\", e);\n  }\n  return null;\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  await mustAuthenticated(request);\n  const session = await getSessionFromRequest(request);\n  const formData = await request.formData();\n  const data = formData.get(\"data\") as string;\n  const toSubmitData = JSON.parse(data);\n  let webboard: any = null;\n\n  try {\n    const webboardRes = await APIServer.clientFromSession(session).request(\n      APIServer.createWebboard(toSubmitData)\n    );\n    if (webboardRes && webboardRes.data) {\n      webboard = webboardRes.data;\n    }\n    session.flash(\"flashMessage\", {\n      type: \"success\",\n      message: \"successfully create webboard\",\n    });\n  } catch (e: any) {\n    console.log(\"error from create\", e.response);\n\n    session.flash(\"flashMessage\", {\n      type: \"error\",\n      message: \"failed to create webboard\",\n    });\n  }\n  if (webboard) {\n    session.flash(\"backToIndex\", true);\n    return redirect(`/webboards/${webboard.id}`, {\n      headers: {\n        \"Set-Cookie\": await commitSession(session),\n      },\n    });\n  } else {\n    return json(\n      { success: false },\n      {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      }\n    );\n  }\n};\n\nexport default function WebboardNew() {\n  const webboardRouteLoader = useRouteLoaderData(\"routes/_app.webboards\");\n  const { games, rooms, tags, allTags } = webboardRouteLoader;\n  const fetcher = useFetcher();\n  const submit = useSubmit();\n  const [form] = Form.useForm();\n  const [kycModal, setKycModal] = useState<boolean>(false);\n  const navigation = useNavigation();\n  const navigationState = navigation.state;\n\n  const modalProps = {\n    closeIcon: false,\n    footer: null,\n    style: { backgroundColor: \"transparent\" },\n    styles: { body: { backgroundColor: \"transparent\" } },\n    modalRender: (modal: any) => modal,\n  };\n\n  const handleCreateWebboard = (values: any) => {\n    const newValues = { ...values };\n    if (!newValues.hasPoll) {\n      delete newValues.pollOptions;\n    }\n    delete newValues.hasPoll;\n\n    submit(\n      {\n        data: JSON.stringify(newValues),\n      },\n      { method: \"post\" }\n    );\n  };\n\n  return (\n    <div\n      style={{\n        paddingInline: \"3.5%\",\n        paddingBlock: 30,\n        maxWidth: 1440,\n        marginInline: \"auto\",\n      }}\n    >\n      <Row gutter={[30, 10]}>\n        <Col span={24} md={{ span: 6, order: 1 }}>\n          <Media greaterThan=\"sm\">\n            <Affix offsetTop={80}>\n              <div>\n                <WebboardTags data={tags} fetcher={fetcher} />\n              </div>\n            </Affix>\n          </Media>\n        </Col>\n        <Col span={24} md={{ span: 18, order: 0 }}>\n          <Form form={form} layout=\"vertical\" onFinish={handleCreateWebboard}>\n            <WebboardForm\n              fetcher={fetcher}\n              form={form}\n              games={games}\n              rooms={rooms}\n              tags={tags}\n              allTags={allTags}\n              onKycClicked={() => setKycModal(true)}\n              navigationState={navigationState}\n            />\n          </Form>\n        </Col>\n        <Modal\n          {...modalProps}\n          onCancel={() => setKycModal(false)}\n          open={kycModal}\n        >\n          <KycForm\n            fetcher={fetcher}\n            form={form}\n            loading={navigation.state !== \"idle\"}\n          />\n        </Modal>\n      </Row>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kBAKO;AAWP,qBAIO;AACP,IAAAA,gBAAyB;AA0GT;AA/CD,SAAR,cAA+B;AACpC,QAAM,sBAAsB,mBAAmB,uBAAuB;AACtE,QAAM,EAAE,OAAO,OAAO,MAAM,QAAQ,IAAI;AACxC,QAAM,UAAU,WAAW;AAC3B,QAAM,SAAS,UAAU;AACzB,QAAM,CAAC,IAAI,IAAI,aAAK,QAAQ;AAC5B,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAkB,KAAK;AACvD,QAAM,aAAa,cAAc;AACjC,QAAM,kBAAkB,WAAW;AAEnC,QAAM,aAAa;AAAA,IACjB,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,OAAO,EAAE,iBAAiB,cAAc;AAAA,IACxC,QAAQ,EAAE,MAAM,EAAE,iBAAiB,cAAc,EAAE;AAAA,IACnD,aAAa,CAAC,UAAe;AAAA,EAC/B;AAEA,QAAM,uBAAuB,CAAC,WAAgB;AAC5C,UAAM,YAAY,EAAE,GAAG,OAAO;AAC9B,QAAI,CAAC,UAAU,SAAS;AACtB,aAAO,UAAU;AAAA,IACnB;AACA,WAAO,UAAU;AAEjB;AAAA,MACE;AAAA,QACE,MAAM,KAAK,UAAU,SAAS;AAAA,MAChC;AAAA,MACA,EAAE,QAAQ,OAAO;AAAA,IACnB;AAAA,EACF;AAEA,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,QACL,eAAe;AAAA,QACf,cAAc;AAAA,QACd,UAAU;AAAA,QACV,cAAc;AAAA,MAChB;AAAA,MAEA,6DAAC,eAAI,QAAQ,CAAC,IAAI,EAAE,GAClB;AAAA,2DAAC,eAAI,MAAM,IAAI,IAAI,EAAE,MAAM,GAAG,OAAO,EAAE,GACrC,6DAAC,SAAM,aAAY,MACjB,6DAAC,iBAAM,WAAW,IAChB,6DAAC,SACC,6DAAC,gBAAa,MAAM,MAAM,WAA1B;AAAA;AAAA;AAAA;AAAA,eAA4C,KAD9C;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA,KALF;AAAA;AAAA;AAAA;AAAA,eAMA,KAPF;AAAA;AAAA;AAAA;AAAA,eAQA;AAAA,QACA,mDAAC,eAAI,MAAM,IAAI,IAAI,EAAE,MAAM,IAAI,OAAO,EAAE,GACtC,6DAAC,gBAAK,MAAY,QAAO,YAAW,UAAU,sBAC5C;AAAA,UAAC;AAAA;AAAA,YACC;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,cAAc,MAAM,YAAY,IAAI;AAAA,YACpC;AAAA;AAAA,UARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA,KAVF;AAAA;AAAA;AAAA;AAAA,eAWA,KAZF;AAAA;AAAA;AAAA;AAAA,eAaA;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACE,GAAG;AAAA,YACJ,UAAU,MAAM,YAAY,KAAK;AAAA,YACjC,MAAM;AAAA,YAEN;AAAA,cAAC;AAAA;AAAA,gBACC;AAAA,gBACA;AAAA,gBACA,SAAS,WAAW,UAAU;AAAA;AAAA,cAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAIA;AAAA;AAAA,UATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA;AAAA,WAlCF;AAAA;AAAA;AAAA;AAAA,aAmCA;AAAA;AAAA,IA3CF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4CA;AAEJ;",
  "names": ["import_react"]
}
