{
  "version": 3,
  "sources": ["../../../app/routes/_app.auth.line.callback.tsx"],
  "sourcesContent": ["import { useEffect } from \"react\";\nimport { Card, Result } from \"antd\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\nimport * as APIServer from \"~/api\";\nimport { useSubmit } from \"@remix-run/react\";\nimport { lineAuthenticator } from \"~/configs/oAuth2.server\";\nimport { commitSession, getSessionFromRequest } from \"~/session.server\";\nimport { Loading } from \"~/components/common\";\n\nexport const loader: LoaderFunction = async ({ request }: any) => {\n  return null;\n};\n\nexport const action: ActionFunction = async ({ request }: any) => {\n  let session = await getSessionFromRequest(request);\n  const lastVisited = session.get(\"redirectUri\") || session.get(\"lastVisited\");\n  const uuidTeamToJoin = session.get(\"uuidTeamToJoin\");\n  let toJoinTeams = session.get(\"toJoinTeams\");\n\n  let profile: any;\n  try {\n    profile = await lineAuthenticator.authenticate(\"line\", request, {\n      throwOnError: true,\n    });\n\n    if (profile) {\n      try {\n        const resMe = await APIServer.clientFromSession().request(\n          APIServer.socialLogin(\n            profile.provider.toLowerCase(),\n            profile.id,\n            profile,\n            profile.email\n          )\n        );\n\n        if (resMe.data) {\n          session.set(\"accessToken\", resMe.data.accessToken);\n          session.set(\"refreshToken\", resMe.data.refreshToken);\n          try {\n            const { data } = await APIServer.clientFromSession(session).request(\n              APIServer.me()\n            );\n            session.set(\"me\", data);\n          } catch (e) {\n            console.log(\"e\", e);\n          }\n        }\n        session.flash(\"flashMessage\", {\n          type: \"success\",\n          message: `successfully login`,\n        });\n      } catch (e: any) {\n        session.flash(\"flashMessage\", {\n          type: \"error\",\n          message:\n            e.errors && e.errors.length > 1\n              ? e.errors[0]\n              : e.response.data.message,\n        });\n        console.log(e);\n      }\n    }\n\n    if (toJoinTeams) {\n      return redirect(`/teams/${uuidTeamToJoin}/join`, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n    } else {\n      return redirect(lastVisited, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n    }\n  } catch (error) {\n    return redirect(lastVisited, {\n      headers: {\n        \"Set-Cookie\": await commitSession(session),\n      },\n    });\n  }\n};\n\nexport default function LineCallback() {\n  const submit = useSubmit();\n\n  const handleCallback = () => {\n    const payload = {\n      action: \"lineCallback\",\n    };\n\n    submit(payload, { method: \"post\" });\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      handleCallback();\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <Card style={{ height: 400 }} bordered={false}>\n      <Loading />\n    </Card>\n  );\n}\n\nexport function ErrorBoundary({ error }: any) {\n  return <Result status=\"error\" title={error.message} />;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mBAA0B;AAG1B,kBAAyB;AAGzB,oBAAkC;AAClC,qBAAqD;AAoG/C;AApBS,SAAR,eAAgC;AACrC,QAAM,SAAS,UAAU;AAEzB,QAAM,iBAAiB,MAAM;AAC3B,UAAM,UAAU;AAAA,MACd,QAAQ;AAAA,IACV;AAEA,WAAO,SAAS,EAAE,QAAQ,OAAO,CAAC;AAAA,EACpC;AAEA,8BAAU,MAAM;AACd,UAAM,QAAQ,WAAW,MAAM;AAC7B,qBAAe;AAAA,IACjB,GAAG,GAAI;AACP,WAAO,MAAM,aAAa,KAAK;AAAA,EACjC,GAAG,CAAC,CAAC;AAEL,SACE,mDAAC,gBAAK,OAAO,EAAE,QAAQ,IAAI,GAAG,UAAU,OACtC,6DAAC,aAAD;AAAA;AAAA;AAAA;AAAA,SAAS,KADX;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;AAEO,SAAS,cAAc,EAAE,MAAM,GAAQ;AAC5C,SAAO,mDAAC,kBAAO,QAAO,SAAQ,OAAO,MAAM,WAApC;AAAA;AAAA;AAAA;AAAA,SAA6C;AACtD;",
  "names": []
}
