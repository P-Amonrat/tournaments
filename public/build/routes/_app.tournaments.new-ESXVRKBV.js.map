{
  "version": 3,
  "sources": ["../../../app/routes/_app.tournaments.new.tsx"],
  "sourcesContent": ["import {\n  useFetcher,\n  useLoaderData,\n  useNavigation,\n  useSubmit,\n} from \"@remix-run/react\";\nimport { useTranslation } from \"react-i18next\";\nimport { json, redirect } from \"@remix-run/node\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { Card, Form, Typography } from \"antd\";\nimport {\n  commitSession,\n  getSessionFromRequest,\n  mustAuthenticated,\n} from \"~/session.server\";\nimport * as APIServer from \"~/api\";\nimport { TournamentForm } from \"~/components/pages/Tournament/TournamentForm\";\nimport { unflattenObject } from \"~/utils/helper\";\n\nconst { Title } = Typography;\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await mustAuthenticated(request);\n  let games: any[] = [];\n  try {\n    const gameRes = await APIServer.clientFromSession().request(\n      APIServer.getGames()\n    );\n    if (gameRes.data) {\n      games = gameRes.data;\n    }\n  } catch (e) {\n    console.log(\"e\", e);\n  }\n  return json({ games });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const session = await getSessionFromRequest(request);\n  const formdata = await request.formData();\n  const data = formdata.get(\"data\") as any;\n  const toSubmitData = JSON.parse(data);\n  let tournament: any = null;\n  try {\n    const tournamentRes = await APIServer.clientFromSession(session).request(\n      APIServer.createTournament(toSubmitData)\n    );\n    if (tournamentRes && tournamentRes.data) {\n      tournament = tournamentRes.data;\n    }\n\n    session.flash(\"flashMessage\", {\n      type: \"success\",\n      message: `successfully create tournament`,\n    });\n  } catch (e: any) {\n    console.log(\"error from create\", e.response.data);\n\n    session.flash(\"flashMessage\", {\n      type: \"error\",\n      message: e.errors && e.errors.length > 1 ? e.errors[0] : e.response.data,\n    });\n  }\n  if (tournament) {\n    return redirect(`/tournaments/${tournament.id}`, {\n      headers: {\n        \"Set-Cookie\": await commitSession(session),\n      },\n    });\n  } else {\n    return json({ success: false });\n  }\n};\n\nexport default function TournamentNew() {\n  const { t } = useTranslation();\n  const { games } = useLoaderData();\n  const fetcher = useFetcher();\n  const submit = useSubmit();\n  const [form] = Form.useForm();\n  const navigation = useNavigation();\n\n  const handleCreateTournament = (values: any) => {\n    if (values.isOnline) {\n      const {\n        finalRoundLocation,\n        playerCount,\n        additionalPlayerCount,\n        finalRoundLocationEn,\n        ...value\n      } = values;\n      submit(\n        {\n          data: JSON.stringify(\n            unflattenObject({\n              ...value,\n              playerCount: Number(playerCount),\n              additionalPlayerCount: Number(additionalPlayerCount),\n            })\n          ),\n        },\n        { method: \"post\" }\n      );\n    } else {\n      const { playerCount, additionalPlayerCount, ...rest } = values;\n      submit(\n        {\n          data: JSON.stringify(\n            unflattenObject({\n              ...rest,\n              playerCount: Number(playerCount),\n              additionalPlayerCount: Number(additionalPlayerCount),\n            })\n          ),\n        },\n        { method: \"post\" }\n      );\n    }\n  };\n\n  return (\n    <div\n      style={{\n        paddingInline: \"3.5%\",\n        paddingBlock: 30,\n        maxWidth: 1440,\n        marginInline: \"auto\",\n      }}\n    >\n      <Card\n        style={{\n          borderRadius: 12,\n          maxWidth: 800,\n          marginInline: \"auto\",\n        }}\n        bodyStyle={{ padding: 30 }}\n      >\n        <Title level={2} style={{ marginTop: 0, marginBottom: 40 }}>\n          {t(\"create tournament\")}\n        </Title>\n        <Form\n          form={form}\n          onFinish={handleCreateTournament}\n          layout=\"vertical\"\n          scrollToFirstError\n        >\n          <TournamentForm\n            fetcher={fetcher}\n            form={form}\n            games={games}\n            loading={navigation.state !== \"idle\"}\n            submitLabel={t(\"submit\")}\n          />\n        </Form>\n      </Card>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,kBAA+B;AAG/B,qBAIO;AA2HC;AAtHR,IAAM,EAAE,MAAM,IAAI;AAuDH,SAAR,gBAAiC;AACtC,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,EAAE,MAAM,IAAI,cAAc;AAChC,QAAM,UAAU,WAAW;AAC3B,QAAM,SAAS,UAAU;AACzB,QAAM,CAAC,IAAI,IAAI,aAAK,QAAQ;AAC5B,QAAM,aAAa,cAAc;AAEjC,QAAM,yBAAyB,CAAC,WAAgB;AAC9C,QAAI,OAAO,UAAU;AACnB,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,GAAG;AAAA,MACL,IAAI;AACJ;AAAA,QACE;AAAA,UACE,MAAM,KAAK;AAAA,YACT,gBAAgB;AAAA,cACd,GAAG;AAAA,cACH,aAAa,OAAO,WAAW;AAAA,cAC/B,uBAAuB,OAAO,qBAAqB;AAAA,YACrD,CAAC;AAAA,UACH;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,OAAO;AAAA,MACnB;AAAA,IACF,OAAO;AACL,YAAM,EAAE,aAAa,uBAAuB,GAAG,KAAK,IAAI;AACxD;AAAA,QACE;AAAA,UACE,MAAM,KAAK;AAAA,YACT,gBAAgB;AAAA,cACd,GAAG;AAAA,cACH,aAAa,OAAO,WAAW;AAAA,cAC/B,uBAAuB,OAAO,qBAAqB;AAAA,YACrD,CAAC;AAAA,UACH;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,OAAO;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAEA,SACE;AAAA,IAAC;AAAA;AAAA,MACC,OAAO;AAAA,QACL,eAAe;AAAA,QACf,cAAc;AAAA,QACd,UAAU;AAAA,QACV,cAAc;AAAA,MAChB;AAAA,MAEA;AAAA,QAAC;AAAA;AAAA,UACC,OAAO;AAAA,YACL,cAAc;AAAA,YACd,UAAU;AAAA,YACV,cAAc;AAAA,UAChB;AAAA,UACA,WAAW,EAAE,SAAS,GAAG;AAAA,UAEzB;AAAA,+DAAC,SAAM,OAAO,GAAG,OAAO,EAAE,WAAW,GAAG,cAAc,GAAG,GACtD,YAAE,mBAAmB,KADxB;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA;AAAA,cAAC;AAAA;AAAA,gBACC;AAAA,gBACA,UAAU;AAAA,gBACV,QAAO;AAAA,gBACP,oBAAkB;AAAA,gBAElB;AAAA,kBAAC;AAAA;AAAA,oBACC;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA,SAAS,WAAW,UAAU;AAAA,oBAC9B,aAAa,EAAE,QAAQ;AAAA;AAAA,kBALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAMA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAaA;AAAA;AAAA;AAAA,QAxBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAyBA;AAAA;AAAA,IAjCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA;AAEJ;",
  "names": []
}
