{
  "version": 3,
  "sources": ["../../../app/components/common/TextEditor.client.tsx"],
  "sourcesContent": ["import { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport ReactQuill, { Quill } from \"react-quill\";\nimport { notification } from \"antd\";\nimport { encode } from \"base64-arraybuffer\";\nimport { isPermalink } from \"~/utils/helper\";\n\n// const { useToken } = theme;\n\ninterface TextEditorProps {\n  disabled?: boolean;\n  id: string;\n  initialValues?: any;\n  fetcher: any;\n  onChange: (content: any) => void;\n}\n\nconst BlockEmbed = Quill.import(\"blots/block/embed\");\n\nclass Video extends BlockEmbed {\n  static create(value: any) {\n    let node = super.create(value);\n    let iframe = document.createElement(\"iframe\");\n    iframe.setAttribute(\"frameborder\", \"0\");\n    iframe.setAttribute(\"allowfullscreen\", \"true\");\n    iframe.setAttribute(\"src\", value);\n    node.appendChild(iframe);\n    return isPermalink(value) ? node : null;\n  }\n\n  static value(domNode: any) {\n    if (domNode && domNode.firstChild) {\n      return domNode.firstChild.getAttribute(\"src\");\n    }\n  }\n}\nVideo.blotName = \"video\";\nVideo.className = \"ql-video\";\nVideo.tagName = \"div\";\n\nQuill.register({\n  \"formats/video\": Video,\n});\n\nexport function TextEditor(props: TextEditorProps) {\n  const { t } = useTranslation();\n  // const { token } = useToken();\n  const elRefs: any = useRef([]);\n  const { disabled, id, initialValues, fetcher, onChange } = props;\n  const imageFieldName = `${id}-editor-image`;\n  const [messageApi, contextHolder] = notification.useNotification();\n  const [uploading, setUploading] = useState<boolean>(false);\n\n  const setButtonTitle = () => {\n    const toolbarElements = document.querySelectorAll(\n      '.ql-toolbar button[class*=\"ql-\"], .ql-toolbar span.ql-picker.ql-color-picker'\n    );\n    let title = \"\";\n    toolbarElements.forEach((element) => {\n      if (element.tagName.toLowerCase() === \"button\") {\n        const { className } = element;\n        title = className.split(\"ql-\")[1].split(\" \")[0]; // Split by 'ql-' and take the first part\n        title = title.charAt(0).toUpperCase() + title.slice(1);\n        const value = element.getAttribute(\"value\");\n        title = t(`${title}${value ? `: ${value}` : \"\"}`);\n      } else if (\n        element.tagName.toLowerCase() === \"span\" &&\n        element.className.includes(\"ql-picker\")\n      ) {\n        title = element.className.split(\" \")[0];\n        title = title.split(\"ql-\")[1];\n        title = title.charAt(0).toUpperCase() + title.slice(1);\n        title = t(`${title} picker`);\n      }\n      if (title.length > 0 && title !== \"Video\") {\n        element.innerHTML += `<span class=\"text-editor-tooltip\">${t(\n          title\n        )}</span>`;\n      } else if (title === \"Video\") {\n        element.innerHTML += `<span class=\"text-editor-tooltip\">${t(\n          \"Video (YouTube supported)\"\n        )}</span>`;\n      }\n    });\n  };\n\n  const handleImageUpload = (e: any) => {\n    if (e.target.files[0].size > 2000000) {\n      messageApi.open({\n        type: \"error\",\n        message: t(\"file upload failed due to too large image size\"),\n        duration: 5,\n        placement: \"bottomRight\",\n      });\n      return;\n    }\n    setUploading(true);\n    const reader = new FileReader();\n    reader.onload = (event: any) => {\n      e.target.files[0].base64 = reader.result;\n      if (e.target.files[0].base64) {\n        fetcher.submit(\n          {\n            name: e.target.files[0].name,\n            size: e.target.files[0].size,\n            type: e.target.files[0].type,\n            file: encode(e.target.files[0].base64),\n            field: imageFieldName,\n          },\n          {\n            method: \"put\",\n            action: \"/resources/upload\",\n            encType: \"multipart/form-data\",\n          }\n        );\n      }\n    };\n    reader.readAsArrayBuffer(e.target.files[0]);\n  };\n\n  const imageHandler = (e: any) => {\n    elRefs.current[1].click();\n  };\n\n  const modules = useMemo(\n    () => ({\n      toolbar: {\n        container: [\n          [{ header: [1, 2, 3, 4, 5, 6, false] }],\n          [\"bold\", \"italic\", \"underline\"],\n          [{ list: \"ordered\" }, { list: \"bullet\" }],\n          [\"link\", \"image\", \"video\", \"code-block\", \"html\"],\n        ],\n        handlers: {\n          image: imageHandler,\n        },\n      },\n    }),\n    []\n  );\n\n  useEffect(() => {\n    setButtonTitle();\n  }, []);\n\n  useEffect(() => {\n    if (\n      fetcher.data &&\n      fetcher.data.field &&\n      fetcher.data.field === imageFieldName &&\n      fetcher.data.url\n    ) {\n      setUploading(false);\n      const editor = elRefs.current[0].getEditor();\n      editor.insertEmbed(\n        editor.getSelection(true).index,\n        \"image\",\n        fetcher.data.url\n      );\n    }\n  }, [fetcher.data]);\n\n  return (\n    <>\n      <ReactQuill\n        id={id}\n        className=\"text-editor ctrlg-html\"\n        theme=\"snow\"\n        readOnly={disabled}\n        modules={modules}\n        // placeholder={t(\"write your content ...\")}\n        onChange={onChange}\n        defaultValue={initialValues}\n        ref={(el: any) => (elRefs.current[0] = el)}\n      />\n      <input\n        type=\"file\"\n        name=\"image\"\n        disabled={uploading}\n        style={{ display: \"none\" }}\n        accept=\"image/*\"\n        onChange={handleImageUpload}\n        ref={(el: any) => (elRefs.current[1] = el)}\n      />\n      {contextHolder}\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["ReactQuill"]
}
