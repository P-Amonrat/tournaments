{
  "version": 3,
  "sources": ["../../../app/components/pages/Webboard/WebboardForm.tsx"],
  "sourcesContent": ["import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Card,\n  Col,\n  Flex,\n  Form,\n  Input,\n  Modal,\n  Result,\n  Row,\n  Select,\n  Space,\n  Switch,\n  Typography,\n  Image,\n  Tooltip,\n  notification,\n} from \"antd\";\nimport {\n  DeleteOutlined,\n  LoadingOutlined,\n  PlusOutlined,\n  EditOutlined,\n  QuestionCircleOutlined,\n} from \"@ant-design/icons\";\nimport { AppContext, AuthContext } from \"~/contexts\";\nimport {\n  BackButton,\n  FileUploader,\n  InlineAvatar,\n  KycWizard,\n  TextEditor,\n  TiltButton,\n  TiltCheck,\n} from \"~/components/common\";\nimport { useMatches } from \"@remix-run/react\";\nconst { Text, Title } = Typography;\n\ninterface WebboardFormProps {\n  editmode?: boolean;\n  fetcher: any;\n  form: any;\n  games: any[];\n  loading?: boolean;\n  rooms: any[];\n  tags?: any[];\n  allTags?: any[];\n  tournament?: any;\n  onKycClicked?: () => void;\n  navigationState?: string;\n}\n\nexport function WebboardForm(props: WebboardFormProps) {\n  const {\n    editmode,\n    fetcher,\n    form,\n    games,\n    loading,\n    rooms,\n    tags,\n    allTags,\n    tournament,\n    navigationState,\n  } = props;\n  const { t } = useTranslation();\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const { user } = useContext(AuthContext);\n  const { scheme } = useContext(AppContext);\n  const [messageApi, contextHolder] = notification.useNotification();\n  const [uploading, setUploading] = useState<boolean>(false);\n  const [hasPoll, setHasPoll] = useState<boolean>(\n    form.getFieldValue(\"hasPoll\") ? form.getFieldValue(\"hasPoll\") : false\n  );\n  const [textEditorLoading, setTextEditorLoading] = useState<boolean>(true);\n  const [kycWizardModal, setKycWizardModal] = useState<boolean>(false);\n  const allTagOptions = allTags\n    ? allTags.map((tag: any) => ({ label: tag.name, value: tag.name }))\n    : [];\n  const tagOptions = tags\n    ? tags.map((tag: any) => ({ label: tag.name, value: tag.name }))\n    : [];\n  const cardStyle = {\n    borderRadius: 10,\n    overflow: \"hidden\",\n    boxShadow:\n      scheme === \"dark\"\n        ? \"0px 4px 15px -5px rgba(255,255,255,0.75)\"\n        : \"0px 4px 15px -5px rgba(0,0,0,0.75)\",\n  };\n\n  const [searchedOptions, setSearchedOptions] = useState(tagOptions);\n\n  // Update options based on user input\n  const handleSearch = (inputValue: string) => {\n    if (inputValue) {\n      // If there is input, switch to allTagOptions for searching\n      setSearchedOptions(allTagOptions);\n    } else {\n      // If input is empty, revert to tagOptions\n      setSearchedOptions(tagOptions);\n    }\n  };\n\n  const roomWihtoutTournament = rooms.filter(\n    (item) => item.nameEn !== \"tournament\"\n  );\n  const roomWithOutBuySell = roomWihtoutTournament.filter(\n    (item) => item.nameEn !== \"buy sell\"\n  );\n\n  const handleFileTooLarge = () => {\n    messageApi.open({\n      type: \"error\",\n      message: t(\"file upload failed due to too large image size\"),\n      duration: 5,\n      placement: \"bottomRight\",\n    });\n  };\n\n  const openKycWizardModal = () => {\n    setKycWizardModal(true);\n  };\n\n  const closeKycWizardModal = () => {\n    setKycWizardModal(false);\n  };\n\n  const handlePollChanged = (checked: boolean, e: any) => {\n    setHasPoll(checked);\n  };\n\n  const handleMultipleSelect = useCallback(\n    (field: string, values: any) => {\n      form.setFieldValue(field, values);\n    },\n    [form]\n  );\n\n  useEffect(() => {\n    if (fetcher.data && fetcher.data.field && fetcher.state) {\n      if (fetcher.data.field === \"thumbnailImage\") {\n        form.setFieldValue(\"thumbnailImage\", fetcher.data.key);\n      }\n      setUploading(false);\n    }\n  }, [form, fetcher.data]);\n\n  useEffect(() => {\n    setTextEditorLoading(false);\n  }, []);\n\n  return (\n    <Card bordered={false} style={cardStyle} bodyStyle={{ padding: 30 }}>\n      <BackButton />\n      <Row gutter={[60, 40]}>\n        <Col flex=\"none\">\n          <InlineAvatar\n            avatarUrl={\n              user && user.displayImage\n                ? `${cdnUrl}/${user.displayImage}`\n                : \"image/placeholder.png\"\n            }\n            title={user && user.displayName ? user.displayName : \"\"}\n          />\n        </Col>\n        <Col flex=\"auto\">\n          <Form.Item\n            key=\"title\"\n            name=\"title\"\n            rules={[\n              {\n                required: true,\n                message: t(\"please input title\"),\n              },\n            ]}\n            label={\n              <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                {t(\"title\")}\n              </Text>\n            }\n          >\n            <Input maxLength={200} />\n          </Form.Item>\n          {!tournament && (\n            <Form.Item\n              key=\"roomIds\"\n              name=\"roomIds\"\n              rules={[\n                {\n                  required: true,\n                  message: t(\"please input room\"),\n                },\n              ]}\n              label={\n                <Space size={10}>\n                  <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                    {t(\"rooms\")}\n                  </Text>\n                  {!user.isDopaVerified && (\n                    <Tooltip\n                      placement=\"top\"\n                      arrow={false}\n                      title={t(\n                        'KYC to access \"buy sell\" and \"tournament\" rooms'\n                      )}\n                    >\n                      <QuestionCircleOutlined\n                        onClick={openKycWizardModal}\n                        style={{ cursor: \"pointer\", color: \"#7a6fee\" }}\n                      />\n                    </Tooltip>\n                  )}\n                </Space>\n              }\n            >\n              <TiltCheck\n                fieldName=\"roomIds\"\n                labelKey=\"name\"\n                labelValue=\"id\"\n                multiple\n                options={\n                  user.isDopaVerified\n                    ? roomWihtoutTournament\n                    : roomWithOutBuySell\n                }\n                // onSelect={handleMultipleSelect}\n                onSelect={handleMultipleSelect}\n                initialValues={form.getFieldValue(\"roomIds\")}\n              />\n            </Form.Item>\n          )}\n          {!tournament && (\n            <Form.Item\n              key=\"gameIds\"\n              name=\"gameIds\"\n              label={\n                <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                  {t(\"games\")}\n                </Text>\n              }\n            >\n              <TiltCheck\n                fieldName=\"gameIds\"\n                labelKey=\"name\"\n                labelValue=\"id\"\n                multiple\n                options={games}\n                onSelect={handleMultipleSelect}\n                initialValues={form.getFieldValue(\"gameIds\")}\n              />\n            </Form.Item>\n          )}\n          <Form.Item\n            key=\"tags\"\n            name=\"tags\"\n            label={\n              <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                {t(\"tags\")}\n              </Text>\n            }\n          >\n            <Select\n              mode=\"tags\"\n              style={{ width: \"100%\" }}\n              placeholder={t(\"input tags\")}\n              options={searchedOptions}\n              onSearch={handleSearch} // Handle search input change\n              onChange={(tags: string[]) => {\n                const processedTags = tags.map((tag: string) =>\n                  tag.replace(/^#+/, \"\")\n                );\n                form.setFieldsValue({ tags: processedTags });\n              }}\n            />\n          </Form.Item>\n          <Space\n            direction=\"vertical\"\n            size={5}\n            style={{ display: \"flex\", marginBottom: 20, marginTop: 20 }}\n          >\n            <Row style={{ marginBottom: 10, alignItems: \"baseline\" }}>\n              <Col flex=\"auto\">\n                <Text style={{ fontWeight: 600 }}>\n                  {t(\"please upload post thumbnail\")} ({t(\"recommended ratio\")}{\" \"}\n                  4:5)\n                </Text>\n              </Col>\n              <Col flex=\"none\">\n                <Form.Item\n                  key=\"thumbnailImage\"\n                  name=\"thumbnailImage\"\n                  // rules={[\n                  //   {\n                  //     required: true,\n                  //     message: `${t(\"please upload thumnail image\")} ${t(\n                  //       \"recommended ratio\"\n                  //     )} 2:1`,\n                  //   },\n                  // ]}\n                >\n                  <FileUploader\n                    fetcher={fetcher}\n                    fieldName={\"thumbnailImage\"}\n                    onUploading={setUploading}\n                    onErrorFileTooLarge={handleFileTooLarge}\n                  >\n                    <Space size={5} style={{ cursor: \"pointer\" }}>\n                      <EditOutlined style={{ color: \"#8263ea\" }} />\n                      <Text>{t(\"upload\")}</Text>\n                    </Space>\n                  </FileUploader>\n                </Form.Item>\n              </Col>\n            </Row>\n            {uploading ? (\n              <Result\n                icon={<LoadingOutlined style={{ fontSize: 24 }} spin />}\n              />\n            ) : form && form.getFieldValue(\"thumbnailImage\") ? (\n              <Image\n                preview={false}\n                style={{ maxWidth: 400 }}\n                src={`${cdnUrl}/${form.getFieldValue(\"thumbnailImage\")}`}\n              />\n            ) : (\n              <></>\n            )}\n          </Space>\n          {!textEditorLoading ? (\n            <Form.Item\n              key=\"content\"\n              name=\"content\"\n              rules={[\n                {\n                  required: true,\n                  message: t(\"please input content\"),\n                },\n              ]}\n              label={\n                <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                  {t(\"content\")}\n                </Text>\n              }\n            >\n              <TextEditor\n                id=\"post-content\"\n                initialValues={form.getFieldValue(\"content\")}\n                fetcher={fetcher}\n                onChange={(values: any) =>\n                  form.setFieldValue(\"content\", values)\n                }\n              />\n            </Form.Item>\n          ) : (\n            <Result icon={<LoadingOutlined style={{ fontSize: 24 }} spin />} />\n          )}\n          {!editmode && (\n            <>\n              <Space size={10} style={{ marginTop: 20 }}>\n                <Form.Item\n                  key=\"hasPoll\"\n                  name=\"hasPoll\"\n                  valuePropName=\"checked\"\n                  label={\n                    <Text style={{ fontWeight: 600, fontSize: \"inherit\" }}>\n                      {t(\"create poll\")}\n                    </Text>\n                  }\n                >\n                  <Switch onChange={handlePollChanged} />\n                </Form.Item>\n              </Space>\n              {hasPoll && (\n                <Flex vertical gap={20} style={{ marginTop: 30 }}>\n                  <Title level={5} style={{ margin: 0 }}>\n                    {t(\"poll options\")}\n                  </Title>\n                  <Form.List\n                    name=\"pollOptions\"\n                    initialValue={[\"\", \"\"]}\n                    rules={[\n                      {\n                        validator: async (_, names) => {\n                          if (!names || names.length < 2) {\n                            return Promise.reject(\n                              new Error(t(\"at least 2 options\"))\n                            );\n                          }\n                          if (names.length > 10) {\n                            return Promise.reject(\n                              new Error(t(\"maximum 10 options\"))\n                            );\n                          }\n                        },\n                      },\n                    ]}\n                  >\n                    {(fields, { add, remove }, { errors }) => (\n                      <>\n                        <Flex gap={10} vertical>\n                          {fields.map((field, index) => (\n                            <Form.Item key={field.key} noStyle>\n                              <Row\n                                gutter={[10, 10]}\n                                wrap={false}\n                                style={{ alignItems: \"center\" }}\n                              >\n                                <Col flex=\"auto\">\n                                  <Form.Item\n                                    {...field}\n                                    noStyle\n                                    rules={[\n                                      {\n                                        required: true,\n                                        whitespace: true,\n                                        message: t(\n                                          \"Please input option or delete this field.\"\n                                        ),\n                                      },\n                                    ]}\n                                  >\n                                    <Input\n                                      placeholder=\"option\"\n                                      style={{ width: \"100%\" }}\n                                    />\n                                  </Form.Item>\n                                </Col>\n                                <Col flex=\"none\">\n                                  <Button\n                                    danger\n                                    icon={<DeleteOutlined />}\n                                    onClick={() => remove(field.name)}\n                                  />\n                                </Col>\n                              </Row>\n                            </Form.Item>\n                          ))}\n                        </Flex>\n                        <Form.ErrorList errors={errors} />\n                        <Space>\n                          <TiltButton color=\"secondary\" onClick={() => add()}>\n                            <PlusOutlined style={{ fontSize: \"1.2em\" }} />\n                          </TiltButton>\n                        </Space>\n                      </>\n                    )}\n                  </Form.List>\n                </Flex>\n              )}\n            </>\n          )}\n          {contextHolder}\n          <Flex justify=\"space-between\" style={{ marginTop: 40 }}>\n            <TiltButton\n              disabled={loading || navigationState !== \"idle\"}\n              color=\"primary\"\n              onClick={!loading ? () => form.submit() : undefined}\n            >\n              {loading ? (\n                <LoadingOutlined style={{ fontSize: 24 }} spin />\n              ) : editmode ? (\n                t(\"edit post\")\n              ) : (\n                t(\"create post\")\n              )}\n            </TiltButton>\n            {!editmode && (\n              <Space size={10}>\n                <Text>{t(\"anonymous\")}</Text>\n                <Form.Item\n                  key=\"anonymous\"\n                  name=\"anonymous\"\n                  valuePropName=\"checked\"\n                  noStyle\n                >\n                  <Switch\n                    // onClick={user.isDopaVerified ? undefined : onKycClicked}\n                    disabled={user.isDopaVerified ? false : true}\n                  />\n                </Form.Item>\n                {!user.isDopaVerified && (\n                  <Tooltip\n                    placement=\"top\"\n                    arrow={false}\n                    title={t('KYC to access \"anonymouse\" and \"buy sell\" rooms')}\n                  >\n                    <QuestionCircleOutlined\n                      onClick={openKycWizardModal}\n                      style={{ cursor: \"pointer\", color: \"#7a6fee\" }}\n                    />\n                  </Tooltip>\n                )}\n              </Space>\n            )}\n          </Flex>\n        </Col>\n      </Row>\n      {!user.isDopaVerified && (\n        <Modal\n          open={kycWizardModal}\n          closable={false}\n          footer={false}\n          onCancel={closeKycWizardModal}\n        >\n          <KycWizard />\n        </Modal>\n      )}\n    </Card>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mBAAoE;AA6J9D;AAvHN,IAAM,EAAE,MAAM,MAAM,IAAI;AAgBjB,SAAS,aAAa,OAA0B;AACrD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,EAAE,EAAE,IAAI,eAAe;AAC7B,QAAM,UAAU,WAAW;AAC3B,QAAM,EAAE,OAAO,IAAI,QAAQ,CAAC,EAAE;AAC9B,QAAM,EAAE,KAAK,QAAI,yBAAW,WAAW;AACvC,QAAM,EAAE,OAAO,QAAI,yBAAW,UAAU;AACxC,QAAM,CAAC,YAAY,aAAa,IAAI,qBAAa,gBAAgB;AACjE,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAkB,KAAK;AACzD,QAAM,CAAC,SAAS,UAAU,QAAI;AAAA,IAC5B,KAAK,cAAc,SAAS,IAAI,KAAK,cAAc,SAAS,IAAI;AAAA,EAClE;AACA,QAAM,CAAC,mBAAmB,oBAAoB,QAAI,uBAAkB,IAAI;AACxE,QAAM,CAAC,gBAAgB,iBAAiB,QAAI,uBAAkB,KAAK;AACnE,QAAM,gBAAgB,UAClB,QAAQ,IAAI,CAAC,SAAc,EAAE,OAAO,IAAI,MAAM,OAAO,IAAI,KAAK,EAAE,IAChE,CAAC;AACL,QAAM,aAAa,OACf,KAAK,IAAI,CAAC,SAAc,EAAE,OAAO,IAAI,MAAM,OAAO,IAAI,KAAK,EAAE,IAC7D,CAAC;AACL,QAAM,YAAY;AAAA,IAChB,cAAc;AAAA,IACd,UAAU;AAAA,IACV,WACE,WAAW,SACP,6CACA;AAAA,EACR;AAEA,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,uBAAS,UAAU;AAGjE,QAAM,eAAe,CAAC,eAAuB;AAC3C,QAAI,YAAY;AAEd,yBAAmB,aAAa;AAAA,IAClC,OAAO;AAEL,yBAAmB,UAAU;AAAA,IAC/B;AAAA,EACF;AAEA,QAAM,wBAAwB,MAAM;AAAA,IAClC,CAAC,SAAS,KAAK,WAAW;AAAA,EAC5B;AACA,QAAM,qBAAqB,sBAAsB;AAAA,IAC/C,CAAC,SAAS,KAAK,WAAW;AAAA,EAC5B;AAEA,QAAM,qBAAqB,MAAM;AAC/B,eAAW,KAAK;AAAA,MACd,MAAM;AAAA,MACN,SAAS,EAAE,gDAAgD;AAAA,MAC3D,UAAU;AAAA,MACV,WAAW;AAAA,IACb,CAAC;AAAA,EACH;AAEA,QAAM,qBAAqB,MAAM;AAC/B,sBAAkB,IAAI;AAAA,EACxB;AAEA,QAAM,sBAAsB,MAAM;AAChC,sBAAkB,KAAK;AAAA,EACzB;AAEA,QAAM,oBAAoB,CAAC,SAAkB,MAAW;AACtD,eAAW,OAAO;AAAA,EACpB;AAEA,QAAM,2BAAuB;AAAA,IAC3B,CAAC,OAAe,WAAgB;AAC9B,WAAK,cAAc,OAAO,MAAM;AAAA,IAClC;AAAA,IACA,CAAC,IAAI;AAAA,EACP;AAEA,8BAAU,MAAM;AACd,QAAI,QAAQ,QAAQ,QAAQ,KAAK,SAAS,QAAQ,OAAO;AACvD,UAAI,QAAQ,KAAK,UAAU,kBAAkB;AAC3C,aAAK,cAAc,kBAAkB,QAAQ,KAAK,GAAG;AAAA,MACvD;AACA,mBAAa,KAAK;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,MAAM,QAAQ,IAAI,CAAC;AAEvB,8BAAU,MAAM;AACd,yBAAqB,KAAK;AAAA,EAC5B,GAAG,CAAC,CAAC;AAEL,SACE,mDAAC,gBAAK,UAAU,OAAO,OAAO,WAAW,WAAW,EAAE,SAAS,GAAG,GAChE;AAAA,uDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,WAAY;AAAA,IACZ,mDAAC,eAAI,QAAQ,CAAC,IAAI,EAAE,GAClB;AAAA,yDAAC,eAAI,MAAK,QACR;AAAA,QAAC;AAAA;AAAA,UACC,WACE,QAAQ,KAAK,eACT,GAAG,UAAU,KAAK,iBAClB;AAAA,UAEN,OAAO,QAAQ,KAAK,cAAc,KAAK,cAAc;AAAA;AAAA,QANvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,KARF;AAAA;AAAA;AAAA;AAAA,aASA;AAAA,MACA,mDAAC,eAAI,MAAK,QACR;AAAA;AAAA,UAAC,aAAK;AAAA,UAAL;AAAA,YAEC,MAAK;AAAA,YACL,OAAO;AAAA,cACL;AAAA,gBACE,UAAU;AAAA,gBACV,SAAS,EAAE,oBAAoB;AAAA,cACjC;AAAA,YACF;AAAA,YACA,OACE,mDAAC,QAAK,OAAO,EAAE,YAAY,KAAK,UAAU,UAAU,GACjD,YAAE,OAAO,KADZ;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YAGF,6DAAC,iBAAM,WAAW,OAAlB;AAAA;AAAA;AAAA;AAAA,mBAAuB;AAAA;AAAA,UAdnB;AAAA,UADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAgBA;AAAA,QACC,CAAC,cACA;AAAA,UAAC,aAAK;AAAA,UAAL;AAAA,YAEC,MAAK;AAAA,YACL,OAAO;AAAA,cACL;AAAA,gBACE,UAAU;AAAA,gBACV,SAAS,EAAE,mBAAmB;AAAA,cAChC;AAAA,YACF;AAAA,YACA,OACE,mDAAC,iBAAM,MAAM,IACX;AAAA,iEAAC,QAAK,OAAO,EAAE,YAAY,KAAK,UAAU,UAAU,GACjD,YAAE,OAAO,KADZ;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACC,CAAC,KAAK,kBACL;AAAA,gBAAC;AAAA;AAAA,kBACC,WAAU;AAAA,kBACV,OAAO;AAAA,kBACP,OAAO;AAAA,oBACL;AAAA,kBACF;AAAA,kBAEA;AAAA,oBAAC;AAAA;AAAA,sBACC,SAAS;AAAA,sBACT,OAAO,EAAE,QAAQ,WAAW,OAAO,UAAU;AAAA;AAAA,oBAF/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAWA;AAAA,iBAhBJ;AAAA;AAAA;AAAA;AAAA,mBAkBA;AAAA,YAGF;AAAA,cAAC;AAAA;AAAA,gBACC,WAAU;AAAA,gBACV,UAAS;AAAA,gBACT,YAAW;AAAA,gBACX,UAAQ;AAAA,gBACR,SACE,KAAK,iBACD,wBACA;AAAA,gBAGN,UAAU;AAAA,gBACV,eAAe,KAAK,cAAc,SAAS;AAAA;AAAA,cAZ7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAaA;AAAA;AAAA,UA3CI;AAAA,UADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA6CA;AAAA,QAED,CAAC,cACA;AAAA,UAAC,aAAK;AAAA,UAAL;AAAA,YAEC,MAAK;AAAA,YACL,OACE,mDAAC,QAAK,OAAO,EAAE,YAAY,KAAK,UAAU,UAAU,GACjD,YAAE,OAAO,KADZ;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YAGF;AAAA,cAAC;AAAA;AAAA,gBACC,WAAU;AAAA,gBACV,UAAS;AAAA,gBACT,YAAW;AAAA,gBACX,UAAQ;AAAA,gBACR,SAAS;AAAA,gBACT,UAAU;AAAA,gBACV,eAAe,KAAK,cAAc,SAAS;AAAA;AAAA,cAP7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQA;AAAA;AAAA,UAhBI;AAAA,UADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAkBA;AAAA,QAEF;AAAA,UAAC,aAAK;AAAA,UAAL;AAAA,YAEC,MAAK;AAAA,YACL,OACE,mDAAC,QAAK,OAAO,EAAE,YAAY,KAAK,UAAU,UAAU,GACjD,YAAE,MAAM,KADX;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YAGF;AAAA,cAAC;AAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAO,EAAE,OAAO,OAAO;AAAA,gBACvB,aAAa,EAAE,YAAY;AAAA,gBAC3B,SAAS;AAAA,gBACT,UAAU;AAAA,gBACV,UAAU,CAACA,UAAmB;AAC5B,wBAAM,gBAAgBA,MAAK;AAAA,oBAAI,CAAC,QAC9B,IAAI,QAAQ,OAAO,EAAE;AAAA,kBACvB;AACA,uBAAK,eAAe,EAAE,MAAM,cAAc,CAAC;AAAA,gBAC7C;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAYA;AAAA;AAAA,UApBI;AAAA,UADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAsBA;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACC,WAAU;AAAA,YACV,MAAM;AAAA,YACN,OAAO,EAAE,SAAS,QAAQ,cAAc,IAAI,WAAW,GAAG;AAAA,YAE1D;AAAA,iEAAC,eAAI,OAAO,EAAE,cAAc,IAAI,YAAY,WAAW,GACrD;AAAA,mEAAC,eAAI,MAAK,QACR,6DAAC,QAAK,OAAO,EAAE,YAAY,IAAI,GAC5B;AAAA,oBAAE,8BAA8B;AAAA,kBAAE;AAAA,kBAAG,EAAE,mBAAmB;AAAA,kBAAG;AAAA,kBAAI;AAAA,qBADpE;AAAA;AAAA;AAAA;AAAA,uBAGA,KAJF;AAAA;AAAA;AAAA;AAAA,uBAKA;AAAA,gBACA,mDAAC,eAAI,MAAK,QACR;AAAA,kBAAC,aAAK;AAAA,kBAAL;AAAA,oBAEC,MAAK;AAAA,oBAUL;AAAA,sBAAC;AAAA;AAAA,wBACC;AAAA,wBACA,WAAW;AAAA,wBACX,aAAa;AAAA,wBACb,qBAAqB;AAAA,wBAErB,6DAAC,iBAAM,MAAM,GAAG,OAAO,EAAE,QAAQ,UAAU,GACzC;AAAA,6EAAC,wBAAa,OAAO,EAAE,OAAO,UAAU,KAAxC;AAAA;AAAA;AAAA;AAAA,iCAA2C;AAAA,0BAC3C,mDAAC,QAAM,YAAE,QAAQ,KAAjB;AAAA;AAAA;AAAA;AAAA,iCAAmB;AAAA,6BAFrB;AAAA;AAAA;AAAA;AAAA,+BAGA;AAAA;AAAA,sBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUA;AAAA;AAAA,kBArBI;AAAA,kBADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAuBA,KAxBF;AAAA;AAAA;AAAA;AAAA,uBAyBA;AAAA,mBAhCF;AAAA;AAAA;AAAA;AAAA,qBAiCA;AAAA,cACC,YACC;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAM,mDAAC,2BAAgB,OAAO,EAAE,UAAU,GAAG,GAAG,MAAI,QAA9C;AAAA;AAAA;AAAA;AAAA,yBAA+C;AAAA;AAAA,gBADvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEA,IACE,QAAQ,KAAK,cAAc,gBAAgB,IAC7C;AAAA,gBAAC;AAAA;AAAA,kBACC,SAAS;AAAA,kBACT,OAAO,EAAE,UAAU,IAAI;AAAA,kBACvB,KAAK,GAAG,UAAU,KAAK,cAAc,gBAAgB;AAAA;AAAA,gBAHvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAIA,IAEA;AAAA;AAAA;AAAA;AAAA,qBAAE;AAAA;AAAA;AAAA,UAlDN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAoDA;AAAA,QACC,CAAC,oBACA;AAAA,UAAC,aAAK;AAAA,UAAL;AAAA,YAEC,MAAK;AAAA,YACL,OAAO;AAAA,cACL;AAAA,gBACE,UAAU;AAAA,gBACV,SAAS,EAAE,sBAAsB;AAAA,cACnC;AAAA,YACF;AAAA,YACA,OACE,mDAAC,QAAK,OAAO,EAAE,YAAY,KAAK,UAAU,UAAU,GACjD,YAAE,SAAS,KADd;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YAGF;AAAA,cAAC;AAAA;AAAA,gBACC,IAAG;AAAA,gBACH,eAAe,KAAK,cAAc,SAAS;AAAA,gBAC3C;AAAA,gBACA,UAAU,CAAC,WACT,KAAK,cAAc,WAAW,MAAM;AAAA;AAAA,cALxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAOA;AAAA;AAAA,UArBI;AAAA,UADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAuBA,IAEA,mDAAC,kBAAO,MAAM,mDAAC,2BAAgB,OAAO,EAAE,UAAU,GAAG,GAAG,MAAI,QAA9C;AAAA;AAAA;AAAA;AAAA,eAA+C,KAA7D;AAAA;AAAA;AAAA;AAAA,eAAiE;AAAA,QAElE,CAAC,YACA,sFACE;AAAA,6DAAC,iBAAM,MAAM,IAAI,OAAO,EAAE,WAAW,GAAG,GACtC;AAAA,YAAC,aAAK;AAAA,YAAL;AAAA,cAEC,MAAK;AAAA,cACL,eAAc;AAAA,cACd,OACE,mDAAC,QAAK,OAAO,EAAE,YAAY,KAAK,UAAU,UAAU,GACjD,YAAE,aAAa,KADlB;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cAGF,6DAAC,kBAAO,UAAU,qBAAlB;AAAA;AAAA;AAAA;AAAA,qBAAqC;AAAA;AAAA,YATjC;AAAA,YADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAWA,KAZF;AAAA;AAAA;AAAA;AAAA,iBAaA;AAAA,UACC,WACC,mDAAC,gBAAK,UAAQ,MAAC,KAAK,IAAI,OAAO,EAAE,WAAW,GAAG,GAC7C;AAAA,+DAAC,SAAM,OAAO,GAAG,OAAO,EAAE,QAAQ,EAAE,GACjC,YAAE,cAAc,KADnB;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA;AAAA,cAAC,aAAK;AAAA,cAAL;AAAA,gBACC,MAAK;AAAA,gBACL,cAAc,CAAC,IAAI,EAAE;AAAA,gBACrB,OAAO;AAAA,kBACL;AAAA,oBACE,WAAW,OAAO,GAAG,UAAU;AAC7B,0BAAI,CAAC,SAAS,MAAM,SAAS,GAAG;AAC9B,+BAAO,QAAQ;AAAA,0BACb,IAAI,MAAM,EAAE,oBAAoB,CAAC;AAAA,wBACnC;AAAA,sBACF;AACA,0BAAI,MAAM,SAAS,IAAI;AACrB,+BAAO,QAAQ;AAAA,0BACb,IAAI,MAAM,EAAE,oBAAoB,CAAC;AAAA,wBACnC;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,gBAEC,WAAC,QAAQ,EAAE,KAAK,OAAO,GAAG,EAAE,OAAO,MAClC,sFACE;AAAA,qEAAC,gBAAK,KAAK,IAAI,UAAQ,MACpB,iBAAO,IAAI,CAAC,OAAO,UAClB,mDAAC,aAAK,MAAL,EAA0B,SAAO,MAChC;AAAA,oBAAC;AAAA;AAAA,sBACC,QAAQ,CAAC,IAAI,EAAE;AAAA,sBACf,MAAM;AAAA,sBACN,OAAO,EAAE,YAAY,SAAS;AAAA,sBAE9B;AAAA,2EAAC,eAAI,MAAK,QACR;AAAA,0BAAC,aAAK;AAAA,0BAAL;AAAA,4BACE,GAAG;AAAA,4BACJ,SAAO;AAAA,4BACP,OAAO;AAAA,8BACL;AAAA,gCACE,UAAU;AAAA,gCACV,YAAY;AAAA,gCACZ,SAAS;AAAA,kCACP;AAAA,gCACF;AAAA,8BACF;AAAA,4BACF;AAAA,4BAEA;AAAA,8BAAC;AAAA;AAAA,gCACC,aAAY;AAAA,gCACZ,OAAO,EAAE,OAAO,OAAO;AAAA;AAAA,8BAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAGA;AAAA;AAAA,0BAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAiBA,KAlBF;AAAA;AAAA;AAAA;AAAA,+BAmBA;AAAA,wBACA,mDAAC,eAAI,MAAK,QACR;AAAA,0BAAC;AAAA;AAAA,4BACC,QAAM;AAAA,4BACN,MAAM,mDAAC,4BAAD;AAAA;AAAA;AAAA;AAAA,mCAAgB;AAAA,4BACtB,SAAS,MAAM,OAAO,MAAM,IAAI;AAAA;AAAA,0BAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAIA,KALF;AAAA;AAAA;AAAA;AAAA,+BAMA;AAAA;AAAA;AAAA,oBA/BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAgCA,KAjCc,MAAM,KAAtB;AAAA;AAAA;AAAA;AAAA,yBAkCA,CACD,KArCH;AAAA;AAAA;AAAA;AAAA,yBAsCA;AAAA,kBACA,mDAAC,aAAK,WAAL,EAAe,UAAhB;AAAA;AAAA;AAAA;AAAA,yBAAgC;AAAA,kBAChC,mDAAC,iBACC,6DAAC,cAAW,OAAM,aAAY,SAAS,MAAM,IAAI,GAC/C,6DAAC,wBAAa,OAAO,EAAE,UAAU,QAAQ,KAAzC;AAAA;AAAA;AAAA;AAAA,yBAA4C,KAD9C;AAAA;AAAA;AAAA;AAAA,yBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,yBAIA;AAAA,qBA7CF;AAAA;AAAA;AAAA;AAAA,uBA8CA;AAAA;AAAA,cAnEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAqEA;AAAA,eAzEF;AAAA;AAAA;AAAA;AAAA,iBA0EA;AAAA,aA1FJ;AAAA;AAAA;AAAA;AAAA,eA4FA;AAAA,QAED;AAAA,QACD,mDAAC,gBAAK,SAAQ,iBAAgB,OAAO,EAAE,WAAW,GAAG,GACnD;AAAA;AAAA,YAAC;AAAA;AAAA,cACC,UAAU,WAAW,oBAAoB;AAAA,cACzC,OAAM;AAAA,cACN,SAAS,CAAC,UAAU,MAAM,KAAK,OAAO,IAAI;AAAA,cAEzC,oBACC,mDAAC,2BAAgB,OAAO,EAAE,UAAU,GAAG,GAAG,MAAI,QAA9C;AAAA;AAAA;AAAA;AAAA,qBAA+C,IAC7C,WACF,EAAE,WAAW,IAEb,EAAE,aAAa;AAAA;AAAA,YAVnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAYA;AAAA,UACC,CAAC,YACA,mDAAC,iBAAM,MAAM,IACX;AAAA,+DAAC,QAAM,YAAE,WAAW,KAApB;AAAA;AAAA;AAAA;AAAA,mBAAsB;AAAA,YACtB;AAAA,cAAC,aAAK;AAAA,cAAL;AAAA,gBAEC,MAAK;AAAA,gBACL,eAAc;AAAA,gBACd,SAAO;AAAA,gBAEP;AAAA,kBAAC;AAAA;AAAA,oBAEC,UAAU,KAAK,iBAAiB,QAAQ;AAAA;AAAA,kBAF1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAGA;AAAA;AAAA,cARI;AAAA,cADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAUA;AAAA,YACC,CAAC,KAAK,kBACL;AAAA,cAAC;AAAA;AAAA,gBACC,WAAU;AAAA,gBACV,OAAO;AAAA,gBACP,OAAO,EAAE,iDAAiD;AAAA,gBAE1D;AAAA,kBAAC;AAAA;AAAA,oBACC,SAAS;AAAA,oBACT,OAAO,EAAE,QAAQ,WAAW,OAAO,UAAU;AAAA;AAAA,kBAF/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAGA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YASA;AAAA,eAvBJ;AAAA;AAAA;AAAA;AAAA,iBAyBA;AAAA,aAxCJ;AAAA;AAAA;AAAA;AAAA,eA0CA;AAAA,WAzUF;AAAA;AAAA;AAAA;AAAA,aA0UA;AAAA,SArVF;AAAA;AAAA;AAAA;AAAA,WAsVA;AAAA,IACC,CAAC,KAAK,kBACL;AAAA,MAAC;AAAA;AAAA,QACC,MAAM;AAAA,QACN,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QAEV,6DAAC,eAAD;AAAA;AAAA;AAAA;AAAA,eAAW;AAAA;AAAA,MANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA;AAAA,OAjWJ;AAAA;AAAA;AAAA;AAAA,SAmWA;AAEJ;",
  "names": ["tags"]
}
