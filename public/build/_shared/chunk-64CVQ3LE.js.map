{
  "version": 3,
  "sources": ["../../../app/components/common/TiltCheck.tsx"],
  "sourcesContent": ["import { Space, theme, Typography } from \"antd\";\nimport { indexOf, isArray } from \"lodash\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { TiltButton } from \"~/components/common\";\nconst { Text } = Typography;\nconst { useToken } = theme;\n\ninterface TiltCheckProps {\n  fieldName: string;\n  labelKey?: string;\n  labelValue?: string;\n  multiple?: boolean;\n  options: any[];\n  initialValues?: any;\n  onSelect: (name: string, values: any) => void;\n}\n\nexport function TiltCheck(props: TiltCheckProps) {\n  const {\n    fieldName,\n    labelKey,\n    labelValue,\n    multiple,\n    options,\n    onSelect,\n    initialValues,\n  } = props;\n  const [values, setValues] = useState<any>(initialValues);\n  const { token } = useToken();\n\n  const isActive = useCallback(\n    (value: string | number) => {\n      if (multiple) {\n        return indexOf(values, `${value}`) > -1 || indexOf(values, value) > -1;\n      } else {\n        return values === value;\n      }\n    },\n    [values]\n  );\n\n  const handleClicked = useCallback(\n    (value: number | string) => {\n      let newValues: any;\n      if (multiple) {\n        newValues = [];\n        if (values && isArray(values)) {\n          newValues = [...values];\n        }\n        let existedIndex = indexOf(values, value);\n        if (existedIndex < 0) {\n          existedIndex = indexOf(values, `${value}`);\n        }\n        if (existedIndex > -1) {\n          newValues.splice(existedIndex, 1);\n        } else {\n          newValues.push(value);\n        }\n      } else {\n        if (`${values}` === `${value}`) {\n          newValues = null;\n        } else {\n          newValues = value;\n        }\n      }\n      onSelect(fieldName, newValues);\n      setValues(newValues);\n    },\n    [onSelect, values]\n  );\n\n  useEffect(() => {\n    setValues(initialValues);\n  }, [initialValues]);\n\n  return (\n    <Space wrap size={5} style={{ display: \"flex\" }}>\n      {options.map((option: any, index: number) => (\n        <TiltButton\n          color={\n            isActive(option[labelValue ? labelValue : \"id\"])\n              ? \"primary\"\n              : \"transparent\"\n          }\n          key={`${fieldName}-${option[labelValue ? labelValue : \"id\"]}`}\n          onClick={() => handleClicked(option[labelValue ? labelValue : \"id\"])}\n          style={{\n            borderColor: token.colorBorder,\n            fontStyle: \"italic\",\n            fontWeight: 400,\n            paddingBlock: 6,\n          }}\n        >\n          <Text>{option[labelKey ? labelKey : \"label\"]}</Text>\n        </TiltButton>\n      ))}\n    </Space>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AACA,oBAAiC;AACjC,mBAAiD;AA2FvC;AAzFV,IAAM,EAAE,KAAK,IAAI;AACjB,IAAM,EAAE,SAAS,IAAI;AAYd,SAAS,UAAU,OAAuB;AAC/C,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAAc,aAAa;AACvD,QAAM,EAAE,MAAM,IAAI,SAAS;AAE3B,QAAM,eAAW;AAAA,IACf,CAAC,UAA2B;AAC1B,UAAI,UAAU;AACZ,mBAAO,uBAAQ,QAAQ,GAAG,OAAO,IAAI,UAAM,uBAAQ,QAAQ,KAAK,IAAI;AAAA,MACtE,OAAO;AACL,eAAO,WAAW;AAAA,MACpB;AAAA,IACF;AAAA,IACA,CAAC,MAAM;AAAA,EACT;AAEA,QAAM,oBAAgB;AAAA,IACpB,CAAC,UAA2B;AAC1B,UAAI;AACJ,UAAI,UAAU;AACZ,oBAAY,CAAC;AACb,YAAI,cAAU,uBAAQ,MAAM,GAAG;AAC7B,sBAAY,CAAC,GAAG,MAAM;AAAA,QACxB;AACA,YAAI,mBAAe,uBAAQ,QAAQ,KAAK;AACxC,YAAI,eAAe,GAAG;AACpB,6BAAe,uBAAQ,QAAQ,GAAG,OAAO;AAAA,QAC3C;AACA,YAAI,eAAe,IAAI;AACrB,oBAAU,OAAO,cAAc,CAAC;AAAA,QAClC,OAAO;AACL,oBAAU,KAAK,KAAK;AAAA,QACtB;AAAA,MACF,OAAO;AACL,YAAI,GAAG,aAAa,GAAG,SAAS;AAC9B,sBAAY;AAAA,QACd,OAAO;AACL,sBAAY;AAAA,QACd;AAAA,MACF;AACA,eAAS,WAAW,SAAS;AAC7B,gBAAU,SAAS;AAAA,IACrB;AAAA,IACA,CAAC,UAAU,MAAM;AAAA,EACnB;AAEA,8BAAU,MAAM;AACd,cAAU,aAAa;AAAA,EACzB,GAAG,CAAC,aAAa,CAAC;AAElB,SACE,mDAAC,iBAAM,MAAI,MAAC,MAAM,GAAG,OAAO,EAAE,SAAS,OAAO,GAC3C,kBAAQ,IAAI,CAAC,QAAa,UACzB;AAAA,IAAC;AAAA;AAAA,MACC,OACE,SAAS,OAAO,aAAa,aAAa,IAAI,CAAC,IAC3C,YACA;AAAA,MAGN,SAAS,MAAM,cAAc,OAAO,aAAa,aAAa,IAAI,CAAC;AAAA,MACnE,OAAO;AAAA,QACL,aAAa,MAAM;AAAA,QACnB,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,cAAc;AAAA,MAChB;AAAA,MAEA,6DAAC,QAAM,iBAAO,WAAW,WAAW,OAAO,KAA3C;AAAA;AAAA;AAAA;AAAA,aAA6C;AAAA;AAAA,IATxC,GAAG,aAAa,OAAO,aAAa,aAAa,IAAI;AAAA,IAN5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,CACD,KAnBH;AAAA;AAAA;AAAA;AAAA,SAoBA;AAEJ;",
  "names": []
}
