{
  "version": 3,
  "sources": ["../../../app/components/common/ImageSelector.tsx"],
  "sourcesContent": ["import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Card,\n  Col,\n  Divider,\n  Image,\n  Modal,\n  Row,\n  Space,\n  Typography,\n  notification,\n} from \"antd\";\nimport { FileUploader, OverlayBg, TiltButton } from \"~/components/common\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMatches } from \"@remix-run/react\";\nconst { Title } = Typography;\n\ninterface ImageSelectorProps {\n  callback?: any;\n  children: React.ReactNode;\n  fetcher: any;\n  fieldName: string;\n  onSelect?: (imageObj: any) => void;\n  title: string;\n  presetRound?: boolean;\n  presetImages: string[];\n  frameImages?: { id: string; url: string }[];\n}\n\nexport function ImageSelector(props: ImageSelectorProps) {\n  const {\n    callback,\n    children,\n    fetcher,\n    fieldName,\n    onSelect,\n    presetImages,\n    presetRound,\n    title,\n    frameImages,\n  } = props;\n  const matches = useMatches();\n  const { cdnUrl } = matches[0].data;\n  const { t } = useTranslation();\n  const [modal, setModal] = useState<boolean>(false);\n  const [messageApi, contextHolder] = notification.useNotification();\n  const [uploading, setUploading] = useState<boolean>(false);\n\n  const handleFileTooLarge = () => {\n    messageApi.open({\n      type: \"error\",\n      message: t(\"file upload failed due to too large image size\"),\n      duration: 5,\n      placement: \"bottomRight\",\n    });\n  };\n\n  const handleSelectImage = (image: string, action: string) => {\n    const imageKey = image.replace(`${cdnUrl}/`, \"\");\n    if (action === \"frame\") {\n      if (callback) {\n        const toSubmit = {} as any;\n        toSubmit[\"assetId\"] = imageKey;\n\n        fetcher.submit(toSubmit, {\n          method: callback.method,\n          action: callback.path,\n        });\n      } else if (onSelect) {\n        onSelect({ key: imageKey, url: image });\n      }\n    } else if (action === \"all\") {\n      if (callback) {\n        const toSubmit = {} as any;\n        toSubmit[callback.key] = imageKey;\n\n        fetcher.submit(toSubmit, {\n          method: callback.method,\n          action: callback.path,\n        });\n      } else if (onSelect) {\n        onSelect({ key: imageKey, url: image });\n      }\n    }\n    setModal(false);\n  };\n\n  const handleNoFrame = useCallback(() => {\n    fetcher.submit(null, {\n      method: \"put\",\n      action: `/resources/no-frame`,\n    });\n    setModal(false);\n  }, [fetcher]);\n\n  useEffect(() => {\n    if (\n      fetcher.data &&\n      fetcher.data.field &&\n      fetcher.state &&\n      fetcher.state === \"idle\"\n    ) {\n      if (fetcher.data.field === fieldName && fetcher.data.url) {\n        setUploading(false);\n        if (callback) {\n          const toSubmit = {} as any;\n          toSubmit[callback.key] = fetcher.data.key;\n          fetcher.submit(toSubmit, {\n            method: callback.method,\n            action: callback.path,\n          });\n        } else if (onSelect) {\n          onSelect(fetcher.data);\n        }\n        setModal(false);\n      }\n    }\n  }, [fetcher]);\n\n  return (\n    <>\n      <div onClick={() => setModal(true)}>{children}</div>\n      <Modal\n        closeIcon={false}\n        closable={!uploading}\n        footer={null}\n        open={modal}\n        onCancel={() => setModal(false)}\n        modalRender={(modal) => modal}\n        zIndex={1002}\n      >\n        <Card\n          bodyStyle={{ padding: 20 }}\n          style={{ backgroundColor: \"transparent\" }}\n          bordered={false}\n        >\n          {frameImages && (\n            <Space\n              direction=\"vertical\"\n              size={30}\n              style={{\n                display: \"flex\",\n                position: \"relative\",\n              }}\n            >\n              <Title\n                level={3}\n                style={{ marginBottom: 20, marginTop: 0, textAlign: \"center\" }}\n              >\n                {t(\"select frame\")}\n              </Title>\n              <Row gutter={[15, 15]} style={{ position: \"relative\" }}>\n                <Col\n                  span={4}\n                  style={{ justifyContent: \"center\", cursor: \"pointer\" }}\n                  onClick={handleNoFrame}\n                >\n                  <Image\n                    src={\"/image/no-frame.png\"}\n                    preview={false}\n                    wrapperStyle={\n                      presetRound\n                        ? { borderRadius: \"50%\", overflow: \"hidden\" }\n                        : undefined\n                    }\n                  />\n                </Col>\n                {frameImages.map((image) => (\n                  <Col\n                    key={image.id}\n                    span={4}\n                    style={{ justifyContent: \"center\", cursor: \"pointer\" }}\n                    onClick={() => handleSelectImage(image.id, \"frame\")}\n                  >\n                    <Image\n                      src={image.url}\n                      preview={false}\n                      wrapperStyle={\n                        presetRound\n                          ? { borderRadius: \"50%\", overflow: \"hidden\" }\n                          : undefined\n                      }\n                    />\n                  </Col>\n                ))}\n                {uploading && <OverlayBg loading />}\n              </Row>\n              <Divider plain style={{ marginBlock: 0, marginBottom: \"15px\" }} />\n            </Space>\n          )}\n          <Space\n            direction=\"vertical\"\n            size={30}\n            style={{\n              display: \"flex\",\n              position: \"relative\",\n            }}\n          >\n            <Title\n              level={3}\n              style={{ marginBottom: 20, marginTop: 0, textAlign: \"center\" }}\n            >\n              {title}\n            </Title>\n            <Row gutter={[15, 15]} style={{ position: \"relative\" }}>\n              {presetImages.map((image: string) => (\n                <Col\n                  key={image}\n                  span={4}\n                  style={{ justifyContent: \"center\", cursor: \"pointer\" }}\n                  onClick={() => handleSelectImage(image, \"all\")}\n                >\n                  <Image\n                    src={image}\n                    preview={false}\n                    wrapperStyle={\n                      presetRound\n                        ? { borderRadius: \"50%\", overflow: \"hidden\" }\n                        : undefined\n                    }\n                  />\n                </Col>\n              ))}\n              {uploading && <OverlayBg loading />}\n            </Row>\n            <Divider plain style={{ marginBlock: 0 }}>\n              {t(\"or\")}\n            </Divider>\n            <FileUploader\n              disabled={uploading}\n              fetcher={fetcher}\n              fieldName={fieldName}\n              onUploading={setUploading}\n              onErrorFileTooLarge={handleFileTooLarge}\n            >\n              <TiltButton\n                color={uploading ? \"secondary\" : \"primary\"}\n                style={{ width: 600, cursor: \"pointer\", maxWidth: \"100%\" }}\n              >\n                {t(\"upload image\")}\n              </TiltButton>\n            </FileUploader>\n          </Space>\n        </Card>\n      </Modal>\n      {contextHolder}\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["modal"]
}
