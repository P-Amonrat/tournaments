{
  "version": 3,
  "sources": ["../../../app/components/common/Pagination.tsx"],
  "sourcesContent": ["import { Space } from \"antd\";\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\nimport { TiltButton } from \"./TiltButton\";\nimport { toNumber } from \"lodash\";\nimport { Media } from \"./Media\";\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageClicked: (page: number) => void;\n}\n\nexport function Pagination(props: PaginationProps) {\n  const { currentPage, onPageClicked, totalPages } = props;\n  let pages = [\"1\", `${totalPages}`];\n\n  const start = Math.max(currentPage - 2, 2);\n  const end = Math.min(currentPage + 2, totalPages - 1);\n  const surroundingPages = [];\n  for (let i = start; i <= end; i++) {\n    surroundingPages.push(`${i}`);\n  }\n  if (start > 2) {\n    surroundingPages.unshift(\"...\");\n  }\n  if (end < totalPages - 1) {\n    surroundingPages.push(\"...\");\n  }\n  pages.splice(1, 0, ...surroundingPages);\n\n  if (totalPages > 1) {\n    return (\n      <Space size={10} style={{ marginTop: 30 }}>\n        {currentPage > 1 && (\n          <Media greaterThan=\"sm\">\n            <TiltButton\n              color=\"secondary\"\n              onClick={() => onPageClicked(toNumber(currentPage - 1))}\n            >\n              <LeftOutlined />\n            </TiltButton>\n          </Media>\n        )}\n        {pages.map((page: string) => (\n          <TiltButton\n            key={page}\n            color={page === `${currentPage}` ? \"primary\" : \"secondary\"}\n            onClick={\n              page !== `${currentPage}` && page !== \"...\"\n                ? () => onPageClicked(toNumber(page))\n                : undefined\n            }\n          >\n            {page}\n          </TiltButton>\n        ))}\n        {currentPage < totalPages && (\n          <Media greaterThan=\"sm\">\n            <TiltButton\n              color=\"secondary\"\n              onClick={() => onPageClicked(toNumber(currentPage + 1))}\n            >\n              <RightOutlined />\n            </TiltButton>\n          </Media>\n        )}\n      </Space>\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAGA,oBAAyB;AAoCX;AA3BP,SAAS,WAAW,OAAwB;AACjD,QAAM,EAAE,aAAa,eAAe,WAAW,IAAI;AACnD,MAAI,QAAQ,CAAC,KAAK,GAAG,YAAY;AAEjC,QAAM,QAAQ,KAAK,IAAI,cAAc,GAAG,CAAC;AACzC,QAAM,MAAM,KAAK,IAAI,cAAc,GAAG,aAAa,CAAC;AACpD,QAAM,mBAAmB,CAAC;AAC1B,WAAS,IAAI,OAAO,KAAK,KAAK,KAAK;AACjC,qBAAiB,KAAK,GAAG,GAAG;AAAA,EAC9B;AACA,MAAI,QAAQ,GAAG;AACb,qBAAiB,QAAQ,KAAK;AAAA,EAChC;AACA,MAAI,MAAM,aAAa,GAAG;AACxB,qBAAiB,KAAK,KAAK;AAAA,EAC7B;AACA,QAAM,OAAO,GAAG,GAAG,GAAG,gBAAgB;AAEtC,MAAI,aAAa,GAAG;AAClB,WACE,mDAAC,iBAAM,MAAM,IAAI,OAAO,EAAE,WAAW,GAAG,GACrC;AAAA,oBAAc,KACb,mDAAC,SAAM,aAAY,MACjB;AAAA,QAAC;AAAA;AAAA,UACC,OAAM;AAAA,UACN,SAAS,MAAM,kBAAc,wBAAS,cAAc,CAAC,CAAC;AAAA,UAEtD,6DAAC,0BAAD;AAAA;AAAA;AAAA;AAAA,iBAAc;AAAA;AAAA,QAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,KANF;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,MAED,MAAM,IAAI,CAAC,SACV;AAAA,QAAC;AAAA;AAAA,UAEC,OAAO,SAAS,GAAG,gBAAgB,YAAY;AAAA,UAC/C,SACE,SAAS,GAAG,iBAAiB,SAAS,QAClC,MAAM,kBAAc,wBAAS,IAAI,CAAC,IAClC;AAAA,UAGL;AAAA;AAAA,QARI;AAAA,QADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,CACD;AAAA,MACA,cAAc,cACb,mDAAC,SAAM,aAAY,MACjB;AAAA,QAAC;AAAA;AAAA,UACC,OAAM;AAAA,UACN,SAAS,MAAM,kBAAc,wBAAS,cAAc,CAAC,CAAC;AAAA,UAEtD,6DAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,iBAAe;AAAA;AAAA,QAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,KANF;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,SAhCJ;AAAA;AAAA;AAAA;AAAA,WAkCA;AAAA,EAEJ;AACF;",
  "names": []
}
